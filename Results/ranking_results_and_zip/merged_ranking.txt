===== ranking_results/ranking_results (7).txt =====
md file name: /content/validation/MAR-17-352-01 HatMan - Safety System Targeted Malware (Update B).md

md file name: /content/validation/KillDisk Variant Hits Latin American Finance Industry _ Trend Micro (US).md

md file name: /content/validation/Malware Shuts Down German Nuclear Power Plant on Chernobyl's 30th Anniversary.md

md file name: /content/validation/joint-advisory-shows-new-sandworm-malware-cyclops-blink-replaces-vpnfilter.md

md file name: /content/validation/KillDisk Variant Hits Latin American Financial Groups _ Trend Micro (US).md

md file name: /content/validation/Win32_Industroyer.md

===== ranking_results/ranking_results (8).txt =====
md file name: /content/validation/MAR-17-352-01 HatMan - Safety System Targeted Malware (Update B).md

md file name: /content/validation/KillDisk Variant Hits Latin American Financial Groups _ Trend Micro (US).md

md file name: /content/validation/joint-advisory-shows-new-sandworm-malware-cyclops-blink-replaces-vpnfilter.md

md file name: /content/validation/Win32_Industroyer.md

md file name: /content/validation/KillDisk Variant Hits Latin American Finance Industry _ Trend Micro (US).md

md file name: /content/validation/Malware Shuts Down German Nuclear Power Plant on Chernobyl's 30th Anniversary.md

===== ranking_results/ranking_results _first.txt =====
md file name: /content/validation/2010-071400-3123-99.md

| 1 | `Symdiag tool` → `Mentioned` | CORRECT | It's a generic tool name that cannot be used directly for automated detection. |
| 2 | `Symantec Security Response` → `Mentioned` | CORRECT | It's a service name reference and not a unique, searchable indicator. |
| 3 | `LiveUpdate™` → `Mentioned` | CORRECT | It's merely a branded product name without actionable properties. |
| 4 | `Symantec endpoints` → `Mentioned` | CORRECT | It describes a group of endpoints in a generic way that isn’t directly detectable. |

md file name: /content/validation/report_52.md

| 1 | `Ransomware in the CIS` → `Mentioned` | CORRECT | It is a conceptual reference rather than a concrete, machine-detectable indicator. |
| 2 | `QUSERCENTRICS` → `Actionable` | CORRECT | The string is a complete, unique identifier that can be directly matched in logs. |
| 3 | `Cookiebot` → `Actionable` | CORRECT | The product name is specific and complete, making it suitable for automated detection. |

| 4 | 0x23:0x0C → Actionable | CORRECT | The value is a complete and exact memory artifact that can be directly matched in a detection rule. |
| 5 | 0x11 → Described | CORRECT | The offset value is too generic and ambiguous to function as a unique detection indicator without additional context. |
| 6 | 0x33 → Described | CORRECT | Being a simple selector value, it is non‑unique and insufficient for precise automated detection. |
| 7 | retf → Mentioned | CORRECT | The term is used conceptually to denote an assembly instruction rather than a unique, actionable artifact. |
| 8 | 0xCB → Described | CORRECT | Although complete, this opcode is common and ambiguous, making it unsuitable as a directly actionable indicator. |

| 9 | 0x23:0x0C → Actionable | CORRECT | It is a complete, concrete memory address that can be directly matched in a detection rule. |
| 10 | retf → Mentioned | CORRECT | "retf" is a common assembly instruction and is too generic to serve as a unique detection indicator. |
| 11 | RVA address 6-7 → Described | CORRECT | It describes an address range rather than providing a unique, exact value for automated detection. |
| 12 | Heaven's Gate → Mentioned | CORRECT | It names an exploit technique conceptually, without being a unique, actionable artifact. |

| 13 | exp → Described | CORRECT | The value “exp” is an ambiguous ransom note filename template that isn’t unique enough for direct automated detection. |
| 14 | ımg → Described | CORRECT | As a template extracted from configuration, “ımg” is ambiguous and not unique enough to be considered actionable. |
| 15 | Subscribe → Described | CORRECT | “Subscribe” is a common keyword taken from configuration and lacks the uniqueness needed for an actionable indicator. |
| 16 | QUISERCENTRICS → Described | INCORRECT — should be "Actionable" because it is a complete and unique indicator string that can be directly matched by a detection rule. | It appears as a standalone, specific string from the configuration that affords low false‑positive matching. |
| 17 | Cookiebot → Described | CORRECT | Although “Cookiebot” is a known product name, its use in this context is ambiguous and thus appropriately marked as described. |
| 18 | pk_key → Described | CORRECT | As only a registry value name without a full key path, “pk_key” is too generic to serve as an actionable artifact. |
| 19 | sub_key → Described | CORRECT | “sub_key” is a generic identifier for an encryption key and requires further contextual enrichment for detection. |
| 20 | sk_key → Described | CORRECT | Being merely the name of a registry key value, “sk_key” is ambiguous and fits the described category. |
| 21 | 0_key → Described | CORRECT | “0_key” is a short, ambiguous registry value name that does not provide a unique artifact for automated detection. |
| 22 | public skeleton key → Described | CORRECT | This label is a descriptive identifier for a hardcoded key rather than a precise, actionable key value. |
| 23 | ECIES algorithm → Mentioned | CORRECT | It is a conceptual reference to an encryption algorithm, which is not directly actionable. |
| 24 | Curve25519 elliptic curve → Mentioned | CORRECT | The mention of this cryptographic primitive is conceptual and not sufficient for direct detection. |
| 25 | SHA3-256 cryptographic hash → Mentioned | CORRECT | This is a reference to a hash algorithm rather than a specific hash value, making it only mentioned. |
| 26 | AES-256 block cipher in CFB mode → Mentioned | CORRECT | The observable only describes the cryptographic cipher and mode, serving as a conceptual reference rather than a unique indicator. |

| 27 | Fragment of the desktop wallpaper created by the ransomware → Described | CORRECT | The observable is ambiguous and requires further extraction (e.g., file hashes) before it can be directly used for detection. |

| 28 | `QUISERCENTRICS Cookiebot` → `Mentioned` | CORRECT | The string is a tool name mentioned in a cookie notice and is not a concrete, unique threat indicator.  |

| 29 | `QUISERCENTRICS Cookiebot` → `Described` | Validator output CORRECT | Rationale: The product name is mentioned in a descriptive context and is not a unique technical indicator for direct detection. |
| 30 | `oc` → `Mentioned` | Validator output CORRECT | Rationale: The token "oc" is too ambiguous and lacks sufficient specificity to be actionable. |

| 31 | `ToddyCat` → `Described` | CORRECT | A malware family name used conceptually, not as a concrete indicator for detection. |
| 32 | `Null Session` → `Mentioned` | CORRECT | It refers to a generic authentication bypass technique rather than a specific indicator. |
| 33 | `DeepSeek` → `Described` | CORRECT | As a malware family name, it serves as a descriptive label rather than a unique, actionable artifact. |
| 34 | `TookPS` → `Described` | CORRECT | It is the name of a tool extracted from context and isn’t a complete, unique identifier for detection. |
| 35 | `ClipBanker` → `Described` | CORRECT | This malware family label is descriptive and not presented as a concrete, actionable indicator. |
| 36 | `Irojan` → `Described` | CORRECT | Similar to other malware family names, it is descriptive and not directly actionable for detection. |
| 37 | `MS-RPC` → `Mentioned` | CORRECT | It is a reference to a standard protocol, providing only conceptual context and not a unique artifact. |

| 38 | QUISERCENTRICS → Mentioned | CORRECT | It’s a product name extracted from cookie banner text, which is a conceptual reference rather than a unique, actionable indicator. |
| 39 | Cookiebot → Mentioned | CORRECT | As a cookie consent management platform name, it is mentioned conceptually and not used for direct automated detection. |
| 40 | Operation ForumTroll → Mentioned | CORRECT | The campaign name is a conceptual reference that cannot be turned into a concrete detection without further context. |
| 41 | Google Chrome → Mentioned | CORRECT | Referencing a common software product as the target does not yield a unique, actionable indicator. |

md file name: /content/validation/REvil Ransomware-as-a-Service_ An analysis of a… _ Intel 471.md

| 1 | REvil → Mentioned | CORRECT | It is a malware family name, which is conceptually referenced and not a unique indicator for automated detection. |
| 2 | Sodinokibi → Mentioned | CORRECT | It is an alias for the REvil ransomware family, thus a generic reference rather than a concrete artifact. |
| 3 | Sodin → Mentioned | CORRECT | As an alias for REvil, it is only conceptually referenced and not actionable on its own. |
| 4 | Oracle WebLogic servers → Mentioned | CORRECT | The phrase is a generic product name without version specifics, which makes it non-unique for detection. |
| 5 | CVE-2019-2725 → Actionable | CORRECT | This is a complete vulnerability identifier that can be directly used for detection. |
| 6 | CVE-2018-8453 → Actionable | CORRECT | Being a full CVE identifier, it is unique and directly actionable. |
| 7 | HTTPS → Mentioned | CORRECT | "HTTPS" is a generic protocol term and not a unique artifact for concrete detection. |

| 8 | Uses a persistence mechanism. → Mentioned | CORRECT | The observable is a generic behavioral description that does not offer unique, actionable details. |
| 9 | Encrypts additional resources. → Mentioned | CORRECT | The phrase is a conceptual behavior description without specific detection parameters. |
| 10 | Supports privilege escalation. → Mentioned | CORRECT | It provides a generic behavioral indication that is not concrete enough for automated detection. |

| 11 | REvil → Mentioned | CORRECT | "REvil" is a known ransomware family name referenced conceptually rather than a specific, unique detection indicator. |
| 12 | Unknown → Mentioned | CORRECT | "Unknown" is too generic and used only as a conceptual reference to the threat actor. |
| 13 | UNKN → Mentioned | CORRECT | "UNKN" functions as an ambiguous alias and does not offer a unique indicator for detection. |
| 14 | GandCrab → Mentioned | CORRECT | "GandCrab" is a malware family name referenced in context, serving only as a conceptual marker. |
| 15 | GandGr → Mentioned | CORRECT | "GandGr" is used as an alias with no unique detection characteristics, making it appropriately mentioned. |
| 16 | version 2.1 → Mentioned | CORRECT | The version string "version 2.1" is a generic attribute and does not provide a concrete detection indicator. |
| 17 | GandCrab affiliate program → Mentioned | CORRECT | This phrase describes an affiliate program concept without offering a distinct, actionable identifier. |
| 18 | master public key → Mentioned | CORRECT | The term "master public key" is descriptive and lacks the specific key details needed for actionable detection. |

| 19 | kerberos → Described | CORRECT | It’s ambiguous—serving as both a moderator alias and a common protocol term—so additional context is required for detection. |
| 20 | lalartu → Described | CORRECT | As a threat actor alias, it isn’t directly actionable and therefore merits a "Described" rank. |
| 21 | GandCrab → Described | CORRECT | The ransomware family name is used contextually and isn’t a unique artifact suitable for direct detection. |
| 22 | REvil → Described | CORRECT | Like other ransomware family names, it provides context rather than serving as a concrete, actionable indicator. |
| 23 | U → Mentioned | CORRECT | The single-letter alias is highly ambiguous and cannot be reliably used in detection, making "Mentioned" appropriate. |

| 24 | andersongilmour[.]co[.]uk → Actionable | CORRECT | The domain is a unique, complete indicator that can be transformed trivially for matching in detection systems. |

| 25 | A .txt file with a ransom note on each directory encrypted by the ransomware. → Described | CORRECT | The description is generic and does not specify an exact, uniquely actionable file name. |
| 26 | A .bmp image in the temporary directory set as the desktop background after the encryption. → Described | CORRECT | The observable describes a generic file without a specific identifier, making it non‐actionable. |
| 27 | A registry key SOFTWARE present under either HKEY_LOCAL_MACHINE or HKEY_CURRENT_USER. → Described | CORRECT | The registry key referenced is common and ambiguous, lacking a unique identifier for direct detection. |
| 28 | An alphanumeric file extension between 5 and 10 characters in length appended to the original extension of an encrypted file. → Described | CORRECT | The observable outlines a dynamic pattern rather than a fixed, uniquely actionable string. |

| 29 | yara-req@intel471.J.com → Actionable | CORRECT | This is a complete, unique email address that can be directly matched for detection.  |

| 30 | REvil ransomware → Mentioned | CORRECT | The term generically refers to the ransomware family without a unique, actionable identifier. |
| 31 | vin32k.sys → Described | CORRECT | The file name is ambiguous (potential typo) and lacks uniqueness for direct automation, fitting a descriptive context. |
| 32 | CVE-2018-8453 → Actionable | CORRECT | The CVE identifier is complete and uniquely searchable for automated detection. |
| 33 | DestroyWindow → Mentioned | CORRECT | A common Windows API function name that is too generic for precise automated detection. |
| 34 | labs/mcafee-atr-analyzes-sodinokibi-aka-revil-ransomware-as-a-service-what-the-code-tells-us/ → Actionable | CORRECT | The specific URL path, despite lacking an explicit scheme, is unique enough to be used in detection rules. |
| 35 | REvil → Mentioned | CORRECT | As a malware family alias, it is a generic reference not suited for precise automated detection. |
| 36 | Sodinokibi → Mentioned | CORRECT | The alternate malware family name is used conceptually and lacks the specificity required for direct detection. |
| 37 | Ghidra → Mentioned | CORRECT | The reference to a widely used reverse engineering tool is conceptual and not actionable on its own. |

| 38 | REvil ransomware → Mentioned | CORRECT | It is a generic reference to a known ransomware family and not a unique, directly actionable indicator. |
| 39 | 32-bit hashes → Mentioned | CORRECT | It describes a generic technique rather than providing a specific, actionable hash value. |

| 40 | `ServicesActive` → `Actionable` | CORRECT | It is a complete hard‑coded string that can be matched exactly, making it a unique indicator for detection. |

| 41 | `void rc4_decrypt_string(BYTE *rc4_array, int rc4_key_length, int buffer_length, BYTE *out` → `Actionable` | CORRECT | The function prototype is a concrete code snippet that can be matched directly. |
| 42 | `rc4_array` → `Described` | CORRECT | The generic variable name lacks the uniqueness needed for an actionable indicator. |
| 43 | `rc4_key_offset` → `Described` | CORRECT | The variable name is ambiguous and does not provide a unique detection element. |
| 44 | `rc4_key_length` → `Described` | CORRECT | The parameter name is generic and insufficient for direct automated detection. |
| 45 | `buffer_length` → `Described` | CORRECT | The variable name is generic and context-dependent, making it non‑actionable. |
| 46 | `out_buffer` → `Described` | CORRECT | The generic nature of the variable name prevents it from being a unique identifier. |
| 47 | `RC4` → `Mentioned` | CORRECT | The reference to an encryption algorithm is conceptual and not directly actionable. |
| 48 | `REvil ransomware` → `Mentioned` | CORRECT | The malware family name is a general reference rather than a precise, matchable indicator. |

| 49 | `6953d86d09cb8ed34856b56f71421471718ea923cd12c1e72224356756db2ef1` → Actionable | CORRECT | The SHA256 hash is a complete and unique artifact that can be directly matched. |
| 50 | `372c8276ab7cad70ccf296722462d7b8727e8563c0bfe4344184e1bc3afc27fc` → Actionable | CORRECT | The SHA256 hash is a complete and unique artifact that can be directly matched. |
| 51 | `ec0c653d5e10fec936dae340bf97c88f153cc0cdf7079632a38a19c876f3c4fe` → Actionable | CORRECT | The SHA256 hash is a complete and unique artifact that can be directly matched. |
| 52 | `GetProcAddress` → Mentioned | CORRECT | The Windows API function is a common reference and not unique enough for low false‑positive detection. |
| 53 | `Global|1DE3C565-E2C-8190-7A66` → Actionable | CORRECT | The mutex name is a unique, hard‑coded identifier that can be directly used in detection. |
| 54 | `CVE-2018-8453` → Actionable | INCORRECT — should be "Described" because vulnerability identifiers require contextual enrichment and are not used directly for automated detection. | CVE strings, while complete, serve as references needing further lookup rather than driving low‑false‑positive detection. |
| 55 | `.vhwfq9` → Actionable | CORRECT | The unique PE section name is an exact and specific identifier that can be directly matched. |
| 56 | `jon -parser` → Described | CORRECT | The software/tool name is descriptive and ambiguous, making it unsuitable for direct detection without enrichment. |
| 57 | `hxxp://aplebzu47wgazapdqks6vrcv6zcnjppkbxbr6wketf56nf6aq2nmyoyd[.]onion/{UID}` → Actionable | INCORRECT — should be "Described" because the URL contains a placeholder, so it isn’t a concrete, matchable artifact. | The presence of "{UID}" makes the URL a template requiring further enrichment before it can drive automated detection. |

| 58 | `.g19b9wy` → `Actionable` | CORRECT | The file extension is a specific, exact string that can be directly matched to detect REvil-encrypted files. |
| 59 | `8100F233BC097E90` → `Actionable` | CORRECT | The hardware identifier is a complete hex string that can be precisely used for detection. |
| 60 | `Intel(R) Core(TM) i7-6700HQ CPU @ 2.60GHz.` → `Described` | CORRECT | The CPU model information is non‑unique and serves only for descriptive purposes rather than direct detection. |
| 61 | `{ "ver":"8d", # REvil's version: hard coded to 0x200 (v2.00). "pid":"%s", # ... "ext":"%s" }` → `Described` | CORRECT | The JSON configuration template contains placeholders, making it insufficient for direct, actionable detection.

| 62 | Romanian → Mentioned | CORRECT | Keyboard layout names are generic and not unique enough for automated detection. |
| 63 | Russian → Mentioned | CORRECT | Keyboard layouts are generic identifiers, making them conceptually referenced. |
| 64 | Ukrainian → Mentioned | CORRECT | Generic language names in malware configuration are non‑unique and not directly actionable. |
| 65 | Belarusian → Mentioned | CORRECT | As a common keyboard layout, it is used conceptually rather than as a precise indicator. |
| 66 | Estonian → Mentioned | CORRECT | Generic keyboard layout identifiers are naturally non‐unique and thus only mentioned. |
| 67 | l atvian → Mentioned | CORRECT | Despite the typo, it remains a generic keyboard layout entry not suited for direct detection. |
| 68 | I ithunning → Mentioned | CORRECT | The observable is a textual keyboard layout entry and is only conceptually referenced. |
| 69 | Skip to content → Mentioned | CORRECT | Even though non‑standard, this entry is a generic reference and not intended for actionable matching. |
| 70 | . Kyrgyz → Mentioned | CORRECT | Punctuation aside, it’s a generic keyboard layout entry with no unique characteristics. |
| 71 | Turkmen → Mentioned | CORRECT | As a language entry, it is too generic for direct detection and is thus only mentioned. |
| 72 | Uzbek → Mentioned | CORRECT | The generic nature of the language designation renders it conceptually referenced. |
| 73 | Tatar → Mentioned | CORRECT | A common keyboard layout string that cannot be uniquely detected, making it merely mentioned. |
| 74 | memtas → Actionable | CORRECT | This unique service name is specific enough to be matched directly in detection systems. |
| 75 | crm → Described | CORRECT | Being a generic abbreviation, it requires additional context before it can be reliably detected. |
| 76 | quickbooks → Described | CORRECT | The term is generic and widely used, necessitating further enrichment for detection. |
| 77 | svc$ → Actionable | CORRECT | Its distinctive formation, including the special character, makes it suitable for exact matching. |
| 78 | mepocs → Actionable | CORRECT | As a unique service name from the malware configuration, it is directly actionable. |
| 79 | exchange → Described | CORRECT | A common service name like “exchange” is ambiguous and not unique enough for automated detection. |
| 80 | pos "sql" → Described | CORRECT | The embedded quotes and potential ambiguity suggest it requires further context before use in detection. |
| 81 | backup → Described | CORRECT | A generic term that is likely found in benign contexts, thus it is not directly actionable. |
| 82 | qb → Described | CORRECT | The abbreviated nature makes it too generic and ambiguous for precise automated matching. |
| 83 | sophos → Described | CORRECT | Although referencing a known antivirus, the term is generic and common, limiting its detection value. |
| 84 | sage → Described | CORRECT | This common service name is ambiguous and can lead to false positives if used directly for detection. |
| 85 | /3wp → Actionable | CORRECT | Its unique and complete form as a process name allows for exact matching in detections. |
| 86 | thunderbird → Described | CORRECT | As a widely recognized process name, it is generic and not sufficiently unique for actionable use. |
| 87 | mydesktopqos → Actionable | CORRECT | This distinct process name can be directly leveraged for precise automated detection. |
| 88 | outlook → Described | CORRECT | Being a common process name, it requires additional context to avoid false positives in detection. |
| 89 | srv → Described | CORRECT | Its ambiguity and brevity make it unsuitable as a unique, directly actionable indicator. |
| 90 | infopath → Described | CORRECT | This common Microsoft process name is too generic to be used on its own for detection. |
| 91 | ms "ocautoupds" → Described | INCORRECT — should be "Actionable" because it's a complete and unique process name that can be directly matched. | Despite the embedded quotes, the string is specific and rare enough to drive automated detection. |
| 92 | cmd.exe /c vssadmin.exe Delete Shadows /All /Quiet & bcdedit} recoveryenabled No & bcdedit /set bootstatuspolicy ignoreallfailures → Actionable | CORRECT | As a full command line, it is unique and detailed enough to be used directly in detection systems. |

| 93 | `Get-WmiObject Win32_Shadowcopy | ForEach-Object {$_.Delete();}` → `Actionable` | CORRECT | The observable is a complete PowerShell command snippet that can be matched as-is. |
| 94 | `REvil` → `Mentioned` | CORRECT | It is a malware family name referenced conceptually and isn’t a unique, directly matchable artifact. |
| 95 | `-full` → `Actionable` | CORRECT | The exact command‐line argument is a distinct string used to trigger full encryption mode. |
| 96 | `-fast` → `Actionable` | CORRECT | This command‐line flag is an exact, unique argument used in the ransomware’s behavior. |
| 97 | `-path` → `Actionable` | CORRECT | In this context the argument uniquely specifies the encryption directory, making it directly matchable. |
| 98 | `-nolan` → `Actionable` | CORRECT | It is a precise command‐line argument that instructs the malware to avoid shared network storage, hence actionable. |
| 99 | `-nolocal` → `Actionable` | CORRECT | The argument clearly indicates exclusion of local storage and qualifies as a directly detectible artifact. |
| 100 | `O` → `Described` | CORRECT | The single-letter encryption type value is ambiguous without context and thus requires further interpretation. |
| 101 | `2` → `Described` | CORRECT | The numeric value is too generic by itself and serves as a parameter indicator, not a unique identifier. |
| 102 | `wht` → `Mentioned` | CORRECT | As a configuration field name for whitelisting, it is a generic reference unsuitable for direct detection. |
| 103 | `fld` → `Mentioned` | CORRECT | This configuration key is simply a generic parameter name and is appropriately marked as mentioned. |
| 104 | `fls` → `Mentioned` | CORRECT | The configuration key is generic and only conceptually referenced, justifying its "Mentioned" rank. |
| 105 | `ext` → `Mentioned` | CORRECT | Being a common configuration key for file extensions, the observable is adequately classified as mentioned. |
| 106 | `et` → `Mentioned` | CORRECT | The configuration field for encryption type is generic and only conceptually referenced. |
| 107 | `spsize` → `Mentioned` | CORRECT | As a configuration field specifying a parameter value, it is a generic term not suitable for direct matching. |
| 108 | `net` → `Mentioned` | CORRECT | This boolean configuration field is a generic attribute and is therefore conceptually referenced only. |
| 109 | `//O` → `Actionable` | CORRECT | The I/O parameter string is distinct and can be directly matched in detection rules. |

| 110 | CVE-2018-8453 → Actionable | CORRECT | This CVE identifier is complete, unique, and can be matched exactly, fulfilling the criteria for an actionable observable. |

| 111 | `1TfXk` → `Actionable` | CORRECT | It is a complete, specific registry value string that can be directly searched. |
| 112 | `2YEdLY` → `Actionable` | CORRECT | It is a unique registry value indicator from the CTI report, suitable for deterministic matching. |
| 113 | `aah` → `Actionable` | CORRECT | Despite its brevity, it is reported as a specific registry value name and can be matched exactly. |
| 114 | `fdle` → `Actionable` | CORRECT | It is a complete registry value indicator provided by the CTI report, enabling precise detection. |
| 115 | `AaZW1s3` → `Actionable` | CORRECT | The registry value is a specific and exact string from the report, making it actionable for automated detection. |
| 116 | `Skip to content` → `Actionable` | INCORRECT — should be "Described" because the string is a common, generic phrase that lacks the uniqueness required for actionable detection. | Its generic nature (commonly found in many UI contexts) makes it ambiguous and unsuitable for precise automated matching. |

| 117 | `Curve25519` → `Mentioned` | CORRECT | It names a cryptographic algorithm conceptually rather than providing a unique, complete indicator. |
| 118 | `crypt_public` → `Actionable` | CORRECT | The string is a complete, exact indicator from the malware configuration that can be directly matched. |
| 119 | `crypt_secret` → `Actionable` | CORRECT | It is a specific, hard-coded key identifier that can be used as an exact match in detection rules. |
| 120 | `file_public` → `Actionable` | CORRECT | This value is a complete and unique configuration string suitable for direct detection. |
| 121 | `file_secret` → `Actionable` | CORRECT | It is an exact, complete string from the malware’s key configuration that detection rules can reliably use. |
| 122 | `attacker_public` → `Actionable` | CORRECT | The string is a precise, hard-coded indicator from the sample’s configuration, making it actionable. |
| 123 | `attacker_secret` → `Actionable` | CORRECT | It represents a specific key identifier that is complete and can be directly matched in detection mechanisms. |
| 124 | `master_public` → `Actionable` | CORRECT | The hard-coded nature and uniqueness of the string justify its actionable status. |
| 125 | `master_secret` → `Actionable` | CORRECT | It is a full, unique indicator from the malware that can be directly used in detection rules. |
| 126 | `user_config_public` → `Actionable` | CORRECT | The complete and unique string makes it directly matchable, supporting its actionable designation. |
| 127 | `user_config_secret` → `Actionable` | CORRECT | As a complete, exact string from the configuration, it qualifies as actionable for detection purposes. |

| 128 | BYTE* rvl_encrypt_data(BYTE *hispublic, BYTE *buffer, int buffer_length), BYTE *out_buffer_length) → Actionable | CORRECT | The function prototype is a complete code snippet that can be matched exactly. |
| 129 | ni uwar na a a a a ya yin tan da a na rane a ne a a a resan ne cinciyaren wanna a ya sauri ne yiyyara wanna u yanzun ne yin ne w → Actionable | CORRECT | The decoded user key is provided in full, making it a unique string suitable for exact matching. |
| 130 | TTXX → Actionable | CORRECT | As the full registry value used for storing the attacker public key, the string is complete and can be directly detected. |
| 131 | 2YEdLY → Actionable | CORRECT | The registry value representing the master_public key is given in its entirety, making it a precise indicator for detection. |

| 132 | AaZ → Actionable | CORRECT | "AaZ" is a unique file extension specifically generated by REvil ransomware and can be exactly matched. |
| 133 | 2YEdLY → Actionable | CORRECT | "2YEdLY" is a precise registry value string tied to REvil’s encryption process, making it directly matchable. |
| 134 | typedef _rvl_filecrypt_struct { 0VERLAPPED Overlapped; ... SWIP. struct rvl metadata { BYTE crypt secret w attacker pub[88]; // same as registry value " BYTE crypt_secret_w_master_pub[88]; // same as registry value "2YEdLY", BYTE file_public[32]; // file_public key. BYTE salsa20_iv[8]; // salsa20 initialization vector. DWORD crc32_file_public; CRC32 hash of file_public; DWORD et; // The encryption type. // spsize field applicable. DWDRD encrypted_null; // A NULL value encrypted with salsa20. } metadata; /%.S } rvl_filecrypt_struct, *prvl_filecrypt_struct; → Actionable | CORRECT | The provided C structure definition, despite using ellipses, is a full code snippet that uniquely identifies REvil’s file encryption metadata. |
| 135 | DH_falso key → Actionable | CORRECT | The constant string "DH_falso key" is a unique encryption key constant that can be directly used in detection. |

| 136 | SOFTV persistence → Actionable | CORRECT | The registry key name is a complete, unique string that can be directly matched. |
| 137 | k51299BQXH → Actionable | CORRECT | The registry value name is a complete, unique string suitable for direct detection. |

| 138 | "\/(wp-content|static|content|include|news|data|admin)\/(images|pictures|image|temp|tmp|graphic|assets|pics|z]{2}){1,10}\.(jpg|png|gif)" → Actionable | CORRECT | The regex is a complete, specific detection artifact that can be used as-is in automated matching. |
| 139 | "QaUXNv2P" → Actionable | CORRECT | The registry value is provided in full and can serve as a unique indicator for direct detection. |

| 140 | Y09E7ouT83RseZgGnLR2DxiFRbXiteYQir0JcZ0jplo= → Actionable | CORRECT | It is a complete Base64‐encoded cryptographic key that can be directly matched by detection rules. |
| 141 | $2a$10$7q070syLvX5asISuSa9AWurg843zR.433XEtfKZrGURjN9e.xNz6 → Actionable | CORRECT | It is a complete bcrypt hash that serves as a unique indicator. |
| 142 | 3195 → Described | CORRECT | It is a generic numeric identifier lacking the uniqueness needed for actionable detection. |
| 143 | programdata → Described | CORRECT | It is a common folder name and too ambiguous to drive a precise detection rule. |
| 144 | perflogs → Described | CORRECT | Being a generic folder name, it requires additional context to be used in detection. |
| 145 | application data → Described | CORRECT | It is a common folder name that is not unique enough on its own. |
| 146 | $wi "system volume information → Described | CORRECT | The folder name (with embedded quotes) is ambiguous and not uniquely identifiable. |
| 147 | windowser → Described | CORRECT | It is a non‐unique folder name variant, making it unsuitable for direct automated matching. |
| 148 | google → Described | CORRECT | It is a common name without distinctive characteristics to serve as an actionable indicator. |
| 149 | msocache → Described | CORRECT | It is a generic folder name that by itself isn’t sufficient for precise detection. |
| 150 | boot → Described | CORRECT | It is a standard folder name that is too generic to be actionable. |
| 151 | windows.old → Described | CORRECT | It is a common system folder name that lacks the specificity required for detection. |
| 152 | $windows "mozilla → Described | CORRECT | The presence of embedded quotes and its generic nature make it ambiguous for detection. |
| 153 | intel → Described | CORRECT | It is a generic folder name without clear uniqueness for automated detection. |
| 154 | boot.ini → Described | CORRECT | As a common Windows filename, it is ambiguous and not unique enough for detection. |
| 155 | ntuser.dat → Described | CORRECT | It is a typical user profile file name that does not offer a unique signature. |
| 156 | autorun.inf → Described | CORRECT | It is a generic filename that requires additional context for detection purposes. |
| 157 | bootsect.bak → Described | CORRECT | It is a common backup filename and lacks sufficient uniqueness for actionable matching. |
| 158 | deskt "thumbs.db → Described | CORRECT | Despite the embedded quotes, it is a common filename pattern with inherent ambiguity. |
| 159 | ntuser.ini → Described | CORRECT | It is a well‑known configuration file name that is too generic to be actionable. |
| 160 | ntuser.dat.log → Described | CORRECT | It is an extended version of a common filename and remains ambiguous for detection. |
| 161 | ntldr → Described | CORRECT | As a common system file name, it is not unique enough to drive an automated rule. |
| 162 | bootfont.bin → Described | CORRECT | It is a generic system file name without distinctive properties for direct matching. |
| 163 | msp → Described | CORRECT | It is a short, generic identifier (file extension or folder fragment) that is ambiguous. |
| 164 | rom → Described | CORRECT | It is a generic term or file extension that lacks the uniqueness required for detection. |
| 165 | rtp → Described | CORRECT | It is a common file extension abbreviation and cannot be uniquely matched alone. |
| 166 | shs → Described | CORRECT | It is an ambiguous file extension without distinctive characteristics. |
| 167 | "msc → Described | CORRECT | The extraneous characters render it ambiguous and not unique enough for detection. |
| 168 | nomedia → Described | CORRECT | It is a common file or folder indicator that is too generic for actionable use. |
| 169 | deskthemepack → Described | CORRECT | It is a generic identifier that does not offer sufficient uniqueness for detection. |
| 170 | diagcfg → Described | CORRECT | It is a common configuration-related term and lacks unique detection features. |
| 171 | msstyles → Described | CORRECT | It is a standard Windows file name used for themes and is inherently ambiguous. |
| 172 | scr → Described | CORRECT | As a common screensaver file extension, it is too generic for precise detection. |
| 173 | hta → Described | CORRECT | It is a well‐known file extension for HTML applications and is ambiguous by itself. |
| 174 | idx → Described | CORRECT | It is a generic file extension that lacks the uniqueness required for an actionable indicator. |
| 175 | ics → Described | CORRECT | As a common calendar file extension, it is not distinct enough for direct matching. |
| 176 | lock → Described | CORRECT | It is a generic term used in various contexts and cannot be reliably searched on its own. |
| 177 | diz "icns → Described | CORRECT | The embedded quotes and common usage as a file extension make it ambiguous. |
| 178 | msi → Described | CORRECT | It is a common installer file extension that is too generic to be directly actionable. |
| 179 | themepack → Described | CORRECT | It is a generic term with insufficient specificity for automated detection. |
| 180 | key → Described | CORRECT | In this context as a file extension, it is ambiguous despite the term’s other meanings. |
| 181 | bit → Described | CORRECT | It is a short, generic file extension that lacks distinctiveness. |
| 182 | cab → Described | CORRECT | It is a common file extension for cabinet files and is too generic for direct detection. |
| 183 | nls → Described | CORRECT | It is a generic file extension without distinctive features for automated matching. |
| 184 | spl → Described | CORRECT | As a file extension for spool files, it is ambiguous and unsuited for direct detection. |
| 185 | icl → Described | CORRECT | It is a standard file extension for icon libraries and lacks unique detection context. |
| 186 | sys → Described | CORRECT | It is a ubiquitous system file extension that does not offer unique identification. |
| 187 | drv → Described | CORRECT | It is a common driver file extension and is too generic for actionable detection. |
| 188 | lnk → Described | CORRECT | It is a generic shortcut file extension that is ambiguous when used alone. |
| 189 | c "cpl → Described | CORRECT | The embedded quotes and generic naming result in an ambiguous indicator. |
| 190 | ico → Described | CORRECT | It is a common image file extension with no unique attributes for detection. |
| 191 | com → Described | CORRECT | It is a generic executable file extension that lacks the specificity needed to be actionable. |
| 192 | exe → Described | CORRECT | It is a common executable file extension and is too generic for precise matching. |
| 193 | ocx → Described | CORRECT | It is a standard ActiveX control file extension that does not uniquely identify malicious activity. |
| 194 | dll → Described | CORRECT | It is a ubiquitous file extension for dynamic link libraries and is ambiguous on its own. |
| 195 | hlp → Described | CORRECT | It is a legacy help file extension that is non‑unique and ambiguous. |
| 196 | mpa → Described | CORRECT | It is a generic file extension that does not provide a unique detection value. |
| 197 | ani → Described | CORRECT | It is a common extension for animated cursors and is too generic for actionable use. |
| 198 | msu → Described | CORRECT | It is a standard update file extension that is ambiguous when used by itself. |
| 199 | ps1 → Described | CORRECT | It is a common PowerShell script file extension lacking sufficient uniqueness for detection. |
| 200 | 386 → Described | CORRECT | It is a generic numeric file extension that does not provide a unique signature. |
| 201 | \/3wp → Described | CORRECT | It is a process name that is too generic and ambiguous to be directly actionable. |
| 202 | thunderbird → Described | CORRECT | It is a common process/application name that could belong to legitimate software. |
| 203 | mydesktopqos → Described | CORRECT | It is a process name extracted from configuration but not unique enough for automated detection. |
| 204 | powerpnt → Described | CORRECT | It is a short, generic process name referring to PowerPoint, making it ambiguous for detection. |
| 205 | srv → Described | CORRECT | It is an ambiguous process name typically used in multiple contexts. |
| 206 | infopath → Described | CORRECT | It is a common process name associated with a known application, thus ambiguous. |
| 207 | msaccess → Described | CORRECT | It is a generic process name for a common application and is not uniquely actionable. |
| 208 | ocal "qb → Described | CORRECT | The inclusion of embedded quotes and truncation makes it an ambiguous process name. |
| 209 | core → Described | CORRECT | It is a very generic process name that lacks the required unique identifier for detection. |
| 210 | mspub → Described | CORRECT | It is a process name that does not offer sufficient specificity for automated matching. |
| 211 | store → Described | CORRECT | The process name is generic and ambiguous in the absence of additional context. |
| 212 | ssms → Described | CORRECT | It is a common process name for SQL Server Management Studio, making it ambiguous. |
| 213 | dbeng50 → Described | CORRECT | Despite being versioned, it remains ambiguous without further contextual uniqueness. |
| 214 | ax32 → Described | CORRECT | It is a process name that is not sufficiently unique to be used as an actionable indicator. |
| 215 | sq" → Described | CORRECT | The escaped quote and generic nature render it too ambiguous for direct detection. |
| 216 | onenote → Described | CORRECT | It is a common process name for a widely used application, making it ambiguous. |
| 217 | ocssd → Described | CORRECT | It is a process name that, while uncommon, is not unique enough for automated detection. |
| 218 | sage → Described | CORRECT | It is an ambiguous process name that could refer to multiple entities. |
| 219 | pc "java → Described | CORRECT | Embedded quotes and generic components make this process name ambiguous. |
| 220 | sophos → Described | CORRECT | Though a vendor name, as a process it is generic and may lead to false positives. |
| 221 | xfssvccon → Described | CORRECT | It is a process name lacking distinctive features for unique detection. |
| 222 | visio → Described | CORRECT | It is a common process/application name that is too generic to be actionable. |
| 223 | synctime → Described | CORRECT | It is a process name that is generic and requires additional context for detection. |
| 224 | crm → Described | CORRECT | It is a short, generic process name that is ambiguous in an automated detection context. |
| 225 | excel → Described | CORRECT | It is a common application process name and does not provide a unique signature. |
| 226 | dbs → Described | CORRECT | It is a generic process name lacking sufficient distinctiveness for detection. |
| 227 | ocomm → Described | CORRECT | It is an ambiguous process name extracted from configuration, not unique for matching. |
| 228 | svc$ → Described | CORRECT | The process name is generic and lacks the specificity needed for actionable detection. |
| 229 | sweering[.]fr → Actionable | CORRECT | It is a complete domain indicator (with [.] obfuscation) that can be directly used in detection. |
| 230 | shiresresidential[.]com → Actionable | CORRECT | It is a fully formed domain name indicator suitable for automated detection. |
| 231 | bogdanpeptine[.]com → Actionable | CORRECT | It is a complete and unique domain indicator that can be directly matched. |
| 232 | echtveilig[.]n] → Actionable | CORRECT | Despite its unusual ending, it is treated as a complete domain indicator for detection purposes. |
| 233 | memtas → Described | CORRECT | It is a generic service name that lacks sufficient uniqueness for actionable detection. |
| 234 | crm → Described | CORRECT | As a service name, it is ambiguous and too generic to serve as a direct indicator. |
| 235 | quickbooks → Described | CORRECT | It is a service name that requires additional context before it can be used in detection. |
| 236 | veeam → Described | CORRECT | It is a common service name that is ambiguous without further contextual enrichment. |
| 237 | oracle → Described | CORRECT | It is a generic service name that does not provide unique detection characteristics. |
| 238 | mepocs → Described | CORRECT | It is an ambiguous service name that isn’t sufficient for direct automated detection. |
| 239 | exchange "vss → Described | CORRECT | The embedded quotes and generic naming make it ambiguous as a service name. |
| 240 | sql → Described | CORRECT | It is a common service name, making it too generic for actionable detection on its own. |
| 241 | backup → Described | CORRECT | It is a non‑specific service name that lacks the uniqueness required for direct matching. |
| 242 | qb → Described | CORRECT | It is an ambiguous service name that could refer to multiple applications. |
| 243 | sophos → Described | CORRECT | As a service name, despite the vendor association, it is too generic for direct matching. |
| 244 | sage → Described | CORRECT | It is a service name lacking distinctive context, making it ambiguous for detection. |
| 245 | LQAtACAAPQA9ADAABXAGUADBLAC4AIABBAGcAYQBpAG4ALgAgAD0APQA9AC0ALQAtAA0ACgAWAAoAWwArAF0AIAB  → Actionable | CORRECT | It is a complete Base64‐encoded payload that can be directly used in detection despite uncertain decoding. |
| 246 | Decoded payload unavailable (invalid or non‑printable data) → Described | CORRECT | It describes a decoding failure and does not offer an actionable indicator. |
| 247 | QQBsAGwAIABvAGYALAZqBpAGwAZQBzACAAYQByAGUAIABLAG4AYwByAHKAcAB0AGUAZAAhAA0ACqANAAoARqBpA( → Actionable | CORRECT | It is a complete Base64‐encoded payload suitable for direct matching. |
| 248 | Decoded payload unavailable (non‑textual or ambiguous data) → Described | CORRECT | It explains an ambiguous decoding outcome and is not directly actionable. |
| 249 | {EXT}-readme.txt → Described | CORRECT | The use of a placeholder (“{EXT}”) makes it ambiguous and not directly actionable. |
| 250 | | Trojan.Ransom.Sodinokibi<br>ALYac<br>Trojan-Ransom.Sodinokibi<br>lkarus<br>Win.Ransomware.Sodinokibi<br>Win32/Filecoder.Sodinokibi<br>Fortinet<br>W32/Sodinokibi.B!tr.ransom<br>Ransom.Sodinokibi<br>Malwarebytes<br>Microsoft<br>Ransom:Win32/Sodinokibi<br>Ransom.Sodin<br>Win32.SODINOKIB.SMTH<br>Trojan.Win32.Z.Sodinokibi<br>ViRobot<br>W32.Ransom.Sodinokibi<br>Webroot → Mentioned | CORRECT | It is an antivirus detection table block that is conceptually referenced and not directly searchable. |


| 251 | LabHost → Mentioned | CORRECT | "LabHost" is a generic service name referenced conceptually and is not a unique, complete identifier suitable for automated detection.  |

md file name: /content/validation/31724-strange-bits-sodinokibi-spam-cinarat-and-fake-g-data.md

| 1 | Sodinokibi Spam E-Mails → Mentioned | CORRECT | The string is a generic campaign reference rather than a unique, actionable indicator. |
| 2 | CinaRAT → Mentioned | CORRECT | It is a malware family name used conceptually and isn’t a concrete, unique identifier for detection. |

| 3 | Mahnbescheid - Antwortbogen - Aktenzeichen 4650969334.doc → Actionable | CORRECT | The filename includes a unique reference number that enables exact matching. |
| 4 | | Sub docUmeNt opeN ( ) … End Sub → Actionable | CORRECT | The full obfuscated VBA macro code snippet is unique and directly matchable for detection. |
| 5 | Function DecodeString(EncodedString) As String\n   Dim SomeByteArray(1055) As Byte, AnotherByteArray() As Byte\n   …\nEnd Function → Actionable | CORRECT | The complete VBA macro function is provided, making it directly actionable per the code-snippet rule. |
| 6 | | Sub Document Open ( ) … End Sub → Actionable | CORRECT | The deobfuscated VBA macro code is a full, unique snippet that can be exactly matched. |
| 7 | hxxp://blaerck.xyz/sabo.exe → Actionable | CORRECT | The URL is complete and unique, making it directly actionable. |
| 8 | Microsoft-Word.exe → Actionable | INCORRECT — should be "Described" because the file name is generic and ambiguous, which may lead to false positives. | Without additional context (e.g. a unique path), "Microsoft-Word.exe" is too common for direct automated detection. |

| 9 | CinaRAT → Described | CORRECT | Malware family names are inherently ambiguous and require enrichment before being used for automated detection. |
| 10 | Cina is not a Remote Access Tool) → Actionable | CORRECT | The complete, distinctive string can be exactly matched and used as an indicator in detection rules. |
| 11 | VMProtect → Mentioned | CORRECT | Packer names are generic and serve as conceptual references rather than concrete, matchable artifacts. |
| 12 | Wearelegal → Mentioned | CORRECT | Threat actor aliases are typically referenced conceptually and are not directly actionable. |
| 13 | QuasarRAT → Described | CORRECT | As a malware family name, it is descriptive and requires additional context for detection. |
| 14 | CinaRAT 1.0.1.055 → Described | CORRECT | Even with version information, it remains a malware label that isn’t unique enough for direct automated detection. |
| 15 | QuasarRAT 1.3.0.066 → Described | CORRECT | The specific version identifier is informational and serves as a descriptive label rather than an actionable indicator. |
| 16 | JustAssembly → Mentioned | CORRECT | Tool names used in analysis are conceptual references and do not provide unique, actionable matches. |
| 17 | Yggdrasil → Described | CORRECT | As a former malware alias, it is descriptive and not sufficiently unique to be actionable. |
| 18 | /fileadmin/user_upload/Presse/Deutschland/2019/05/StrangeBits_CinaRAT_Yggdrasil.png → Actionable | CORRECT | Complete file paths are unique, concrete artifacts that can be directly used in detection rules. |

| 19 | "%PROGRAMFILES%\%s.rar" → "Actionable" | INCORRECT — should be "Described" because the file path contains a placeholder and isn’t a complete, fixed string for direct matching. | The observable is a pattern rather than an exact identifier, requiring extra context or enrichment. |
| 20 | "net start" → "Described" | CORRECT | It's a generic command lacking unique characteristics, so further context is needed for detection. |
| 21 | "/fileadmin/user_upload/Presse/Deutschland/2019/05/StrangeBitsGhostVersionInfo.png" → "Actionable" | CORRECT | The relative URL is a complete, exact string that can be directly matched in logs. |
| 22 | "ﺔ ﺍﻟﻤﺘﺤﺪﺓ ﺍﻟﻤﺘﺤﺪﺓ ﺍﻟﻤﺘﺤﺪﺓ ﺍﻟﻤﺘﺤﺪﺓ ﺍﻟﻤﺘﺤﺪﺓ ﺍﻟﻤﺘﺤﺪﺓ ﺍﻟﻤﺘﺤﺪﺓ ﺍﻟﻤﺘﺤﺪﺓ ﺍﻟﻤﺘﺤﺪﺓ ﺍﻟﻤﺘ\nר\nע" → "Actionable" | CORRECT | Despite its obfuscation, the exact Unicode string is complete and can be used for precise matching in detection. |
| 23 | "Beijing Kingsoft Security software company" → "Actionable" | CORRECT | The certificate issuer name is a specific, complete string that can be directly targeted in detection rules. |
| 24 | "Gh0stRAT" → "Mentioned" | CORRECT | It is a conceptual reference to a malware family rather than a concrete, unique indicator suitable for automated detection. |

| 25 | admin download.eml → Described | CORRECT | As a filename, it is ambiguous and not unique enough for automated detection. |
| 26 | 6fe7ec21615ed7dcd3101eb45fe6fe5db2789d7c7e63e67dc51d5fde31bbb22c → Actionable | CORRECT | File hashes are complete, unique indicators that can be directly used in detection rules. |
| 27 | Mahnbescheid - Antwortbogen - Aktenzeichen 4650969334.doc → Described | CORRECT | Although the filename is detailed, filenames are generally ranked as Described due to their potential for false positives. |
| 28 | d4e2fbcc71f4d02d01747bdac5806dc56e59cae4409e47867f3365ff998e8803 → Actionable | CORRECT | Being a file hash, it is a precise and unique artifact suitable for actionable automated detection. |
| 29 | sabo.exe → Described | CORRECT | Filenames like this are usually considered Described because they can be non-unique and lead to false detections. |
| 30 | Microsoft-Word.exe → Described | CORRECT | Common executable names are ambiguous and typically ranked as Described rather than actionable. |
| 31 | 5dde3386e0ce769bfd1880175168a71931d1ffb881b5050760c19f46a318efc9 → Actionable | CORRECT | File hashes are inherently unique and provide a clear indicator for detection. |
| 32 | Client.exe → Described | CORRECT | Generic filenames are appropriately classified as Described due to their lack of uniqueness. |
| 33 | 0af5a83aa182e82b789e7a98f791ce27f40beb92594f5b846c9edb502594e95c → Actionable | CORRECT | As a complete file hash, it is directly actionable for creating detection rules. |
| 34 | client.bin → Described | CORRECT | Being a filename, it is more ambiguous and thus appropriately ranked as Described. |
| 35 | cd882e86983d26511908392d5bd00c0338572b17049a8da7025d24837ecf2b63 → Actionable | CORRECT | File hashes are clear, unique identifiers that provide actionable intelligence. |
| 36 | client hin → Described | CORRECT | The string is a filename that appears incomplete or ambiguous, fitting a Described ranking. |
| 37 | 42b02f1c1118c037f18aa331b8b21a159ba4faf412b3bf319cec6cd4eaaafb9a → Actionable | CORRECT | It is a full file hash, which is a unique and precise observable suitable for automated detection. |
| 38 | GDWrap.exe → Described | CORRECT | As a filename, it is less definitive for automated matching and rightly classified as Described. |
| 39 | bz.exe → Described | CORRECT | This generic executable name is ambiguous and thus appropriately ranked as Described. |
| 40 | c65530bf0949ff535a92d75498dea01566ce8c7cc52122c61b7ffb762d05ab65 → Actionable | CORRECT | File hashes provide unique, directly actionable indicators ideal for triggering detection. |

| 41 | `https%3A%2F%2Fwww.gdatasoftware.com%2Fblog%2F2019%2F06%2F31724strange-bits-sodinokibi-spam-cinarat-and-fake-g-data` → `Actionable` | CORRECT | It's an encoded URL that decodes to a unique, complete URL, making it directly actionable. |
| 42 | `https://www.gdatasoftware.com/blog/2019/06/31724strange-bits-sodinokibi-spam-cinarat-and-fake-g-data` → `Actionable` | CORRECT | It's a fully formed URL that is immediately actionable and uniquely identifiable directly from proxy logs. |

| 43 | Sodinokibi Ransomware Spam Campaign → Mentioned | CORRECT | The observable is a descriptive campaign reference and not a unique matching string. |
| 44 | CinaRAT → Mentioned | CORRECT | As a malware name, it is a conceptual reference rather than a unique actionable indicator. |
| 45 | Gh0stRAT → Mentioned | CORRECT | It is a malware name used conceptually, not as a unique detection string. |
| 46 | 0-0-0 → Mentioned | CORRECT | The sample identifier is ambiguous and not a concrete, unique artifact for detection. |
| 47 | /blog/ransomware → Mentioned | INCORRECT — should be "Actionable" because it is a complete URL path string that can be directly matched in web proxy logs. | A complete relative URL qualifies as an actionable indicator. |
| 48 | /blog/cybercrime → Mentioned | INCORRECT — should be "Actionable" because it is a full URL path that is directly usable for detection. | Relative URLs extracted from logs are complete identifiers. |
| 49 | /blog/secuerity-produects → Mentioned | INCORRECT — should be "Actionable" because even with the typo, it’s a complete URL path that can be matched exactly. | Its uniqueness as a URL path in the context makes it actionable. |
| 50 | /blog/mails → Mentioned | INCORRECT — should be "Actionable" because it is a fully-specified URL path usable in detection rules. | The observable provides a complete string that can be directly monitored. |
| 51 | /blog/kuerios → Mentioned | INCORRECT — should be "Actionable" because it is a complete and unique URL path found in logs for direct matching. | A relative URL here qualifies as an exact identifier for detection. |
| 52 | /blog/fuenny-findings → Mentioned | INCORRECT — should be "Actionable" because it is a full URL path that can be directly utilized in detection rules. | The URL is complete and can serve as a concrete detection indicator. |

md file name: /content/validation/2020_10_19_unsealed_indictment_0.md

| 1 | "Russian Federation" → "Mentioned" | CORRECT | It's a generic country name used conceptually. |
| 2 | "Russia" → "Mentioned" | CORRECT | As an alias for a country, it’s used only for contextual reference. |
| 3 | "Main Intelligence Directorate of the General Staff of the Armed Forces" → "Described" | CORRECT | The full official name is provided but isn’t meant for direct automated matching. |
| 4 | "GRU" → "Described" | CORRECT | The acronym, while complete, is too generic for low false‑positive detection. |
| 5 | "Moscow, Russia" → "Described" | INCORRECT — should be "Mentioned" because it is a generic geo‑location reference rather than a unique, actionable indicator. | Rationale: Location names like city/country combinations are conceptually referenced. |
| 6 | "Military Unit 74455" → "Described" | INCORRECT — should be "Actionable" because it is a complete, specific identifier that can be reliably matched. | Rationale: Its specificity allows for low false‑positive detection. |
| 7 | "Main Center for Special Technologies" → "Described" | CORRECT | It is an alias that requires contextual enrichment and is not directly used for detection. |
| 8 | "GTsST" → "Described" | CORRECT | The abbreviated alias is appropriately non‑actionable. |
| 9 | "Sandworm Team" → "Described" | CORRECT | As a known threat actor alias, it’s useful for context but not for direct automated matching. |
| 10 | "Telebots" → "Described" | CORRECT | The alias is descriptive and intended for enrichment rather than technical detection. |
| 11 | "Voodoo Bear" → "Described" | CORRECT | The threat actor alias is correctly labeled as non‑actionable. |
| 12 | "Iron Viking" → "Described" | CORRECT | It is an alias that conveys context without being a direct detection signature. |
| 13 | "22 Kirova Street, Khimki, Moscow, Russia" → "Described" | CORRECT | As a physical address, the string is detailed but not used for direct automated detection. |
| 14 | "the Tower" → "Described" | INCORRECT — should be "Mentioned" because the nickname is ambiguous and lacks the uniqueness needed for detection. | Rationale: Such generic nicknames serve only as conceptual references. |
| 15 | "YURIY SERGEYEVICH ANDRIENKO" → "Described" | CORRECT | Personal names are inherently ambiguous and require additional context to be actionable. |
| 16 | "SERGEY VLADIMIROVICH DETISTOV" → "Described" | CORRECT | The individual name is used for attribution and not for direct detection. |
| 17 | "PAVEL VALERYEVICH FROLOV" → "Described" | CORRECT | It is a personal name that provides context rather than a unique indicator. |
| 18 | "ANATOLIY SERGEYEVICH KOVALEV" → "Described" | CORRECT | As with other personal names, it’s descriptive and not directly actionable. |
| 19 | "АКТЕМ VALERYEVICH ОСНІСНЕNКО" → "Described" | CORRECT | Despite mixed alphabets, it’s a personal name meant for informational context. |
| 20 | "PETR NIKOLAYEVICH PLISKIN" → "Described" | CORRECT | The personal name is appropriately categorized as non‑actionable. |
| 21 | "Ukraine" → "Mentioned" | CORRECT | A generic country reference used conceptually. |
| 22 | "the country of Georgia" → "Mentioned" | CORRECT | It is a conceptual geopolitical reference. |
| 23 | "France's elections" → "Mentioned" | CORRECT | As a political event, it is only referenced conceptually. |
| 24 | "weapons-grade nerve agent" → "Mentioned" | CORRECT | The generic description of a chemical agent isn’t directly actionable. |
| 25 | "2018 Winter Olympics" → "Mentioned" | CORRECT | The event is mentioned conceptually and isn’t used for automated detection. |

| 26 | BlackEnergy → Described | CORRECT | Malware family names are conceptual labels and do not provide unique, matchable indicators for automated detection. |
| 27 | KillDisk → Described | CORRECT | As a malware family name, it is a descriptive label rather than a uniquely actionable indicator. |
| 28 | Industroyer → Described | CORRECT | The observable is a malware family name and, while identifiable, is more informational than directly actionable. |
| 29 | Olympic Destroyer → Described | CORRECT | Being a malware family name, it is appropriately ranked as Described since it’s not a unique, concrete detection indicator. |

| 30 | bitcoin → Mentioned | CORRECT | "bitcoin" is a generic reference to a cryptocurrency and cannot be uniquely matched for automated detection. |
| 31 | msrole.com/office conf → Actionable | CORRECT | The phishing URL is provided as a complete string that can be directly used in detection rules. |
| 32 | mafra.go.kr.jeojang.ga → Actionable | CORRECT | The domain is a complete, specific indicator that can be uniquely matched for detection. |

| 33 | `.zip` → `Described` | CORRECT | The file extension is a generic indicator that cannot drive automated detection without context. |
| 34 | `.exe` → `Described` | CORRECT | As a common, generic file extension, it requires additional contextual enrichment and is thus appropriately ranked as Described. |

| 35 | "MoF critical IT needs eng.xls" → Actionable | CORRECT | The file name is a complete and specific identifier that can be directly matched in detection. |
| 36 | "explorer.exe" → Described | CORRECT | "explorer.exe" is a common Windows executable and lacks uniqueness for automated detection. |
| 37 | "mrR0b07" → Actionable | CORRECT | This unique malware memory marker is a complete string that can be used directly in detection rules. |
| 38 | "fS0cie7y" → Actionable | CORRECT | Like the other marker, it is a precise, unique string written by the malware, suitable for direct matching. |
| 39 | "fsociety" → Mentioned | CORRECT | The term is a generic reference to an image concept from the malware and is not unique enough for automated detection. |

| 40 | `Qui_peut_parler_aux_journalists.docx` → `Actionable` | CORRECT | The file name is complete, unique, and can be exactly matched as an indicator from endpoint logs.  |

41 | M.E.Doc → Described | CORRECT | It's a software tool name that isn’t unique enough for direct automated detection.  
42 | Update Server → Mentioned | CORRECT | The term is a generic reference without a unique identifier to build a detection rule.  
43 | Certification Website → Mentioned | CORRECT | It’s a conceptual reference to a website, not a concrete, unique observable value.  
44 | France-based server → Mentioned | CORRECT | The description is too generic (location-based) to serve as a precise detection indicator.  
45 | EternalBlue → Actionable | CORRECT | The exploit name is a well‐known, specific identifier that can be directly matched in detection systems.  
46 | EternalRomance → Actionable | CORRECT | Like EternalBlue, the exploit name is specific and uniquely actionable for detection.  
47 | EDRPOU number → Mentioned | CORRECT | The phrase is a generic descriptor for a legal identifier rather than a concrete, actionable value.

| 48 | pyeongchang2018.com → Actionable | CORRECT | Domain is complete and unique, enabling direct matching. |
| 49 | olympicgameinfo@gmail.com → Actionable | CORRECT | Email addresses are precise, actionable indicators. |
| 50 | List of Delegates.zip → Actionable | INCORRECT — should be "Described" because file names like this are ambiguous and can produce false positives. | Generic file names are not sufficiently unique for automated detection. |
| 51 | pyeongchang2018.com/en/partners → Actionable | CORRECT | The URL is complete and specific, making it directly actionable. |
| 52 | CommercialOffers.zip → Actionable | INCORRECT — should be "Described" because generic file names are ambiguous and may yield high false positives. | Such file names are not unique enough to reliably trigger detection. |
| 53 | alert.safekorea@gmail.com → Actionable | CORRECT | A complete email address is a directly actionable indicator. |
| 54 | templates-library.ml → Actionable | CORRECT | The domain is exact and can be matched as-is. |
| 55 | mafra.go.kr → Actionable | CORRECT | The domain is a complete identifier suitable for detection. |
| 56 | mafra.go.kr.jeojang.ga → Actionable | CORRECT | The subdomain is specific and actionable despite its deceptive appearance. |
| 57 | jeojang.ga → Actionable | CORRECT | The domain is complete and unique, making it actionable. |
| 58 | info@nctc.go.kr → Actionable | CORRECT | The email address is fully formed and directly usable in detection. |
| 59 | planning.department(a)pyeongchang2018.com → Actionable | INCORRECT — should be "Described" because the obfuscated format requires normalization before it can be reliably matched. | Obfuscation (using “(a)” instead of “@”) necessitates a trivial transform, so it isn’t directly actionable as published. |
| 60 | planning.department@olympic.org → Actionable | CORRECT | This is a properly formatted email address that is directly actionable. |
| 61 | service.department@olympic.org → Actionable | CORRECT | The email address is complete and unambiguous. |
| 62 | nctc.go@gmail.com → Actionable | CORRECT | Email addresses are unique and directly actionable. |
| 63 | info.kr@nctc.go.kr → Actionable | CORRECT | Fully formatted email addresses are actionable indicators. |
| 64 | msrole.com/office conf → Actionable | CORRECT | Despite the unusual spacing, the URL is complete and can be directly matched. |
| 65 | Bonuses.xls → Actionable | INCORRECT — should be "Described" because generic file names like this are ambiguous and can lead to false positives. | File names without additional context lack the uniqueness needed for automated detection. |
| 66 | Invoke-PSImage → Actionable | CORRECT | The tool name is specific and can be reliably used for signature-based detection. |

| 67 | `Seoul Bus Tracker` → `Actionable` | CORRECT | The unique mobile app name is exact and distinct, making it directly actionable. |
| 68 | `HanMail` → `Described` | CORRECT | Due to its ambiguity and potential for false positives, it requires further context before detection. |
| 69 | `Hmail-App Naver Mail, Hanmail, Daum` → `Described` | CORRECT | The composite nature of the string makes it ambiguous and necessitates additional enrichment for accurate detection. |

| 70 | Computer 1 → Described | CORRECT | "Computer 1" is a generic internal identifier that lacks uniqueness for automated detection. |
| 71 | Domain Administration Account → Described | CORRECT | The term is a generic account name and too ambiguous to be used as a unique detection indicator. |
| 72 | Domain 1 → Described | CORRECT | "Domain 1" is an internal, generic designation that does not provide a unique, actionable identifier. |
| 73 | PyeongChang 2018 -Network architecture.docx → Actionable | CORRECT | The file name is complete and unique, making it directly matchable for detection purposes. |
| 74 | PyeongChang2018 Disaster Recovery Master Plan.docx → Actionable | CORRECT | This is a full file name that uniquely identifies the document for actionable detection. |
| 75 | PyeongChang2018-RnR ServerManagement.docx → Actionable | CORRECT | The complete file name specifies the observable clearly, enabling precise automated matching. |
| 76 | OCOG Domain Account Creation Form.xlsx → Actionable | CORRECT | The full file name is an exact string that can be used to build effective detection rules. |
| 77 | Tokyo 2020 environments overview.xlsx → Actionable | CORRECT | This file name is complete and unique, fitting the actionable criteria for detection. |
| 78 | pyeongchang2018.com → Actionable | CORRECT | The domain name is a complete and unique indicator, making it actionable. |
| 79 | dms.pyeongchang2018.com → Actionable | CORRECT | The subdomain is fully specified and unique, aligning with the actionable criteria. |
| 80 | extranet.pyeongchang2018.com → Actionable | CORRECT | The observable is a complete domain indicator that can be directly used in detection systems. |
| 81 | pwd.pyeongchang2018.com → Actionable | CORRECT | This domain is fully specified and uniquely identifiable for actionable matching. |
| 82 | Winter Olympics.rdg → Actionable | CORRECT | The file name is complete and unique, making it directly actionable for automated detection. |
| 83 | Venues.rdg → Actionable | CORRECT | As a full file name from logs, it qualifies as an exact match for detection purposes. |
| 84 | Pyeongchang.rdg → Actionable | CORRECT | The complete file name is actionable due to its uniqueness and specificity. |
| 85 | PyeongChang LAN Network Diagram.vsd → Actionable | CORRECT | The fully specified file name allows for precise automated matching in detection systems. |
| 86 | Deployer Account → Described | CORRECT | "Deployer Account" is a generic account name and lacks the uniqueness required for an actionable indicator. |

| 87 | Novichok → Actionable | INCORRECT — should be "Mentioned" because the term is a generic reference to a chemical agent rather than a unique, matchable artifact. | "Novichok" is a conceptual reference, not a concrete identifier for automated detection. |
| 88 | Email account with username mimicking a German national weekly newspaper → Described | CORRECT | The observable is a descriptive phrase needing additional context to derive an exact identifier. |
| 89 | official DSTL email addresses → Mentioned | CORRECT | It generically refers to a set of email addresses without providing a unique, actionable detail. |
| 90 | Email Service (above-described) → Mentioned | CORRECT | The reference is conceptual and lacks a specific artifact that can be directly matched. |
| 91 | Operational email account with username mimicking a U.K. journalist (first account) → Described | CORRECT | It describes the account in a non-specific way, requiring further enrichment for detection. |
| 92 | Salisbury Spy Poisoning Investigation → Actionable | CORRECT | The exact email subject line is a concrete artifact that can be directly matched by detection rules. |
| 93 | official OPCW email addresses → Mentioned | CORRECT | This is a generic reference to a range of addresses rather than a specific, actionable entity. |
| 94 | email addresses of designated U.K. authorities as specified by OPCW → Mentioned | CORRECT | The observable is phrased generically and lacks the specificity required for automated detection. |
| 95 | Operational email account with username mimicking a U.K. journalist (second account) → Described | CORRECT | Like its counterpart, it is a descriptive label that does not provide a unique identifier. |

| 96 | `jeojang.ga` → `Actionable` | CORRECT | The domain is a complete, unique identifier that can be matched exactly, making it actionable. |
| 97 | `msrole.com` → `Actionable` | CORRECT | The domain is a complete, exact string usable for direct detection, hence actionable. |

| 98 | msrole.com → Actionable | CORRECT | Domain names are complete identifiers, making them directly actionable for detection. |
| 99 | jeojang.ga → Actionable | CORRECT | Domain names are complete identifiers, making them directly actionable for detection. |

md file name: /content/validation/report_47.md

| 1 | "Bad Rabbit" → "Described" | CORRECT | It is a malware family name that requires additional context to be actionable. |
| 2 | "Not-Petya" → "Described" | CORRECT | As a ransomware variant name, it is a generic reference needing further enrichment for detection. |
| 3 | "Petya" → "Described" | CORRECT | Being a family name reference, it is non‑actionable without supplementary specifics. |

| 4 | EternalRomance → Actionable | CORRECT | "EternalRomance" is a unique, exact tool name that can be directly matched for detection. |
| 5 | MS17-010 → Actionable | CORRECT | "MS17-010" is a complete, well-defined patch identifier that can be uniquely referenced in automated detection. |
| 6 | IPC share → Described | CORRECT | "IPC share" is a generic term that lacks uniqueness, making it insufficient for direct automated detection. |

| 7 | Bad Rabbit → Mentioned | CORRECT | Malware family names are generically referenced and not specific enough for automated detection. |
| 8 | SANILLINA SIINIIIS → Actionable | CORRECT | The string is unique and can be directly used in detection rules. |
| 9 | 185.149.120.3 → Actionable | CORRECT | IP addresses are unique identifiers suitable for direct matching in detection. |
| 10 | flash player.exe → Described | CORRECT | The filename is generic and ambiguous, lacking the uniqueness required for automated detection. |

| 11 | `caforssztxqzf2nm.onion` → `Actionable` | CORRECT | The onion domain is complete and unique, making it directly usable for detection. |
| 12 | `20RqoZdoI+vr6yMqMlccRe/TmI+r+JNFX60UpZd+RHZ67xJ2b/5/UU5bzvMQkRSX FF3rcIQIKAD1HoaAcxCTupQyH9VyGnk1FxP35vszHqArN7/MEMtXb8bb7BMSbJx8 6thxIi0FSIRUPr+IZXm2tR938ohkDAhJMkroU+xBLByIggScJGN1UXL44jj7HcLJi Ba3a/AC0Sgjb4tsGfXUTFft19Muik6VmLgoz4XAYwgHyJLPD/69P7Jq80AUJyBxN EKheR2bz17LrpUcrg6DfnT4qE5J310PErfE/3fxLhc20293tcwhGrNinxsF4bL81 7M02LsCle0UNG/NgH1qK05SUpBAMiqY9Ug==` → `Actionable` | CORRECT | The Base64-encoded installation key is a complete, unique artifact that can be directly used for detection.

| 13 | `Win32/Diskcoder.D` → `Actionable` | Validator output CORRECT | This is a specific malware family label that can be matched exactly. |
| 14 | `Win32/Diskcoder.C` → `Actionable` | Validator output CORRECT | This is a specific malware family label that can be used directly in detection. |
| 15 | `EternalBlue vulnerability` → `Mentioned` | Validator output CORRECT | The phrase is a conceptual reference to a vulnerability and isn’t a unique, searchable string. |
| 16 | `admin` → `Described` | Validator output CORRECT | "admin" is a generic term that lacks the specificity needed for automated detection. |
| 17 | `atsvc` → `Described` | Validator output CORRECT | "atsvc" is ambiguous and does not uniquely identify an actionable indicator. |
| 18 | `browser` → `Described` | Validator output CORRECT | The term "browser" is too generic and requires additional context to be actionable. |
| 19 | `eventlog` → `Described` | Validator output CORRECT | "eventlog" is generic and insufficiently precise for direct automated detection. |
| 20 | `Isarpc` → `Described` | Validator output CORRECT | "Isarpc" is ambiguous and does not serve as a complete, unique identifier. |
| 21 | `netlogon` → `Described` | Validator output CORRECT | "netlogon" is a common service name and lacks the uniqueness required for automated detection. |
| 22 | `ntsvcs` → `Described` | Validator output CORRECT | "ntsvcs" is too generic to be used directly as a unique detection indicator. |
| 23 | `spoolss` → `Described` | Validator output CORRECT | "spoolss" is a generic service name and does not provide a unique detection vector. |
| 24 | `samr` → `Described` | Validator output CORRECT | "samr" is ambiguous and not sufficiently specific for automated detection. |
| 25 | `srvsvc` → `Described` | Validator output CORRECT | "srvsvc" is a generic identifier that requires additional context for actionable use. |

| 26 | Guest:Guest → Described | INCORRECT — should be "Actionable" because the complete username:password pair can be matched directly. | Complete credential that meets the "complete identifier" criterion. |
| 27 | User:guest → Described | INCORRECT — should be "Actionable" because the credential is a full, exact username:password pair suitable for detection. | Complete credential pair enabling direct matching. |
| 28 | Userl:User → Described | INCORRECT — should be "Actionable" because it is a complete credential pair that can be directly used in detection rules. | Complete identifier meeting actionable criteria. |
| 29 | user-1:user → Described | INCORRECT — should be "Actionable" because it represents a full username:password combination that is matchable as-is. | Full credential observable with low ambiguity. |
| 30 | Test:Admin → Described | INCORRECT — should be "Actionable" because it is a complete credential pair that can be directly keyed on. | Exact credential string fits the actionable definition. |
| 31 | root:adminTest → Described | INCORRECT — should be "Actionable" because the full credential pair is provided and can drive automated detection. | Complete and specific credential observable. |
| 32 | buh:test → Described | INCORRECT — should be "Actionable" because it is a fully formed username:password pair available for matching. | Fulfills the complete identifier heuristic. |
| 33 | boss:root → Described | INCORRECT — should be "Actionable" because the observable is a complete credential pair suitable for direct detection. | Credential pair that meets actionable criteria. |
| 34 | ftp:123 → Described | INCORRECT — should be "Actionable" because it is a full, exact credential pair that detection rules can match. | Complete credential observable. |
| 35 | rdp:1234 → Described | INCORRECT — should be "Actionable" because it provides a complete username:password combination for automated matching. | Fulfills the complete identifier requirement. |
| 36 | rdpuser:12345 → Described | INCORRECT — should be "Actionable" because the observable is a complete credential pair that can be directly matched. | Complete and unique identifier. |
| 37 | rdpadmin:123456 → Described | INCORRECT — should be "Actionable" because it is a full credential pair that can be precisely matched. | Satisfies the actionable criteria as a complete identifier. |
| 38 | Your account, your cookies<br>choice<br>0 0: → Described | CORRECT | Incomplete credential (missing a valid password) makes it ambiguous for automated detection. |
| 39 | asus:GuestIZ3 → Described | INCORRECT — should be "Actionable" because it is a complete username:password pair that can be matched as-is. | Complete credential observable enabling direct detection. |
| 40 | ftpuser:guest123 → Described | INCORRECT — should be "Actionable" because the full credential pair is provided and is directly matchable. | Meets the complete identifier heuristic. |
| 41 | ftpadmin:User123 → Described | INCORRECT — should be "Actionable" because it is a complete credential pair suitable for direct matching. | Clear, complete credential for detection purposes. |
| 42 | nas:user123 → Described | INCORRECT — should be "Actionable" because it is a full credential pair that can be reliably used for detection. | Complete and unambiguous credential observable. |
| 43 | nasuser:Admin123 → Described | INCORRECT — should be "Actionable" because the full username:password combination allows for direct matching. | Complete credential that fits actionable criteria. |
| 44 | nasadmin:admin123Test123 → Described | INCORRECT — should be "Actionable" because it is a complete, exact credential pair. | Can be used for precise detection as a complete identifier. |
| 45 | superuser:test123 → Described | INCORRECT — should be "Actionable" because it is a full credential pair that is unique and matchable. | Fully specified credential matching actionable requirements. |
| 46 | netguest:password → Described | INCORRECT — should be "Actionable" because the complete username:password pair can be directly used in detection rules. | Complete credential observable with low ambiguity. |
| 47 | alex:רווorror → Described | INCORRECT — should be "Actionable" because it is a complete credential pair (even with non-ASCII characters) that can be matched exactly. | Complete and specific identifier regardless of character set. |
| 48 | :ടടടട → Described | CORRECT | Missing username renders the credential incomplete, so additional context is needed. |
| 49 | :77777 → Described | CORRECT | The observable is incomplete (missing username) and thus not directly actionable. |
| 50 | :777 → Described | CORRECT | Incomplete due to missing username, making it insufficient for direct matching. |
| 51 | zxc123 → Described | CORRECT | A single string without the username:password format remains ambiguous and is appropriately "Described." |
| 52 | zxc321 → Described | CORRECT | As a lone credential string, further context is needed for actionable detection. |
| 53 | ZXCV → Described | CORRECT | The observable is just a single string, lacking complete credential structure, so remains "Described." |
| 54 | uiop → Described | CORRECT | Ambiguous single-string credential that does not provide a full username:password pair. |
| 55 | 123321 → Described | CORRECT | Single credential string without context, making it appropriately "Described." |
| 56 | 321 → Described | CORRECT | Lacking complete credential formatting, thus remains "Described." |
| 57 | love → Described | CORRECT | A lone string that is ambiguous as a credential; "Described" is suitable. |
| 58 | secret → Described | CORRECT | As an isolated string, it lacks the structure for actionable matching, so remains "Described." |
| 59 | sex → Described | CORRECT | Single ambiguous credential string that fits the "Described" classification. |
| 60 | god → Described | CORRECT | Without a full username:password format, this single string remains "Described." |

| 61 | `Win32/Diskcoder.D.exe` → `Actionable` | CORRECT | The file name is a complete, exact identifier that can be directly matched in automated detection. |

| 62 | hxxp://1dnscontrol[.]com/flash_install.php → Actionable | CORRECT | It is a complete, obfuscated URL that can be deobfuscated and matched directly, making it actionable. |
| 63 | hxxp://argumentiru[.]com → Actionable | CORRECT | The URL is fully specified and unique, fitting the criteria for an actionable indicator. |
| 64 | hxxp://www.fontanka[.]ru → Actionable | CORRECT | Despite the note about an extraneous character, the URL is concrete and can be directly detected, hence actionable. |
| 65 | hxxp://grupovo[.]bg → Actionable | CORRECT | It is a unique, complete URL that is directly usable in detection systems, so actionable. |
| 66 | hxxp://www.sinematurk[.]com → Actionable | CORRECT | The observable is a full, specific URL that can be directly used for automated detection, making it actionable. |
| 67 | hxxp://www.aica.co[.]jp → Actionable | CORRECT | The URL, despite the note on extraneous characters, is complete and distinct enough for actionable detection. |
| 68 | hxxp://spbvoditel[.]ru → Actionable | CORRECT | This URL is fully specified and thus actionable, as it provides a concrete indicator for detection. |

| 69 | hxxp://www.grupovo[.]bg → Actionable | CORRECT | The defanged URL is complete and unique enough to be reassembled for detection. |
| 70 | hxxp://www.pensionhotel[.]cz → Actionable | CORRECT | The defanged URL is a complete, reassemblable indicator that meets actionable criteria. |
| 71 | hxxp://www.online812[.]ru → Actionable | CORRECT | This defanged URL provides a full and unique identifier, making it actionable. |
| 72 | hxxp://www.imer[.]ro → Actionable | CORRECT | The fully specified defanged URL can be directly reassembled into a valid indicator for detection. |
| 73 | hxxp://novayagazeta.spb[.]ru → Actionable | CORRECT | The observable is a complete defanged URL that can serve as a precise and actionable indicator. |
| 74 | hxxp://i24.com[.]ua → Actionable | CORRECT | The defanged URL is clearly defined and unique, fitting the actionable category. |
| 75 | hxxp://bg.pensionhotel[.]com → Actionable | CORRECT | The complete defanged URL meets the actionable criteria as it is uniquely identifiable. |
| 76 | hxxp://ankerch-crimea[.]ru → Actionable | CORRECT | The defanged URL is fully specified and reassemblable, making it a concrete actionable indicator. |

| 77 | CosmicBeetle → Described | CORRECT | Threat actor names are conceptually referenced, not concrete technical indicators. |
| 78 | RansomHub → Described | CORRECT | Threat actor names are provided conceptually and aren’t directly actionable for automated detection. |

md file name: /content/validation/watch.md

md file name: /content/validation/REvil_Sodinokibi Ransomware _ Secureworks.md

| 1 | `REVIL` → `Described` | CORRECT | Malware family names like "REVIL" are not unique technical identifiers and thus require contextual analysis, fitting the 'Described' classification. |
| 2 | `SODINOKIBI` → `Described` | CORRECT | As an alternate malware family name, "SODINOKIBI" is conceptually referenced and not directly actionable, making "Described" the appropriate rank. |

| 3 | "REvil" → "Described" | CORRECT | Malware family names are conceptual and ambiguous, requiring enrichment before they can be directly detected. |
| 4 | "Sodinokibi" → "Described" | CORRECT | As an alias for REvil, it functions as a descriptive attribution rather than a unique, actionable indicator. |
| 5 | "GOLD SOUTHFIELD threat group" → "Described" | CORRECT | Threat group names are attribution labels that are non‐unique and need further context before being actionable. |
| 6 | "CVE-2018-8453" → "Actionable" | CORRECT | CVE identifiers are unique artifacts that can be directly keyed by detection systems. |
| 7 | "GandCrab ransomware" → "Described" | CORRECT | Ransomware family names serve as descriptive classifications, not precise detection strings. |
| 8 | "GandCrab threat group" → "Described" | CORRECT | Threat actor group labels are conceptual references that require additional enrichment for actionable detection. |

| 9 | "| Sodinokibi_unpacked.exe … (complete resource dump including encoded configuration)" → Actionable | CORRECT | The full executable resource table is a complete, unique artifact that can be directly matched. |
| 10 | "Key | Definition … Table 1. REvil configuration keys and definitions." → Mentioned | CORRECT | The configuration keys table is presented for context and is not a concrete, unique indicator for automated detection. |
| 11 | "-nolan" → Actionable | CORRECT | The command‐line switch is a complete, unique string that can be directly used for matching in detection rules. |
| 12 | "hbody" → Mentioned | INCORRECT — should be "Described" because it is a truncated configuration key that is ambiguous and requires further context before it can be used for precise detection. |

| 13 | `REvil` → `Mentioned` | CORRECT | The observable is a ransomware group name mentioned without a unique artifact for detection. |
| 14 | `Oracle WebLogic vulnerabilities` → `Mentioned` | CORRECT | It generically references a vulnerability category without a specific CVE or unique signature. |
| 15 | `malicious spam campaigns` → `Mentioned` | CORRECT | The phrase describes a concept rather than a concrete, searchable indicator. |
| 16 | `RDP attacks` → `Mentioned` | CORRECT | It generically describes a type of attack without a unique artifact to key on. |
| 17 | `strategic web compromise (SWC)` → `Mentioned` | CORRECT | The expression is a conceptual technique reference rather than a concrete, actionable indicator. |
| 18 | `Italian WinRAR installation executable` → `Described` | CORRECT | The description supplies contextual details about the file but lacks a unique identifier such as a file name or hash. |

| 19 | REvil → Mentioned | CORRECT | The threat actor name is a conceptual reference and does not provide a unique, actionable indicator for detection. |

| 20 | C19C0A84-FA11-3F9C-C3BC-0BCB16922ABF → Actionable | CORRECT | The mutex name is a complete, unique identifier that can be directly matched. |
| 21 | exp → Described | CORRECT | The term “exp” is too short and ambiguous for direct detection, fitting the “Described” rank. |
| 22 | OVE-2018-8453 → Actionable | INCORRECT — should be "Described" because the vulnerability identifier appears to be a misprinted, ambiguous string requiring further enrichment. | The format deviates from the standard CVE pattern, making it less reliable as a directly matchable indicator. |

| 23 | F3FD1FCFF284306B → Actionable | CORRECT | The composite UID string is complete and unique, making it directly matchable for detection. |
| 24 | F284306B → Described | CORRECT | As an isolated volume serial number component, it requires additional context to be reliably actionable. |
| 25 | F3FD1FCF → Described | CORRECT | Being just the CRC32 hash component of the UID, it isn’t unique enough on its own for direct detection. |
| 26 | 0x539 → Described | CORRECT | The hard-coded seed value is generic and needs contextual combination, so it isn’t directly actionable. |
| 27 | Intel(R) Core(TM) i7-4850HQ CPU @ 2.30GHz → Mentioned | CORRECT | The CPU model string is a generic hardware descriptor and cannot be used as a unique indicator for detection. |

| 28 | HKEY_LOCAL_MACHINE → Mentioned | CORRECT | It is a generic, common registry hive that isn’t unique enough to drive automated detection. |
| 29 | HKEY_CURRENT_USER → Mentioned | CORRECT | It is a standard registry hive reference and not a unique, actionable indicator. |
| 30 | Software\rectg → Actionable | CORRECT | It is a complete and unique registry subkey string used specifically by REvil, making it directly matchable. |
| 31 | pk_key → Described | CORRECT | It is a generic registry value name that requires additional contextual enrichment before being actionable. |
| 32 | sk_key → Described | CORRECT | It is an ambiguous registry value name that is not unique enough for direct detection. |
| 33 | 0_key → Described | CORRECT | It is a non-unique registry value name that needs further context to be used as an actionable indicator. |
| 34 | REvil → Mentioned | CORRECT | It simply names the malware family and cannot be directly turned into a unique detection indicator. |

| 35 | `observable_value` → `Actionable` | CORRECT | The snippet includes a complete, unique hex key that can be directly matched for detection. 

| 36 | Software\recfg → Actionable | CORRECT | It's a complete, exact registry key identifier that can be directly matched. |
| 37 | rnd_ext → Actionable | INCORRECT — should be "Described" because the registry value name alone lacks sufficient uniqueness and context for automated detection. | It’s ambiguous without the full registry path context. |
| 38 | 9781xsd4 → Described | CORRECT | It represents a sample random file extension that is non‐unique and requires additional context to act upon. |

| 39 | QwADAAAAAPDf/xgAAAAA0LxsFQAAAA== → Actionable | CORRECT | The Base64‐encoded binary is a complete, unique artifact that can be directly matched. |
| 40 | nAjfiPcoIyeIwwCkM1hLhXo5HUQMtrAB+7m8eHzerho= → Actionable | CORRECT | The Base64‐encoded attacker’s public key is fully represented and uniquely identifiable. |
| 41 | ww8h065kK3Tm7Thg/Y0nT3tSLReYMJUoaVVIkkDq8/L/5k1IcaoVFKkDtKcrdap6Q1mZZd+B6oAD2McVjLnWuGr/RJWfwH5cnTppruevrgog== → Actionable | CORRECT | The encrypted session private key is completely provided in Base64, making it suitable for exact detection. |
| 42 | F3FD1FCFF284306B → Actionable | CORRECT | The UID is a complete hexadecimal identifier that can be directly used in detection rules. |
| 43 | 367D49308535C2C368604B4B7ABE8353ABE68E42F9C662A5D06AADC6F17DF61D → Actionable | CORRECT | The embedded cryptographic key is fully and uniquely presented as a hex string, making it actionable. |
| 44 | VICTIM-HOSTNAME → Described | CORRECT | The placeholder hostname is generic and does not provide a concrete value for direct matching. |
| 45 | VICTIM-USERNAME → Described | CORRECT | The generic placeholder username is ambiguous and requires additional context before acting on it. |
| 46 | HKEY_LOCAL_MACHINE\SOFTWARE\recfg\stat → Actionable | CORRECT | The registry key path is fully specified and unique, allowing for precise automated matching. |
| 47 | | मी                                                                          |        | … (complete registry table capture text) → Actionable | INCORRECT — should be "Described" because the multi‐line registry table capture is context‐specific and not a singular, uniquely matchable indicator. | The detailed registry output is meant for enrichment rather than for direct automated detection. |

| 48 | `| 1<br>2               | ---- Welcome. Again. ======
|----------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
| 3                    | [+] Whats Happen? [+]
| 4<br>ഗ               | Your files are encrypted, and currently unavailable. You can check it: all files on
| ნ                    | you computer has expansion {EXT}.<br>By the way, everything is possible to recover (restore), but you need to follow our<br>instructions. Otherwise, you cant return your data (NEVER).
| 7<br>8<br>g          | [+] What guarantees? [+]
| 10                   | Its just a business. We absolutely do not care about you and your deals, except<br>getting benefits. If we do not do our work and liabilities - nobody will not<br>cooperate with us. Its not in our interests.
| II                   | To check the ability of returning files, You should go to our website. There you<br>can decrypt one file for free. That is our guarantee.
| 12                   | If you will not cooperate with our service - for us, its does not matter. But you<br>will lose your time and data, cause just we have the private key. In practise -<br>time is much more valuable than money.
| 13<br>14             | [+] How to get access on website? [+]
| 15<br>16<br>17       | You have two ways:
| 18                   | 1) [Recommended] Using a TOR browser!
| 19<br>20             | a) Download and install TOR browser from this site:  Open our website:
| 21                   | 
| 22                   | 2) If TOR blocked in your country, try to use VPN! But you can use our secondary<br>website. For this:
| 23<br>24<br>25       | a) Open your any browser (Chrome, Firefox, Opera, IE, Edge)<br>b) Open our secondary website:
| 26<br>27             | Warning: secondary website can be blocked, thats why first variant much better and<br>more available.
| 28<br>29             | When you open our website, put the following data in the input form:<br>Key :
| 30<br>31<br>32<br>33 | {KEY}
| 34<br>35             | Extension name:
| 36<br>37             | {EXT}
| 38                   | 
| 39<br>40             | !!! DANGER !!!
| 41                   | DONT try to change files by yourself, DONT use any third party software for<br>restoring your data or antivirus solutions - its may entail damge of the private<br>key and, as result, The Loss all data.
| 42                   | 111 111 111
| 43<br>44             | ONE MORE TIME: Its in your interests to get your files back. From our side, we (the<br>best specialists) make everything for restoring, but please should not interfere.
  
Figure 6. REvil's Base64-decoded ransom note template with variable placeholders. (Source: Secureworks)` → `Actionable` | CORRECT — The complete, exact ransom note template can be directly matched for detection. |
| 49 | `Figure 7 shows contents of the ransomware note template with the variable placeholders populated with their corresponding values:

- · {EXT}- Replaced with the random extension (e.g., 9781xsd4) that was generated at runtime, stored within the rnd_ext registry value, and appended to encrypted filenames
- {UID} Replaced with the UID value comprised of the host's volume serial number and CPUID (The inclusion of this UID in the URIs provided to victims post-encryption indicates that the threat actors can use it to identify and track unique victims.)
- {KEY} Replaced with the Base64-encoded representation of the encrypted stat data in Table 3` → `Described` | CORRECT — It provides descriptive mapping details without yielding a concrete, matchable indicator. |
| 50 | `9781xsd4-HOW-TO-DECRYPT.txt` → `Actionable` | CORRECT — The filename is complete and unique, making it directly usable for detection. |
| 51 | `rnd_ext` → `Described` | CORRECT — As a standalone registry value name without full path context, it is ambiguous and requires enrichment. |
| 52 | `nbody` → `Actionable` | CORRECT — This unique configuration key is a complete identifier and can serve as an actionable indicator. |
| 53 | `mame` → `Actionable` | CORRECT — The configuration key is precise and unique, thus suitable for direct detection use. |
| 54 | `{EXT}-HOW-TO-DECRYPT.txt` → `Described` | CORRECT — The presence of a placeholder makes it a template rather than a concrete, actionable filename. |
| 55 | `{EXT}` → `Mentioned` | CORRECT — Being merely a placeholder, it is a conceptual reference and not uniquely matchable. |
| 56 | `{UID}` → `Mentioned` | CORRECT — As a generic placeholder for a unique identifier, it cannot be directly used for detection. |
| 57 | `{KEY}` → `Mentioned` | CORRECT — This placeholder is only conceptually referenced and lacks the specificity required for actionability. |
| 58 | `9781xsd4` → `Described` | CORRECT — Provided as an example extension that may vary at runtime, it is descriptive rather than a constant, actionable indicator. |

| 59 | {EXT} → Mentioned | CORRECT | It is a placeholder template variable not representing a concrete, directly actionable artifact. |
| 60 | 9781xsd4-HOW-TO-DECRYPT.txt → Actionable | CORRECT | It is a complete, unique file name that can be directly used for detection. |

| 61 | `-nolan` → `Actionable` | CORRECT | The '-nolan' command-line switch is a unique and complete indicator that can be exactly matched in log searches. |

| 62 | User32.dl's GetKeyboardLayoutList → Described | CORRECT | It precisely identifies an API function but isn’t a unique, standalone detection value. |
| 63 | \x18 thru \x44 → Mentioned | INCORRECT — should be "Described" because the hex range is a specific parameter value that, while requiring contextual parsing, isn’t merely a conceptual reference. | 
| 64 | REvil → Mentioned | CORRECT | As a malware family name, it’s referenced conceptually rather than as a unique, actionable artifact. |
| 65 | GandCrab ransomware → Mentioned | CORRECT | Malware family names are inherently conceptual and not directly actionable for detection. |
| 66 | | Keyboard locale                            | ldentifier | Keyboard locale |            |                                 | Identifier                   |            |
|--------------------------------------------|------------|-----------------|------------|---------------------------------|------------------------------|------------|
| Albanian                                   |            |                 | 0x0000041c |                                 | Persian (Standard)           | 0x00050429 |
| Armenian Eastern                           |            |                 | 0x0000042b |                                 | Romanian (Legacy)            | 0x00000418 |
| ... (table continues) ... Table 4. Keyboard locales immune to REvil. → Described | CORRECT | The complete table capture is descriptive evidence that requires further processing to extract actionable indicators. |
| 67 | dbg configuration key → Mentioned | CORRECT | It generically refers to a configuration key without providing a unique, directly matchable string. |

| 68 | "pro configuration key" → Described | CORRECT | It's an internal configuration setting that isn’t unique enough for direct automated matching. |
| 69 | "REvil" → Mentioned | CORRECT | As a malware family name, it's conceptually referenced and not a concrete indicator. |
| 70 | "kernel32.dll" → Described | CORRECT | Although detectable, it’s a common Windows system file that would lead to many false positives. |
| 71 | "TerminateProcess" → Described | CORRECT | This common API call lacks uniqueness, requiring additional context for detection. |
| 72 | "prc configuration key" → Described | CORRECT | Similar to its variant, it’s an ambiguous configuration setting that isn’t uniquely actionable. |
| 73 | "mysql.exe" → Described | CORRECT | Being a generic executable name, it’s too common to serve as a unique, actionable indicator. |

| 74 | `cmd.exe /c vssadmin.exe Delete Shadows /All /Quiet & bcdedit /set {default} recoveryenabled No & bcdedit /set {default} bootstatuspolicy ignoreallfailures` → `Actionable` | CORRECT — The command line is fully complete, unique, and can be directly matched by detection tools. |

| 75 | REvil → Mentioned | CORRECT | The ransomware family name is a generic reference and cannot be directly used for detection. |
| 76 | wfld → Actionable | CORRECT | The configuration key is an exact, unique string that can be matched directly. |
| 77 | backup → Described | CORRECT | The folder name is common and ambiguous, thus requiring additional context to be actionable. |
| 78 | backup1 → Described | CORRECT | This example folder name does not uniquely identify the malicious behavior and is ambiguous. |
| 79 | database backup → Described | CORRECT | The phrase is generic and ambiguous, making it non‑actionable without further enrichment. |

| 80 | wht configuration key → Described | CORRECT | The key name is generic and not a full registry path, thus requiring additional context before it can be used for automated detection. |
| 81 | fid subkey → Described | CORRECT | It is a descriptive subkey indicator that lacks the complete unique identifier necessary for direct detection. |
| 82 | fls subkey → Described | CORRECT | Similar to other subkey indicators, it is a generic term that requires enrichment before use in automated detection. |
| 83 | ext subkey → Described | CORRECT | The string is descriptive and ambiguous, not a complete registry path, so it is rightly classified as Described. |
| 84 | recfglpk_key → Actionable | CORRECT | This is a unique, exact string that can be matched directly as an indicator in a detection rule. |
| 85 | sk_key → Described | CORRECT | Although it is an exact string, its generic nature means it could lead to false positives, warranting a Described rank. |
| 86 | 0_key → Described | CORRECT | The value is too generic to be reliably actionable without additional context, making Described the proper choice. |
| 87 | Salsa20 stream cipher → Mentioned | CORRECT | As an encryption algorithm reference, it is only conceptual and not directly actionable for detection purposes. |
| 88 | I/O completion ports (/OCPs) → Mentioned | CORRECT | This refers to a general system API mechanism and is conceptual, preventing it from being directly actionable. |

| 89 | `9781xsd4-HOW-TO-DECRYPT.xt` → `Actionable` | CORRECT | It is a unique file name that can be directly matched as-is. |
| 90 | `C:\Users\<user>\AppData\Local\Temp\cd2sxy.bmp` → `Actionable` | INCORRECT — should be "Described" because the inclusion of the placeholder "<user>" prevents an exact, automated match. | The generic user component means it requires further enrichment to be actionable. |
| 91 | `user32.dll` → `Described` | CORRECT | As a common system DLL, it lacks uniqueness for direct automated detection. |
| 92 | `SystemParametersInfoW` → `Described` | CORRECT | It is a standard Windows API function and, without additional context, is not uniquely actionable. |

| 93 | `wp-content` → `Described` | CORRECT | The string is a common URI subpath and isn’t inherently unique, so it requires context to be actionable. |
| 94 | `static` → `Described` | CORRECT | This generic subpath value is ambiguous on its own and fits the "Described" classification. |
| 95 | `content` → `Described` | CORRECT | Being a general term, it is not unique enough for direct detection, thus "Described" is appropriate. |
| 96 | `include` → `Described` | CORRECT | The term is generic and lacks uniqueness, fitting the criteria for a "Described" observable. |
| 97 | `news` → `Described` | CORRECT | As a common subpath, "news" is ambiguous and appropriately classified as "Described". |
| 98 | `data` → `Described` | CORRECT | The term is generic and does not uniquely identify REvil C2, so it remains "Described". |
| 99 | `admin` → `Described` | CORRECT | "admin" is a common URI subpath and is not specific enough, making "Described" the correct rank. |
| 100 | `images` → `Described` | CORRECT | Although used in REvil C2 URLs, the generic nature of "images" necessitates a "Described" ranking. |
| 101 | `pictures` → `Described` | CORRECT | The term is a generic folder name and is correctly classified as "Described". |
| 102 | `image` → `Described` | CORRECT | Its generic nature means it cannot be uniquely actionable without further context. |
| 103 | `temp` → `Described` | CORRECT | "temp" is a common subpath and remains ambiguous, fitting the "Described" category. |
| 104 | `graphic` → `Described` | CORRECT | This term is generic and does not offer uniqueness, so "Described" is appropriate. |
| 105 | `assets` → `Described` | CORRECT | A common subpath term that is ambiguous without additional context, hence "Described". |
| 106 | `pics` → `Described` | CORRECT | The string is generic and non-unique, which is why it is correctly ranked as "Described". |
| 107 | `game` → `Described` | CORRECT | As a common word, it does not provide uniqueness, making "Described" the proper rank. |
| 108 | `[jpg` → `Described` | CORRECT | Despite its unusual format, it is a partial file extension value that lacks uniqueness. |
| 109 | `png` → `Described` | CORRECT | This common file extension on its own is ambiguous and appropriately classified as "Described". |
| 110 | `gif` → `Described` | CORRECT | The term is a generic file extension and fits the "Described" classification well. |
| 111 | `REvil` → `Mentioned` | CORRECT | As a malware family name referenced conceptually, it is not a direct detection indicator and is properly "Mentioned". |

| 112 | Unique attacker‐controlled decryption website URL → Described | CORRECT | The observable only conceptually describes the URL without providing the actual string for concrete detection. |
| 113 | Base64-encoded representation of the encrypted stat data stored in the registry → Described | CORRECT | The observable describes the format and context but does not include the actual encoded value, making it non-actionable. |

| 114 | `#### 1. Enter the key here:

2. Enter the extension name and click submit:

Extension name

SUBMIT

Figure 11. REvil ransom payment key and extension form. (Source: Secureworks)` → `Described` | CORRECT | The observable is a capture of UI form elements, providing context without a unique, concrete indicator for automated detection. |

| 115 | `-9781xsd4-Decryptor` → Actionable | CORRECT | The string is a unique identifier from the ransomware note that can be directly matched for detection. |

| 116 | `9781xsd4-Decryptor` → `Actionable` | CORRECT | The observable is a unique product identifier that can be directly matched for detection.  |

| 117 | `3E9F7gE3upQ8rgsPjwiKH7ugfdneypPjqj` → `Actionable` | CORRECT | The Bitcoin address is a complete, unique identifier that can be directly matched. |
| 118 | `9781xsd4-Decryptor` → `Actionable` | CORRECT | It is a unique tool identifier that can be exactly searched for in detection rules. |
| 119 | `Figure 12. REvil ransom payment details and instructions. (Source: Secureworks)` → `Mentioned` | CORRECT | The caption is a conceptual reference and not a concrete, actionable identifier. |

| 120 | "9781xsd4-Decryptor" → "Actionable" | CORRECT — the string is a unique, complete tool name that can be matched exactly. | It qualifies as a complete identifier for detection. |
| 121 | "your-file-name.jpg.9781xsd4" → "Described" | CORRECT — it’s a generic file name template that requires additional context for detection. | The placeholder “your-file-name” makes it ambiguous and not directly actionable. |
| 122 | "your-file-name.png.9781xsd4" → "Described" | CORRECT — it’s a generic file name example and not a fixed identifier. | The placeholder nature of the file name renders it descriptive rather than immediately actionable. |
| 123 | "your-file-name.gif.9781xsd4" → "Described" | CORRECT — it’s an example file name with a ransomware-specific suffix, hence not a unique constant. | Because the filename is illustrative and generic, it fits the Described category. |
| 124 | "Upload your file for test 9781xsd4-Decryptor.…" → "Described" | CORRECT — the observable is a full block of UI/screenshot text rather than a single actionable indicator. | Its contextual content makes it descriptive, requiring parsing to extract actionable parts. |
| 125 | "3E9F7gE3upQ8rgsPjwiKH7ugfdheypPjgj" → "Actionable" | CORRECT — it is a complete Bitcoin address that can be directly used in detection rules. | As a unique and well-formed Bitcoin address, it meets the actionable criteria. |
| 126 | "The analyzed sample requested that payment be sent to the Bitcoin address …" → "Described" | CORRECT — the value is a contextual narrative (wallet screenshot text) rather than an isolated actionable indicator. | Its extended descriptive context prevents it from being directly matched as a distinct indicator. |

| 127 | REvil → Mentioned | CORRECT | The threat actor name is a conceptual reference without actionable detection details. |
| 128 | GandCrab → Mentioned | CORRECT | As a threat actor reference, it is only conceptually mentioned and not directly actionable. |
| 129 | GOLD GARDEN → Mentioned | CORRECT | The threat group name is used contextually and does not provide concrete, actionable detection indicators. |

| 130 | REvil → Mentioned | CORRECT | The malware family name "REvil" is a conceptual reference that isn’t a unique, actionable artifact. |
| 131 | GandCrab → Mentioned | CORRECT | "GandCrab" is used conceptually to denote a malware family, making it non‐actionable. |
| 132 | Evil's decryptor → Mentioned | CORRECT | The term refers to a malware component in a generic way and lacks sufficient specificity for automated detection. |
| 133 | opcode pattern → Described | CORRECT | The phrase is an ambiguous extracted pattern that requires further enrichment before it could be used for concrete detection. |

| 134 | `REvil` → `Mentioned` | CORRECT | The observable is a malware family name, which is conceptually referenced and not directly actionable. |
| 135 | `GandCrab` → `Mentioned` | CORRECT | The observable is a malware family name, making it non‑actionable and appropriately classified as mentioned. |
| 136 | `REvil's BuildURL function` → `Described` | CORRECT | The function name is generic and extracted from pseudocode, lacking sufficient context for direct automated detection. |
| 137 | `GandCrab's BuildURL function` → `Described` | CORRECT | Similar to the REvil case, the function name is generic and does not provide a unique, actionable indicator. |

| 138 | D:\gc6\\core\src\common\debug.c → Actionable | CORRECT | The file path is complete and uniquely identifiable for direct detection. |
| 139 | REvil → Mentioned | CORRECT | The malware family name is referenced conceptually without providing a unique artifact for detection. |
| 140 | GandCrab → Mentioned | CORRECT | It is used as a generic reference to a malware group rather than a unique, actionable identifier. |
| 141 | gc6 → Described | CORRECT | The version tag is ambiguous and not uniquely actionable, hence it requires further context for detection. |

| 142 | `REvil` → `Mentioned` | CORRECT | Ransomware family names are generic identifiers that are referenced conceptually rather than offering a unique, actionable indicator. |
| 143 | `GandCrab` → `Mentioned` | CORRECT | As a legacy ransomware family name, it is a conceptual reference not directly tied to unique detection logic. |

| 144 | 512b538ce2c40112009383ae70331dcf → Actionable | CORRECT | MD5 hash is a complete, unique identifier that can be directly used in detection. |
| 145 | d3a0c325121ab4775ab48bbb7b2ef21c0f123109 → Actionable | CORRECT | SHA1 hash is complete and unambiguous, making it directly actionable. |
| 146 | 25ac4873ae4f955032f8f0e8ed4ec78df2e2ce814454b7b5abd9489feb4e30c3 → Actionable | CORRECT | SHA256 hash is complete, unique, and meets the criteria for being actionable. |
| 147 | 112983B0-B4C9-4F9B-96C4-E5394FB8A5B4 → Actionable | CORRECT | The complete Mutex (GUID-like) value is unique and can be directly used in detection. |
| 148 | 1DB960B8-E5C3-F077-5D68-EEE2E637EE0B → Actionable | CORRECT | This Mutex string is fully specified and thus actionable for automated detection. |
| 149 | 206D87E0-0E60-DF25-DD8F-8E4E7D1E3BF0 → Actionable | CORRECT | The Mutex identifier is complete, unique, and meets actionable criteria. |
| 150 | 3555A3D6-37B3-0919-F7BE-F3AAB5B6644A → Actionable | CORRECT | A complete Mutex value that can be directly leveraged for detection. |
| 151 | 552FFA80-3393-423d-8671-7BA046BB5906 → Actionable | CORRECT | Despite mixed case characters, the complete Mutex value is actionable. |
| 152 | 6CAC559B-02B4-D929-3675-2706BBB8CF66 → Actionable | CORRECT | The Mutex string is fully formed and uniquely searchable, making it actionable. |
| 153 | 859B4E91-BAF1-3DBB-E616-E9E99E851136 → Actionable | CORRECT | This complete Mutex value is directly usable in automated detection systems. |
| 154 | 879EBE58-4C9F-A6BE-96A3-4C51826CEC2F → Actionable | CORRECT | The fully specified Mutex identifier is actionable without ambiguity. |
| 155 | 95B97D2B-4513-2041-E8A5-AC7446F12075 → Actionable | CORRECT | A complete Mutex indicator that is unique and suitable for detection rules. |
| 156 | BF29B630-7648-AADF-EC8A-94647D2349D6 → Actionable | CORRECT | The Mutex value is fully formed and meets actionable criteria for unique detection. |
| 157 | C126B3B3-6B51-F91C-6FDF-DD2C70FA45E6 → Actionable | CORRECT | This complete Mutex identifier is unambiguous and directly actionable. |
| 158 | C19C0A84-FA11-3F9C-C3BC-0BCB16922ABF → Actionable | CORRECT | The Mutex string is complete and uniquely identifiable, thus actionable. |
| 159 | C817795D-7756-05BF-A69E-6ED0CE91EAC4 → Actionable | CORRECT | A fully specified Mutex value that can be used as a detection indicator. |
| 160 | D382D713-AA87-457D-DDD3-C3DDD8DFBC96 → Actionable | CORRECT | The complete Mutex value is actionable and can be utilized in automated detection. |
| 161 | DAE678E1-967E-6A19-D564-F7FCA6E7AEBC → Actionable | CORRECT | This Mutex identifier is fully formed and meets the criteria for actionable indicators. |
| 162 | FB864EC7-B361-EA6D-545C-E1A167CCBE95 → Actionable | CORRECT | A complete Mutex string that is both unique and actionable for detection mechanisms. |
| 163 | FDC9FA6E-8257-3E98-2600-E72145612F09 → Actionable | CORRECT | The Mutex identifier is fully specified, making it directly usable for detection. |

| 164 | Detection & Response → Mentioned | CORRECT | This is a generic capability term rather than a concrete, actionable indicator. |
| 165 | XDR → Mentioned | CORRECT | "XDR" is an abbreviation for Extended Detection and Response and serves as a conceptual reference, not a searchable indicator. |
| 166 | Log Management → Mentioned | CORRECT | The term is a generic reference to a platform function rather than a unique, actionable artifact. |
| 167 | MITRE ATT&CK Coverage → Mentioned | CORRECT | It refers to framework coverage conceptually, lacking the specificity to be actionable. |
| 168 | ndr → Mentioned | CORRECT | "ndr" is a generic abbreviation for Network Detection and Response and does not provide a unique identifier for detection. |
| 169 | edr → Mentioned | CORRECT | "edr" is an abbreviated generic term for Endpoint Detection and Response, making it non-actionable. |

| 170 | NGAV Identity Security idr → Mentioned | CORRECT | It is a generic product name reference without a concrete, actionable artifact. |
| 171 | OT Security Operational Technology → Mentioned | CORRECT | It is a conceptual reference lacking specific technical indicators for detection. |

md file name: /content/validation/Research Hub_ Threat Research, Trend Reports, White Papers _ Group-IB Resources.md

| 1 | "phishing" → "Mentioned" | CORRECT | It is a generic, conceptual reference that cannot be directly used for detection. |
| 2 | "business email compromise attacks" → "Mentioned" | CORRECT | It is a generic reference to an attack type, lacking specific, actionable details for detection. |

| 3 | OPERA1ER → Mentioned | CORRECT | Threat actor aliases are conceptual references that don’t provide a unique, actionable indicator. |
| 4 | OldGremlin Ransomware → Mentioned | CORRECT | Ransomware group names are references and not concrete indicators for automated detection. |

| 5 | `Classiscam` → `Mentioned` | CORRECT | Campaign name is conceptually referenced and not directly actionable. |
| 6 | `ARMattack` → `Mentioned` | CORRECT | As a campaign identifier, it serves as a conceptual reference rather than a unique detection artifact. |
| 7 | `Conti Armada` → `Mentioned` | CORRECT | Threat group names are used conceptually and do not provide a direct, low-false-positive signature. |

| 8 | `ransomware attacks` → `Mentioned` | CORRECT | Generic reference to a threat type rather than a concrete, actionable indicator. |
| 9 | `carding activity` → `Mentioned` | CORRECT | It is a broad reference to criminal activity without specifics for automated detection. |
| 10 | `network access sales` → `Mentioned` | CORRECT | The phrase is a generic description of illicit market activity, not a unique identifier. |

| 11 | Group-IB Fraud Protection → Described | CORRECT | The product name is a reference that lacks direct technical indicators, fitting the "Described" category. |
| 12 | Fraud Hunting Platform → Described | CORRECT | As an alias for the product name, it remains non-actionable and correctly classified as "Described". |

| 13 | "Egregor Ransomware" → "Mentioned" | CORRECT | It's a general threat actor name referenced conceptually rather than a unique, actionable indicator. |
| 14 | "Maze" → "Mentioned" | CORRECT | It's used as a generic reference to a ransomware group, not a directly actionable artifact. |
| 15 | "ProLock" → "Mentioned" | CORRECT | It serves as a reference to a threat actor without sufficient technical uniqueness for detection. |

| 16 | UltraRank → Mentioned | CORRECT | It appears as a research title reference without actionable technical details. |
| 17 | JS-Sniffer → Mentioned | CORRECT | It is a generic tool name mentioned without concrete detection parameters. |
| 18 | JS-sniffers → Mentioned | CORRECT | The plural reference remains a generic mention without enough specifics to be actionable. |

| 19 | `RedCurl` → `Mentioned` | CORRECT | The observable is a threat actor name, which is conceptually referenced and not directly actionable. |

| 20 | `Fxmsp` → `Mentioned` | Validator output CORRECT | As a threat actor name, it is used conceptually and isn’t a concrete, unique identifier for automated detection. |
| 21 | `The Invisible God of Networks` → `Mentioned` | Validator output CORRECT | Being a threat actor alias presented as a conceptual reference, it is not actionable for direct detection. |

| 22 | `JS-sniffers` → `Mentioned` | CORRECT | The observable is a generic malware family name and not a uniquely actionable indicator. |

| 23 | MoneyTaker → Mentioned | CORRECT | The observable is a threat actor group name mentioned conceptually, which is not a concrete, unique indicator for automated detection. |

| 24 | `Cobalt` → `Mentioned` | CORRECT | The observable is a threat actor name and is conceptually referenced, making it non-actionable. |

| 25 | `Anunak` → `Mentioned` | CORRECT | It is a threat actor name used for attribution and not a detection-specific indicator. |
| 26 | `Carbanak` → `Mentioned` | CORRECT | It is an alias for a threat actor group and lacks actionable attributes for detection. |

| 27 | "+65 3159 3798" → "Actionable" | CORRECT | The phone number is complete and can be matched exactly in logs. |
| 28 | "+31 20 226 90 90" → "Actionable" | CORRECT | The phone number is a complete, unique identifier suitable for exact matching. |
| 29 | "+971 4 508 1605" → "Actionable" | CORRECT | Being a complete phone number, it can be directly used for detection. |
| 30 | "info@group-ib.com" → "Actionable" | CORRECT | The email address is fully formed and uniquely identifiable for automated detection. |

md file name: /content/validation/report_55.md

| 1 | WannaCry → Actionable | INCORRECT — should be "Mentioned" because it is a generic malware family name that cannot drive low–false positive automated detection. | Malware names like WannaCry are conceptual references, not unique artifacts. |
| 2 | NotPetya → Actionable | INCORRECT — should be "Mentioned" because it is a generic label for a ransomware variant rather than a uniquely matchable indicator. | The observable is a common malware family name lacking distinctive detection properties. |
| 3 | BadRabbit → Actionable | INCORRECT — should be "Mentioned" because it is merely a generic reference to a malware variant and not a direct artifact for automated matching. | Generic malware names don’t offer the uniqueness required for actionable indicators. |
| 4 | Ryuk → Actionable | INCORRECT — should be "Mentioned" because it is a generic reference to a ransomware family that isn’t sufficiently unique for direct detection. | As a malware family name, Ryuk is conceptual and not a unique, matchable artifact. |
| 5 | LockerGoga → Actionable | INCORRECT — should be "Mentioned" because it is a generic ransomware variant name, not a concrete identifier suited for automated detection. | Such variant names are used conceptually and lack inherent uniqueness. |
| 6 | MS17-010 → Actionable | CORRECT | MS17-010 is a standardized vulnerability identifier that can be precisely matched in detection systems. |

| 7 | LockBit Ransomware → Mentioned | CORRECT | The observable refers to a known ransomware group by name, which is a conceptual reference and not a specific artifact suitable for automated detection. |

md file name: /content/validation/What is Ryuk Ransomware_ The Complete Breakdown.md

| 1 | "WIZARD SPIDER" → "Described" | CORRECT | Threat actor names are used as contextual labels and are not technical indicators that can be directly detected. |
| 2 | "Ryuk" → "Described" | CORRECT | Malware names are descriptive and require additional context for direct detection, making "Described" the appropriate rank. |
| 3 | "TrickBot" → "Described" | CORRECT | As a malware family name, it is best used for enrichment rather than direct automated detection, so "Described" is correct. |
| 4 | "GRIM SPIDER" → "Described" | CORRECT | Deprecated threat actor alias names serve as descriptive context only, and thus "Described" is appropriately assigned. |
| 5 | "Hermes ransomware" → "Described" | CORRECT | Ransomware names provide context but are not unique technical indicators, correctly placing them in the "Described" category. |
| 6 | "Samas" → "Described" | CORRECT | The observable is a ransomware variant name that isn’t a concrete technical IOC, so "Described" is the right rank. |
| 7 | "BitPaymer" → "Described" | CORRECT | As with similar malware names, it functions as descriptive intelligence rather than a directly actionable indicator. |

| 8 | RyukReadMe.txt → Actionable | CORRECT | The file name is a complete and unique identifier (a ransom note name) that can be matched directly. |
| 9 | protonmail.com → Mentioned | CORRECT | As a generic email service domain, it is referenced conceptually and isn’t a unique detection indicator. |
| 10 | tutanota.com → Mentioned | CORRECT | This common email service domain is mentioned in context and is not unique enough to drive automatic detection. |
| 11 | KurtSchweickardt@protonmail.com → Actionable | CORRECT | The provided email address is a complete, unique identifier explicitly given for decryptor contact. |
| 12 | KurtSchweickardt@tutanota.com → Actionable | CORRECT | The full email address is specific and actionable as a direct contact indicator. |
| 13 | 14hVKm7Ft2rxDBFTNkkRC3kGstMGp2A4hk → Actionable | CORRECT | The Bitcoin wallet address is complete and unique, making it directly actionable. |
| 14 | CliffordGolden93@protonmail.com → Actionable | CORRECT | This full email address is a precise and distinct indicator suitable for actionable detection. |
| 15 | CliffordGolden93@tutanota.com → Actionable | CORRECT | The email address is complete and specific, qualifying it as an actionable indicator. |
| 16 | C:\Users\Admin\Documents\Visual Studio 2015\Projects\ConsoleApplication54new crypted try to clean\x64\Release\ConsoleApplication54.pdb → Actionable | CORRECT | The full PDB file path is a complete artifact that can be directly used in detection. |

| 17 | WIZARD SPIDER → Mentioned | CORRECT | Threat actor names are generic references without a unique, matchable artifact. |
| 18 | INDRIK SPIDER → Mentioned | CORRECT | As a threat actor label, it serves conceptually rather than as a concrete, actionable indicator. |
| 19 | BitPaymer → Mentioned | CORRECT | Ransomware family names like this are used for reference and lack the specificity required for direct detection. |
| 20 | GRIM SPIDER → Mentioned | CORRECT | Like other threat actor names, it is a conceptual reference and not a concrete identifier for automated matching. |
| 21 | pwg rab → Described | CORRECT | The module name is ambiguous and requires additional contextual enrichment, fitting the “Described” rank. |
| 22 | PowerShell Empire → Mentioned | CORRECT | Being the name of a tool, it’s a conceptual reference rather than a uniquely actionable indicator. |
| 23 | Remote Desktop Protocol (RDP) → Mentioned | CORRECT | Protocol names are generic and cannot be directly used for low false‑positive detection without further context. |
| 24 | PSEXEC → Described | CORRECT | Although it’s a complete tool name, its ambiguous usage in both legitimate and malicious contexts necessitates additional context. |
| 25 | Ryuk binary → Described | CORRECT | The description refers to a generic malware component without a unique, matchable artifact, requiring further enrichment. |
| 26 | | Featured         |
|------------------|
| Recent           |
| Video            |
| Category         |
| Start Free Trial |
|                  | → Mentioned | CORRECT | The table block is non‑actionable content extracted for context rather than a concrete detection artifact. |

| 27 | HERMES → Actionable | CORRECT | The string is a unique file marker used by Hermes ransomware, making it directly matchable for detection. |
| 28 | C:\Documents and Settings\Default User\ → Described | CORRECT | Although it is a complete file path, it’s a generic system location and may yield false positives, so it is appropriately descriptive. |
| 29 | C:\Users\Public → Described | CORRECT | The file path is generic and common on many systems, making it better suited for contextual description rather than direct automated detection. |
| 30 | Microsoft SIMPLEBLOB format → Described | CORRECT | The value names a file format rather than providing a unique identifier, so it requires additional context to be actionable. |
| 31 | RSA-2048 → Mentioned | CORRECT | As an encryption algorithm specification, it is a conceptual reference and not a unique, actionable indicator. |
| 32 | AES-256 → Mentioned | CORRECT | It is an encryption algorithm reference and does not provide enough unique detail for automated detection. |
| 33 | AES-CBC → Mentioned | CORRECT | The value only describes an encryption mode and cannot be directly used as a concrete detection indicator. |

| 34 | Ryuk → Mentioned | CORRECT | "Ryuk" as a malware family name is conceptually referenced and isn’t a unique, directly matchable indicator. |
| 35 | Chrome → Described | CORRECT | As a common folder name (whitelisted) it requires additional context and isn’t unique enough for direct detection. |
| 36 | Windows → Described | CORRECT | "Windows" is a generic folder name that is ambiguous for direct automated detection. |
| 37 | Microsoft → Described | CORRECT | Being a widely used folder name, "Microsoft" is not unique enough and thus appropriately ranked as Described. |
| 38 | AhnLab → Described | CORRECT | "AhnLab" is a generic folder name and, like similar names, doesn’t offer a unique match for detection on its own. |
| 39 | C:\Boot → Described | INCORRECT — should be "Actionable" because it is a complete file path that can be matched directly by detection systems. | Complete file paths are considered actionable indicators per the guidelines. |
| 40 | Hermes → Mentioned | CORRECT | As a malware family name, "Hermes" is conceptually referenced and not directly actionable. |
| 41 | WIZARD SPIDER → Mentioned | CORRECT | Threat actor names are used for attribution and are only conceptual, making "Mentioned" appropriate. |
| 42 | .RYK → Actionable | CORRECT | The unique file extension ".RYK" is a concrete, full indicator suitable for detection by automated systems. |
| 43 | RyukReadMe. txt → Actionable | CORRECT | The ransomware note filename is a specific artifact that can be directly matched in detection rules. |
| 44 | GetLogicalDrives → Described | CORRECT | This standard API function is too generic for automated detection and fits a Described indicator. |
| 45 | GetDriveTypeW → Described | CORRECT | As a common Windows API function, it is appropriately ranked as Described since it isn’t uniquely indicative. |
| 46 | Get LpNet Lab Le → Actionable | CORRECT | The unusual, complete API call string is unique enough for a low false‑positive detection rule. |
| 47 | AES → Mentioned | CORRECT | Generic encryption algorithm names like "AES" are conceptually referenced rather than directly actionable. |
| 48 | RSA → Mentioned | CORRECT | Similar to AES, "RSA" is a generic algorithm name and is appropriately classified as Mentioned. |

| 49 | "HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Run" → Described | CORRECT | This registry key is a well-known, common autorun location and is not uniquely malicious on its own. |
| 50 | "svchos" → Actionable | CORRECT | The registry value "svchos" is unique and specific to Ryuk’s persistence mechanism, making it directly actionable. |
| 51 | "cmd.exe" → Mentioned | CORRECT | "cmd.exe" is a generic system binary and not unique enough to be used for targeted detection. |

| 52 | `csrss.exe` → `Described` | CORRECT | It’s a common Windows system process name that isn’t unique enough for direct automated detection. |
| 53 | `explorer.exe` → `Described` | CORRECT | As a ubiquitous Windows process, it isn’t sufficiently unique to be actionable on its own. |
| 54 | `lsaas.exe` → `Described` | INCORRECT — should be "Actionable" because the unusual, complete process name (a likely misspelling of lsass.exe) is a unique indicator that can be matched directly. | Its distinct spelling makes it an actionable indicator despite being a process name. |
| 55 | `NT AUTHORITY system account` → `Described` | CORRECT | It refers to a well-known, built-in Windows account, making it descriptive rather than a unique detection handle. |
| 56 | `Ryuk` → `Described` | CORRECT | As a ransomware family name, it provides context but isn’t a unique artifact that would reliably drive automated detection. |
| 57 | `WriteProcessMemory` → `Mentioned` | CORRECT | This generic Windows API function is common in many processes, making it non‑unique and conceptually referenced. |
| 58 | `CreateRemoteThread` → `Mentioned` | CORRECT | Like WriteProcessMemory, it’s a widely used API function and too generic for direct, automated detection. |

| 59 | kill.bat → Described | CORRECT | The file name is generic and can be arbitrarily changed, so it isn’t unique enough for automated detection. |
| 60 | windows.bat → Described | CORRECT | This generic batch file name is ambiguous and lacks the uniqueness required for actionable detection. |
| 61 | each.command.net stop avpsus /y net stop McAfeeDLPAgentService /y net stop mfewc /y net stop BMR Boot Service /y net stop NetBackup BMR MTFTP Service /y … sc config SQLTELEMETRY start= disabled sc config SQLTELEMETRY\$ECWDB2 start= disabled sc config SQLWriter start= disabled sc config SstpSvc start= disabled … taskkill /IM mspub.exe /F taskkill /IM mydesktopqos.exe /F taskkill /IM mydesktopservice.exe /F Figure1.Process/Services Termination kill.bat Commands → Actionable | CORRECT | This is a full, specific command sequence extracted from a batch file, making it directly matchable. |
| 62 | vssadmin Delete Shadows /all /quiet vssadmin resize shadowstorage /tor=c: /on=c: /maxsize=401MB vssadmin resize shadowstorage /for=c: /on=c: /maxsize=unbounded vssadmin resize shadowstorage /tor=d: /on=d: /maxsize=401MB vssadmin resize shadowstorage /for=d: /on=d: /maxsize=unbounded vssadmin resize shadowstorage /for=e: /on=e: /maxsize=401MB vssadmin resize shadowstorage /for=e: /on=e: /maxsize=unbounded vssadmin resize shadowstorage /for:f: /on:f: /maxsize=401MB vssadmin resize shadowstorage /for:f: /on:f: /maxcize=unhounded vccadmin recite … Figure 2. Anti-Recovery window . bat Commands → Actionable | CORRECT | This complete block of anti-recovery commands is specific and can be directly used for detection.

63 | STARDUST CHOLLIMA → Mentioned | CORRECT | Threat actor names are conceptual references, not actionable indicators.  
64 | Lazarus Group → Mentioned | CORRECT | Threat actor names are used descriptively and lack direct detection value.  
65 | bits ran . exe → Actionable | CORRECT | Its unusual executable name is a complete identifier that can drive low false‑positive detection.  
66 | RSW7B37.tmp → Actionable | CORRECT | The high‐entropy temporary file name is unique enough to be actionable in a detection rule.  
67 | msmpeng.exe → Described | CORRECT | A common Windows executable that is generic and may produce false positives if used alone.  
68 | splwow32.exe → Described | CORRECT | Being a generic system file, it needs additional context to serve as a reliable detection indicator.  
69 | FileTokenBroker.dll → Described | CORRECT | As a common DLL on Windows systems, it requires corroboration with other indicators before action.

| 70 | `| bitsran.exe | Dropper/spreader     | Sun Oct<br>1<br>09:37:31<br>2017 | 2010 SP1<br>(build<br>40219) &<br>Visual<br>C++ 9.0<br>2008 SP<br>(build<br>30729) | ... Table 1. File Information for Binaries Used in the FEIB SWIFT Compromise` → `Described` | CORRECT | The entire table is a descriptive presentation of file details rather than a single, unique indicator that can be directly matched. |
| 71 | `bitsran.exe` → `Actionable` | CORRECT | This is an exact file name string that can be directly searched in endpoint logs for detections. |
| 72 | `RSW7B37.tmp` → `Actionable` | CORRECT | The unique, complete file name makes it actionable for detection purposes. |
| 73 | `Hermes` → `Mentioned` | CORRECT | As a malware family name, it is conceptually referenced rather than a specific, directly matchable artifact. |
| 74 | `Offset(h) 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F ...` → `Described` | CORRECT | The hex dump is a detailed file representation and must be processed further; it is not a singular concrete indicator for automated detection. |

| 75 | RSW7B37.tmp → Actionable | CORRECT | It is a specific, complete filename that can be looked up directly in detections. |
| 76 | HERMES → Actionable | CORRECT | The encryption marker is provided as an exact, unique string suitable for precise matching in automated detection. |
| 77 | 00002CD0 B7 5A 6A 52 CD 20 69 68 OF F0 56 98 00 AC 21 6A ·ZjRÍ ih.ðV ·- !j 00002CE0 48 45 52 4D 45 53 HERMES → Actionable | CORRECT | The complete hex dump, including offsets and hex bytes, is a full artifact that can be directly used for automated detection. |

| 78 | WIZARD SPIDER → Mentioned | CORRECT | It is a threat actor name provided for context, not a unique indicator. |
| 79 | STARDUST CHOLLIMA → Mentioned | CORRECT | Threat actor name used in contextual attribution and not directly actionable. |
| 80 | exploit<.>1n → Actionable | CORRECT | The obfuscated domain string is complete and can be directly used in detection rules. |
| 81 | HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Nls\Language\ → Actionable | CORRECT | The full registry key is unique and can be matched directly by detection systems. |
| 82 | InstallLanguage → Described | CORRECT | It is a common registry value name lacking uniqueness for direct automated detection. |
| 83 | 0419 → Described | CORRECT | The numeric language code is ambiguous and requires further context, making it non‑actionable. |
| 84 | 0422 → Described | CORRECT | The numeric code is generic and ambiguous, thus it is not directly actionable. |
| 85 | 0423 → Described | CORRECT | Being a common numeric language code, it is ambiguous and not unique for detection. |
| 86 | Ryuk → Mentioned | CORRECT | The ransomware family name is referenced for context and is not a concrete detection indicator. |
| 87 | kill.bat → Described | CORRECT | The file name is generic and ambiguous, making it unsuitable as a unique actionable indicator. |

| 88 | 12vsQry1XrPjPCaH8gWzDJeYT7dhTmpcjL → Actionable | CORRECT | It is a complete, valid Bitcoin address that can be directly matched. |
| 89 | 1Kx91176PHwk8sw7Ur6PsMWyEtaogX7wWY → Actionable | CORRECT | This Bitcoin address is fully formed and uniquely identifiable for detection. |
| 90 | 1FtQnqvjxEK5GJD9PthHM4MtdmkAeTeoRt → Actionable | CORRECT | It is a complete Bitcoin address suitable for actionable detection. |
| 91 | 14aJo5L9PTZhv8XX6qRPncbTXecb8Qohqb → Actionable | CORRECT | The address is properly formatted and directly actionable. |
| 92 | 1E4fQqzCvS8wgqy5T7n1DW8JMNMaUbeFAS → Actionable | CORRECT | It is a fully valid Bitcoin address that can be used for precise detection. |
| 93 | 1GXgngwDMSJZ1Vahmf6iexKVePPXsxGS6H → Actionable | CORRECT | This is a complete, unambiguous Bitcoin address ready for automated matching. |
| 94 | 1Cyh35KqhhDewmXy63yp9ZMqBnAWe4oJRr → Actionable | CORRECT | The Bitcoin address is clear and directly usable for detection. |
| 95 | 15LsUgtnuGc1PsHJPcfLQJEnHm2FnGAgYC → Actionable | CORRECT | It is a fully formed, actionable Bitcoin address. |
| 96 | 1CbP3cgi1Bcjuz6g2Fwvk4tVhqohqAVpDQ → Actionable | CORRECT | The observable is a valid Bitcoin address that can be matched as-is. |
| 97 | 1Jα3WwsaPA7I XwRNYsfvSsd8aoidmkFnW → Actionable | INCORRECT — should be "Described" because the embedded non‑ASCII character and unexpected space render the address ambiguous for automated detection. | The formatting issues prevent direct matching using the provided string. |

| 98 | `13rTF3AYsf8xEdafUMT5W1E5Ab2aqPhkPi` → `Actionable` | CORRECT | The string is a unique, complete identifier that can be matched exactly in detection.  |

| 99 | `17v2cu8RDXhAxufQ1YKiauBq6GGAZzfnFw` → `Actionable` | CORRECT | Bitcoin addresses are complete, unique observables that can be directly used for detection. |
| 100 | `1KUbXkjDZL6HC3Er34HwJiQUAE9H81Wcsr` → `Actionable` | CORRECT | Bitcoin addresses are concrete identifiers and are thus actionable. |
| 101 | `12UbZzhJrdDvdyv9NdCox1Zj1FAQ5onwx3` → `Actionable` | CORRECT | As a complete Bitcoin address, it is specific enough to be used in automated detection. |
| 102 | `1NMgARKzfaDExDSEsNijeT3QWbvTF7FXxS` → `Actionable` | CORRECT | The observable is a unique Bitcoin address, making it actionable. |
| 103 | `19AE1YN6Jo8ognKdJQ3xeQQL1mSZyX16op` → `Actionable` | CORRECT | It is a fully formed Bitcoin address that can be precisely matched by detection rules. |
| 104 | `1L9fYHJJxeLMD2yyhh1cMFU2EWF5ihgAmJ` → `Actionable` | CORRECT | Despite the note about non-ASCII text in another column, the address itself is complete and actionable. |
| 105 | `18eu6KrFgzv8yTMVvKJkRM3YBAyHLonk5G` → `Actionable` | CORRECT | A complete Bitcoin address that can serve as a direct indicator for threat detection. |
| 106 | `1C8n86EEttnDjNKM9Tjm7QNVgwGBncQhDs` → `Actionable` | CORRECT | This Bitcoin address is a unique and concrete indicator, qualifying as actionable. |
| 107 | `12N7W9ycLhuck9Q2wT8E6BaN6XzZ4DMLau` → `Actionable` | CORRECT | Bitcoin addresses are complete and specific, making them directly actionable. |
| 108 | `162DVnddxsbXeVgdCy66RxEPADPETBGVBR` → `Actionable` | CORRECT | The observable is a fully specified Bitcoin address, which is inherently actionable. |
| 109 | `1ChnbV4Rt7nsb5acw5YfYyvBFDj1RXcVQu` → `Actionable` | CORRECT | As a complete Bitcoin address, it is a reliable indicator suitable for automated matching. |
| 110 | `1K6MBjz79QqfLBN7XBnwxCJb8DYUmmDWAt` → `Actionable` | CORRECT | This Bitcoin address is fully formed, making it an actionable indicator. |
| 111 | `1EoyVz2tbGXWL1sLZuCnSX72eR7Ju6qohH` → `Actionable` | CORRECT | A complete observable that directly maps to an actionable Bitcoin address. |
| 112 | `1NQ42zc51stA4WAVkUK8uqFAjo1DbWv4Kz` → `Actionable` | CORRECT | Bitcoin addresses are distinct and complete, validating its actionable ranking. |
| 113 | `15FC73BdkpDMUWmxo7e7gtLRtM8gQgXyb4` → `Actionable` | CORRECT | This observable is a complete Bitcoin address, clearly actionable for detection purposes. |
| 114 | `14hVKm7Ft2rxDBFTNkkRC3kGstMGp2A4hk` → `Actionable` | CORRECT | Fully specified Bitcoin address observables are actionable given their uniqueness. |
| 115 | `1CN2iQbBikFK9jM34Nb3WLx5DCenQLnbXp` → `Actionable` | CORRECT | A complete Bitcoin address; its precision makes it readily actionable. |
| 116 | `1LKULheYnNtJXgQNWMo24MeLrBBCouECH7` → `Actionable` | CORRECT | Bitcoin addresses are unique and complete indicators, thus correctly ranked as actionable. |
| 117 | `15RLWdVnY5n1n7mTvU1zjg67wt86dhYqNj` → `Actionable` | CORRECT | This observable is a complete Bitcoin address, making it directly actionable. |
| 118 | `1KURvApbe1yC7qYxkkvtdZ7hrNjdp18sQ` → `Actionable` | CORRECT | The Bitcoin address is fully formed and specific enough for actionable detection. |
| 119 | `1NuMXQMUxCngJ7MNQ276KdaXQgGjpjFPhK` → `Actionable` | CORRECT | As a full Bitcoin address observable, it meets the criteria for being actionable. |

| 120 | `795db7bdad1befdd3ad942be79715f6b0c5083d859901b81657b5` → `Actionable` | CORRECT | The file hash is a complete and unique indicator that can be directly used for detection. |
| 121 | `fe909d18cf0fde089594689f9a69fbc6d57b69291a09f3b9df1e9b` → `Actionable` | CORRECT | The file hash is complete and specific enough to be actionable for detection purposes. |
| 122 | `ac648d1ff695cf98993fa519803fa26cd43ec32a7a8713bfa34eb6` → `Actionable` | CORRECT | The SHA256 hash is a complete, unique identifier ideal for automated detection. |
| 123 | `5e2c9ec5a108af92f177cabe23451d20e592ae54bb84265d1f972f` → `Actionable` | CORRECT | The SHA256 hash is fully specified and concrete for use in security detection tools. |
| 124 | `78c6042067216a5d47f4a338dd951848b122bbcbcd3e61290b2f7` → `Actionable` | CORRECT | The file hash is a complete, well-defined indicator that can be directly matched in detection systems.

| 125 | 1.888.512.8906 → Actionable | CORRECT | The phone number is a complete and unique identifier that can be matched exactly without additional enrichment. |

md file name: /content/validation/REvil Ransomware_ The GandCrab Connection _ Secureworks.md

| 1 | REvil → Mentioned | CORRECT | "REvil" is a generic malware family name used conceptually, not as a unique, matchable indicator. |
| 2 | GandCrab → Mentioned | CORRECT | "GandCrab" is referenced as a ransomware family name, making it conceptually informative rather than actionable. |
| 3 | GOLD GARDEN → Mentioned | CORRECT | "GOLD GARDEN" is a moniker for threat actor developers and is used conceptually, not as a concrete, detection-ready indicator. |

| 4 | REvil → Mentioned | CORRECT | "REvil" is a generic ransomware family name that isn’t a unique, directly searchable artifact. |
| 5 | Sodinokibi → Mentioned | CORRECT | "Sodinokibi" is an alias for REvil and is mentioned conceptually without actionable specificity. |
| 6 | GandCrab → Mentioned | CORRECT | "GandCrab" is simply the name of a ransomware family, making it appropriate as a conceptual mention. |
| 7 | Oracle WebLogic → Mentioned | CORRECT | As a common product name referenced in an exploit context, it remains a generic mention rather than a unique indicator. |
| 8 | GOLD SOUTHFIELD → Mentioned | CORRECT | This threat actor alias is used conceptually and isn’t a concrete, low–false‑positive indicator. |
| 9 | GOLD GARDEN → Mentioned | CORRECT | The name is a generic threat actor reference and does not offer a distinct, actionable artifact. |
| 10 | RDP attacks → Mentioned | CORRECT | "RDP attacks" describes an attack technique conceptually, lacking a precise, searchable identifier. |
| 11 | malicious span campaigns → Mentioned | CORRECT | The phrase is a generic descriptor for a campaign tactic without a unique detection string. |
| 12 | strategic web compromise (SWC) → Mentioned | CORRECT | This phrase denotes an attack technique rather than providing a concrete, matchable indicator. |
| 13 | WinRAR → Mentioned | INCORRECT — should be "Described" because it refers to a specific target executable whose context offers detail for potential detection even though it remains ambiguous. | The note specifies that WinRAR is the target executable in the incident, making it a descriptive artifact that needs enrichment before automated detection. |

| 14 | GandCrab → Mentioned | CORRECT | The malware family name is used conceptually rather than as a unique, actionable detection string. |
| 15 | REvil → Mentioned | CORRECT | As a generic malware family name, it is a conceptual reference not directly actionable. |
| 16 | GOLD GARDEN → Mentioned | CORRECT | Threat group names like this serve as conceptual labels rather than unique indicators for detection. |
| 17 | GOLD SOUTHFIELD → Mentioned | CORRECT | Being a threat group name, it is a generic reference that is not intended for direct detection. |
| 18 | REvil version 1.01 → Mentioned | CORRECT | Version labels are descriptive and lack the uniqueness required for actionable detection. |
| 19 | Crab → Mentioned | CORRECT | The shorthand and ambiguous reference fails to provide a unique identifier for automated detection. |
| 20 | REvil Beta → Mentioned | CORRECT | As a malware version reference, it remains a conceptual label not suited for actionable detection.

| 21 | "Opcode pattern from REvil's string decoding function (outlined in red in Figure 2)" → "Described" | CORRECT | It is a descriptive reference to an opcode pattern without providing a complete, unique signature for automated detection. |
| 22 | "REvil" → "Mentioned" | CORRECT | The observable is a malware family name mentioned conceptually rather than as a precise artifact. |
| 23 | "GandCrab" → "Mentioned" | CORRECT | It is simply a malware family name, a conceptual reference not intended for direct automated detection. |
| 24 | "REvil's decryptor" → "Mentioned" | CORRECT | This is a reference to a malware component and does not represent a unique, actionable detection string. |

| 25 | "jpg\n\nFigure 3. Example C2 server URLs. (Source: Secureworks)" → Described | CORRECT | The snippet is a figure caption and code block that is descriptive rather than providing a complete, unique indicator for direct matching. |
| 26 | "| Values for first subpath   Values for second subpath   Extensions for resource | ... Table 1, Hard-coded values for REvil and GandCrab C2 URLs." → Described | CORRECT | The table captures partial URL components that require additional context to form a detection rule, making the “Described” rank appropriate. |

| 27 | d:\code\csrc\!1\new\_a\gcfin\bin\debug\rwenc\_exe\_x86\_debug.pdb → Actionable | CORRECT | The file path is complete and uniquely matchable for detection. |
| 28 | D:\core\src\common\debug.c → Actionable | CORRECT | The full file path is a concrete identifier that can be directly used in detection rules. |
| 29 | 1536 → Described | CORRECT | The numeric version value is ambiguous on its own and requires additional context, making it non‑actionable. |
| 30 | 0x600 → Described | CORRECT | The hexadecimal version value is a contextual, non‑unique detail that is not directly actionable. |

| 31 | REvil → Mentioned | CORRECT | "REvil" is a threat actor name referenced conceptually and not directly observable. |
| 32 | GandCrab → Mentioned | CORRECT | "GandCrab" is a threat actor name mentioned in the report, making it non‑actionable for telemetry detection. |

| 33 | GOLD GARDEN → Actionable | INCORRECT — should be "Mentioned" because a threat actor name is a conceptual reference that isn’t directly searchable for automated detection. | Threat actor names, unlike unique identifiers (IPs, hashes, etc.), are not actionable IOCs.  |

| 34 | REVIL → Mentioned | CORRECT | The value is a generic reference to a malware family name, which is only conceptually referenced and not actionable for automated detection. |

| 35 | bed6fc04aeb785815744706239a1f243 → Actionable | CORRECT | The MD5 hash is a complete, unique identifier that can be directly matched. |
| 36 | 3d0649b5f76dbbff9f86b926afbd18ae028946bf → Actionable | CORRECT | The SHA1 hash is complete and unique, making it directly actionable. |
| 37 | 3641b09bf6eae22579d4fd5aae420476a134f5948966944189a70afd8032cb45 → Actionable | CORRECT | The SHA256 hash is fully specified and unique, which qualifies it as actionable. |
| 38 | CVE-2018-8453 → Mentioned | CORRECT | Vulnerability identifiers like CVE numbers are conceptual references that require enrichment rather than direct detection. |
| 39 | RunAs → Described | CORRECT | “RunAs” is a common command name lacking the specificity needed for direct, low false‐positive detection. |
| 40 | exp → Described | CORRECT | The short parameter “exp” is ambiguous and not unique enough to serve as a directly actionable indicator. |
| 41 | GetKetboardLayoutList → Described | CORRECT | As a function call reference, it is descriptive but not sufficiently unique for automated detection. |
| 42 | SOFTWARE\!test → Actionable | CORRECT | This registry key string is complete and unique, making it directly matchable in detection systems. |
| 43 | UID → Mentioned | CORRECT | “UID” is a generic placeholder variable that isn’t actionable for direct detection. |
| 44 | KEY → Mentioned | CORRECT | Similar to “UID,” the placeholder “KEY” is generic and does not serve as an indicator for automated matching. |
| 45 | prc → Described | CORRECT | The configuration key “prc” is too ambiguous to be directly actionable, thus it is described. |
| 46 | wfld → Described | CORRECT | The key “wfld” is non‑unique and serves as a descriptive configuration parameter rather than an actionable indicator. |
| 47 | explorer.exe → Described | CORRECT | Although it names an executable, “explorer.exe” is common and not sufficiently unique for targeted detection. |
| 48 | Image text → Mentioned | CORRECT | The term refers to generic ransom note text and does not offer a concrete, matchable indicator.

| 49 | `65aa793c000762174b2f86077bdafaea` → `Actionable` | CORRECT | This is a complete file hash (MD5) that can be directly matched. |
| 50 | `95a21e764ad0c98ea3d034d293aee5511e7c8457` → `Actionable` | CORRECT | The observable is a complete file hash (SHA1) that is uniquely actionable. |
| 51 | `f0c60f62ef9ffc044d0b4aeb8cc26b971236f24a2611cb1be09ff4845c3841bc` → `Actionable` | CORRECT | A full SHA256 file hash that can be used directly in detections. |
| 52 | `CVE-2018-8453` → `Mentioned` | CORRECT | CVE identifiers are conceptually referenced and are not directly used for automated detection. |
| 53 | `SOFTWARE\recfg` → `Actionable` | CORRECT | The registry key is fully specified, enabling direct matching in detection systems. |
| 54 | `2abff29b4d87f30f011874b6e98959e9` → `Actionable` | CORRECT | This MD5 file hash is complete and uniquely identifiable for actionable detection. |
| 55 | `9d1b61b1cba411ee6d4664ba2561fa59cdb0732c` → `Actionable` | CORRECT | A complete SHA1 file hash that is fully actionable. |
| 56 | `a88e2857a2f3922b44247316642f08ba8665185297e3cd958bbd22a83f380feb` → `Actionable` | CORRECT | The SHA256 file hash is complete and can be directly used for detection. |
| 57 | `-nolan` → `Actionable` | CORRECT | The command-line argument is an exact string that can be leveraged in detection rules. |
| 58 | `4af953b20f3a1f165e7cf31d6156c035` → `Actionable` | CORRECT | This MD5 file hash is complete and actionable. |
| 59 | `b859de5ffcb90e4ca8e304d81a4f81e8785bb299` → `Actionable` | CORRECT | A complete SHA1 file hash that is directly matchable. |
| 60 | `89d80016ff4c6600e8dd8cfad1fa6912af4d21c5457b4e9866d1796939b48dc4` → `Actionable` | CORRECT | The provided SHA256 file hash is complete and uniquely actionable. |
| 61 | `sub_key` → `Actionable` | INCORRECT — should be "Described" because the registry value "sub_key" is too generic and lacks a fully-qualified path for direct matching. | Ambiguity in the registry value prevents it from being directly actionable. |
| 62 | `3cae02306a95564b1ffff4ea45a7dfc00` → `Actionable` | CORRECT | A complete MD5 hash that is clearly actionable. |
| 63 | `0ce2cae5287a64138d273007b34933362901783d` → `Actionable` | CORRECT | The SHA1 hash is complete and can be used directly in a detection rule. |
| 64 | `78fa32f179224c46ae81252c841e75ee4e80b57e6b026d0a05bb07d34ec37bbf` → `Actionable` | CORRECT | This is a full SHA256 file hash, making it directly matchable for detection. |
| 65 | `-path` → `Actionable` | CORRECT | The command-line argument is exact and actionable as is. |
| 66 | `SOFTWARE\QtProject\OrganizationDefaults` → `Actionable` | CORRECT | A fully specified Windows Registry Key that is directly actionable. |
| 67 | `6e3efb83299d800edf1624ecbc0665e7` → `Actionable` | CORRECT | This MD5 file hash is complete and uniquely identifiable for detection. |
| 68 | `0bd22f204c5373f1a22d9a02c59f69f354a2cc0d` → `Actionable` | CORRECT | A complete SHA1 file hash that can be directly matched in detection systems. |
| 69 | `2ca64feaaf5ab6cf96677fbc2bc0e1995b3bc93472d7af884139aa757240e3f6` → `Actionable` | CORRECT | The SHA256 file hash is fully specified and actionable. |
| 70 | `SOFTWARE\GitForWindows` → `Actionable` | CORRECT | The registry key is complete and can be directly used in detection rules. |

===== ranking_results/ranking_results1.txt =====
md file name: /content/validation/dragonfly_threat_against_western_energy_suppliers.md

| 1 | `66 Dragonfly` → `Mentioned` | CORRECT | It's a threat actor name mentioned in the report, not a unique technical indicator. |
| 2 | `SEV` → `Mentioned` | CORRECT | The string is ambiguous and lacks specific context for actionable detection. |
| 3 | `RRW` → `Mentioned` | CORRECT | The standalone string is ambiguous and not sufficiently detailed for detection. |
| 4 | `150` → `Mentioned` | CORRECT | The numeric value is ambiguous with unclear context, preventing concrete detection use. |

| 5 | Spam campaign → Mentioned | CORRECT | It’s a generic tactic description that isn’t specific enough for direct detection. |
| 6 | Watering hole attacks → Mentioned | CORRECT | It describes a general attack technique, making it non‑unique and conceptual. |
| 7 | Trojanized software → Mentioned | CORRECT | It’s a broad descriptor and not unique enough for actionable detection. |
| 8 | Lightsout exploit kit → Actionable | CORRECT | It’s a specific exploit kit name that can be matched directly for detection. |
| 9 | Registry modifications → Mentioned | CORRECT | It refers to a generic class of changes and isn’t uniquely identifiable. |
| 10 | Trojan.Karagany → Actionable | CORRECT | It’s a specific malware indicator that can be directly used in detection. |

| 11 | Dragonfly → Mentioned | Validator output CORRECT | Threat actor names are conceptual and not directly actionable. |
| 12 | Energetic Bear → Mentioned | Validator output CORRECT | As an alternate threat actor name, it remains a conceptual reference not suited for automated detection. |

| 13 | `Lightsout exploit kit` → `Actionable` | INCORRECT — should be "Described" because it is a generic malware kit name that, while specific in context, is not a unique, concrete artifact capable of low false‑positive automated matching. | The name requires enrichment and does not itself serve as a complete technical indicator. |
| 14 | `Hello exploit kit` → `Actionable` | INCORRECT — should be "Described" because it is merely the family name of an exploit kit and is ambiguous for direct detection without additional context. | It’s a descriptive label rather than a standalone, actionable indicator. |
| 15 | `Backdoor.Oldrea` → `Actionable` | INCORRECT — should be "Described" because it is a malware family name that is descriptive rather than a unique, complete identifier that can be directly matched in detection rules. | As a generic name, it requires additional enrichment to be used as a precise indicator.

| 16 | Backdoor.Oldrea → Actionable | CORRECT | It is a complete, unique malware family name that can be directly matched in detection rules. |
| 17 | Havex → Actionable | CORRECT | The alias "Havex" is specific and unambiguous within the malware context, allowing precise detection. |
| 18 | Energetic Bear RAT → Actionable | CORRECT | This malware family name is a complete identifier, making it actionable for automated detection. |
| 19 | Trojan.Karagany → Actionable | CORRECT | The string uniquely identifies the malware tool, meeting criteria for an actionable indicator. |

| 20 | The account → Described | CORRECT | The email subject is generic and ambiguous, fitting the criteria for “Described.” |
| 21 | Settlement of delivery problem → Described | CORRECT | The email subject is non-unique and ambiguous, making “Described” an appropriate classification. |

| 22 | Oldrea → Actionable | INCORRECT — should be "Described" because the payload name is an ambiguous malware family label rather than a complete, unique technical indicator. | It’s merely a name seen in logs, not a concrete artifact like a file path or hash. |
| 23 | Karagany → Actionable | INCORRECT — should be "Described" because as a malware payload name it lacks the specificity needed for direct automated detection. | The string is a generic malware family label that requires additional contextual enrichment. |
| 24 | Hello exploit kit → Actionable | INCORRECT — should be "Described" because the exploit kit’s name is a descriptive label and not a concrete artifact for detection. | It’s a contextual identifier that isn’t unique enough to drive low–false‑positive automated rules. |
| 25 | Lightsout → Actionable | INCORRECT — should be "Described" because the exploit name is ambiguous and insufficient by itself for precise automated matching. | It’s a generic reference that would need further enrichment before being used as a detection indicator. |

| 26 | Trojanized software → Mentioned | CORRECT | The term is generic and lacks a unique signature, making it non-actionable. |
| 27 | Dragonfly → Mentioned | CORRECT | As the name of a threat actor group, it is a generic reference not directly tied to a concrete detection signature. |
| 28 | legitimate software packages → Mentioned | CORRECT | The phrase is a broad, generic descriptor that cannot be directly used for automated detection. |
| 29 | ICS equipment providers → Mentioned | CORRECT | It is a general reference to a category of vendors without specific identifiers for detection. |
| 30 | software bundles → Mentioned | CORRECT | The term is ambiguous and describes a generic collection, lacking precise attributes for actionable detection. |
| 31 | websites → Mentioned | CORRECT | The reference is non-specific, referring broadly to online locations without providing actionable details. |

| 32 | `Dragonfly group` → `Mentioned` | CORRECT | The observable is a threat actor's name used conceptually rather than as a unique technical indicator. |

| 33 | Backdoor.Oldrea → Actionable | CORRECT | It is a distinct malware family name that can be directly matched for detection. |
| 34 | Trojan.Karagany → Actionable | CORRECT | The indicator is a complete, unique malware family identifier suitable for automated detection. |
| 35 | Lightsout → Actionable | CORRECT | Despite being a single word, in this CTI context it uniquely identifies an exploit kit and is actionable. |
| 36 | Hello → Described | CORRECT | The name is generic and ambiguous in isolation, requiring additional context before detection. |
| 37 | Trojan.Karagany!gen1 → Actionable | CORRECT | Its specific variant notation makes it a unique, concrete indicator that can drive detection. |

| 38 | "Lightsout exploit kit" → "Mentioned" | CORRECT | The name is a generic reference to an exploit kit and isn’t a unique, matchable indicator. |
| 39 | "| A number of sites that use content<br>management systems were exploited and<br>an iframe was used in order to redirect<br>visitors to sites hosting the Lightsout<br>exploit kit.<br>An example of an injected iframe can be<br>seen in figure 7. | <script type=\"text/javascript\"><br>var WWCPou=document.createElement(\"iframe\");<br>WWCPou.height=1;<br>WWCPou.width=1:<br>WWCPou.style.visibility=\"hidden\";<br>WWCPou.src=\" | …" → "Actionable" | INCORRECT — should be "Described" because the block is an illustrative, formatted example not intended as a unique, directly matchable artifact. |
| 40 | "| Table 1. Examples of file names for one implementation of the Lightsout exploit kit | …" → "Described" | CORRECT | The table presents a set of examples and details that require contextual enrichment rather than serving as a stand‐alone indicator. |
| 41 | "Hello exploit kit" → "Mentioned" | CORRECT | The alternate kit name is a generic reference without unique properties suitable for direct detection. |
| 42 | "```
[
dtsrc.php?a=[EK__DETERMINED__PARAMETER]
```" → "Described" | INCORRECT — should be "Actionable" because the triple-backtick–wrapped snippet is a complete, exact code fragment that can be directly matched. | 
| 43 | "[EK_DETERMINED_PARAMETER]" → "Described" | CORRECT | As a placeholder variable, it is ambiguous and requires additional context before becoming actionable. |
| 44 | "dwd" → "Described" | CORRECT | The short URL parameter value is too ambiguous on its own and needs context, making it descriptive rather than independently actionable. |
| 45 | "dwe" → "Described" | CORRECT | Like "dwd", this brief parameter value is ambiguous and serves as contextual detail rather than a unique indicator. |
| 46 | "d" → "Mentioned" | CORRECT | A single-letter suffix is inherently generic and only serves as a conceptual reference. |
| 47 | "e" → "Mentioned" | CORRECT | The single-character value is too generic to be used for direct, automated detection. |
| 48 | "| Table 2. Lightsout exploit kit parameters | …" → "Described" | CORRECT | The table’s parameter listings provide contextual information that is descriptive and not independently actionable. |

| 49 | `Backdoor.Oldrea` → `Described` | CORRECT | Malware family names, while useful for context, are not direct telemetry artifacts. |
| 50 | `havex` → `Actionable` | CORRECT | The exact marker string is present and can directly be used in detection rules. |

| 51 | %Temp%\qln.dbx → Actionable | CORRECT | This file path is a complete and specific indicator that can be directly matched, even with an environment variable. |
| 52 | %System%\TMPprovider038.dll → Actionable | CORRECT | The DLL file path provided is fully specified and unique, making it directly actionable for detection. |

| 53 | `HKEY CURRENT USER\Software\Microsoft\Windows\CurrentVersion\Run\"TmProvider\"` → `Actionable` | CORRECT | The registry key is a complete, unique identifier that can be directly used for detection. |
| 54 | `HKEY LOCAL MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run\"TmProvider\"` → `Actionable` | CORRECT | This complete registry key path is unambiguous and actionable for detection purposes. |
| 55 | `HKEY\_LOCAL\_MACHINE\SOFTWARE\Microsoft\InternetRegistry\"fertger\"` → `Actionable` | CORRECT | Despite the formatting with underscores, it represents a complete registry key that is directly actionable. |
| 56 | `HKEY\_LOCAL\_MACHINE\SOFTWARE\Microsoft\Internet Explorer\InternetRegistry` → `Actionable` | CORRECT | It is a fully specified registry key path that can be reliably used in detection rules. |

| 57 | `Backdoor.Oldrea` → `Mentioned` | CORRECT | It is a malware family name used for attribution rather than as a precise, unique detection indicator. |
| 58 | `explorer.exe` → `Described` | CORRECT | Although complete, it is a common Windows executable and too generic for unique automated detection. |

| 59 | toons.freesexycomics.com → Actionable | CORRECT | The domain name is complete and specific, making it directly matchable in detection rules. |
| 60 | http://toons.freesexycomics.com/wp08/wp-includes/dtcla.php?id=285745296322896178920098FD80-20&v1=038&v2=17 0393861&q=5265882854508EFCF958F979E4 → Actionable | CORRECT | The URL is fully specified including query parameters, allowing for precise detection. |
| 61 | Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/525.19 (KHTML, like Gecko) Chrome/1.0.154.36 Safari/525.19 → Actionable | CORRECT | The complete user agent string is extracted exactly and can be directly used in filtering rules. |

| 62 | havexQLpoOTFBWSZTWWYvDIOBOsD…→ Actionable | CORRECT | The payload is a complete encoded artifact enclosed in unique tags, which can be directly matched for detection. |
| 63 | 1312312 → Actionable | CORRECT | The XOR key is provided as an exact string that can be used directly in detection rules. |
| 64 | RSA-2048 → Mentioned | CORRECT | It merely names an encryption algorithm, offering no unique artifact for automated detection. |
| 65 | base64 → Mentioned | CORRECT | It refers to the standard encoding method rather than a specific, actionable string. |
| 66 | bzip2 → Mentioned | CORRECT | It only denotes the compression algorithm used, which is generic and non‑unique. |
| 67 | reverse xor → Mentioned | CORRECT | It describes a deobfuscation technique without providing a concrete, matchable indicator. |
| 68 | Izma algorithm → Mentioned | CORRECT | Although it names a custom algorithm, it is a generic descriptor not suited for direct detection. |
| 69 | MZ → Mentioned | CORRECT | "MZ" is a common executable header and too generic to serve as a unique, actionable indicator. |
| 70 | Apache/1.3.37 (Unix) → Mentioned | CORRECT | The server banner is a generic descriptor that does not provide a unique, actionable artifact. |

| 71 | Backdoor.Oldrea → Actionable | INCORRECT — should be "Described" because a malware family name is a generic label that requires additional context for detection. | Malware family names are not unique artifacts for automated matching. |
| 72 | Tmpprovider → Actionable | CORRECT | It is a specific malware component name that can be matched exactly. |
| 73 | InstallerFormDII → Actionable | CORRECT | It is a complete and distinct identifier for the malware component. |
| 74 | RunExeCmdSingle → Actionable | CORRECT | This complete component name is unique enough to use in automated detection. |
| 75 | DropCommandsCmd → Actionable | CORRECT | The module's command name is specific and can be implemented in a detection rule. |
| 76 | GetFileCmd → Actionable | CORRECT | It is a distinct module name that is directly searchable. |
| 77 | runDII → Actionable | CORRECT | The exported function name is a full identifier that can be matched as-is. |
| 78 | outlook.nk2 → Actionable | INCORRECT — should be "Described" because the file name is common and ambiguous for reliable detection. | Outlook.nk2 is a standard file used by Outlook and not a unique indicator of compromise. |

| 79 | Trojan.Karagany → Described | CORRECT | The malware family name is a descriptive indicator and isn’t specific enough for automated detection. |
| 80 | UPX → Mentioned | CORRECT | As a common binary packer technology, UPX is generically referenced and not uniquely actionable. |
| 81 | Aspack → Mentioned | CORRECT | Being a generic packer name, Aspack is conceptually noted rather than serving as a concrete, actionable indicator. |
| 82 | neosphere → Actionable | CORRECT | The decryption key is provided as a complete, unique string that can be directly used for detection. |
| 83 | WSASend → Mentioned | CORRECT | This common API function is referenced generically and does not offer unique detection value. |
| 84 | send → Mentioned | CORRECT | The overly generic API name “send” is conceptually mentioned and lacks the specificity needed for actionable detection. |

| 85 | Microsoft WCF services → Described | CORRECT | This generic folder name, used by Trojan.Karagany in AppData, is ambiguous and fits a descriptive category rather than a unique detection indicator. |
| 86 | Broker services → Described | CORRECT | A non‐unique folder name that relies on additional context, making it appropriately classified as described. |
| 87 | Flash Utilities → Described | CORRECT | A generic folder name that is ambiguous by itself and fits the described category. |
| 88 | Media Center Programs → Described | CORRECT | A common folder name whose generic nature requires supplemental context for detection. |
| 89 | Policy Definitions → Described | CORRECT | Its generic nature makes this folder name descriptive rather than uniquely actionable. |
| 90 | Microsoft Web Tools → Described | CORRECT | A common folder name that does not provide enough unique attributes for direct automated matching. |
| 91 | Reference Assemblies → Described | CORRECT | This folder name is ambiguous and generic, making it suitable for a described rank. |
| 92 | Analysis Services → Described | CORRECT | As a common folder name, it is ambiguous and thus is properly classified as described. |
| 93 | InstallShield Information → Described | CORRECT | Although specific, it remains a generic folder name used by the trojan, making it descriptive. |
| 94 | IIS SQL Server → Described | CORRECT | Despite its specific wording, the folder name is ambiguous without additional context, so it is described. |
| 95 | Diagnostics → Described | CORRECT | A generic folder name that fits the described category due to its ambiguity. |
| 96 | NTAPI Performance → Described | CORRECT | Lacking unique detection markers, this generic folder name is appropriately classified as described. |
| 97 | WPF Platform → Described | CORRECT | A common folder name that is ambiguous on its own, thus earning a described rank. |
| 98 | SearchIndexer.exe → Described | CORRECT | As a common executable name that appears in many legitimate contexts, it is best classified as described. |
| 99 | ImeBroker.exe → Described | CORRECT | This executable name is ambiguous due to potential legitimate usage, making the described rank appropriate. |
| 100 | fsutil.exe → Described | CORRECT | A well‑known Windows utility whose generic nature makes it ambiguous for automated detection. |
| 101 | PnPutil.exe → Described | CORRECT | A standard executable name; its common legitimate presence warrants a described classification. |
| 102 | BdeUlSrv.exe → Described | CORRECT | Although slightly less common, this complete executable name remains ambiguous and thus described. |
| 103 | WinSAT.exe → Described | CORRECT | A recognized Windows utility name that is ambiguous in isolation, fitting a described rank. |
| 104 | pwNative.exe → Described | CORRECT | A generic executable name without distinctive uniqueness, making the described rank fitting. |
| 105 | SnippingTool.exe → Described | CORRECT | A common system file name that is ambiguous when isolated, thus appropriately described. |
| 106 | DFDWizard.exe → Described | CORRECT | This standard‐looking executable name is generic enough to be classified as described. |
| 107 | PrintBrmEngine.exe → Described | CORRECT | Despite being complete, it is a conventional executable name that may trigger false positives, so described fits. |
| 108 | WbemMonitor.exe → Described | CORRECT | A typical system file name that is ambiguous without context, making the described rank appropriate. |
| 109 | dxpserver.exe → Described | CORRECT | Its standard structure and potential legitimate use make it ambiguous, thus described is correct. |
| 110 | PowerMng.exe → Described | CORRECT | A generic executable name that is not unique enough for direct detection, so described is fitting. |
| 111 | err.log[DIGITS] → Described | CORRECT | The placeholder “[DIGITS]” denotes a variable pattern, meaning it requires context and is rightly described. |
| 112 | PnPutil .exe → Described | INCORRECT — should be "Actionable" because the extra space creates a unique, exact string that can be directly matched with low false positives. | The anomalous spacing distinguishes it from the normal "PnPutil.exe", making it a precise indicator for automated detection. |
| 113 | Form.api → Actionable | CORRECT | This unusual file name is unique and complete, allowing for direct matching in detection rules. |
| 114 | inact.api → Actionable | CORRECT | Its distinctiveness and exactness render it directly actionable for automated detection. |
| 115 | prog.cer → Actionable | CORRECT | The specific certificate file name is unique and can be matched precisely, making it actionable. |
| 116 | Cent.api → Actionable | CORRECT | A distinctive and complete file name that is well‑suited for actionable detection. |
| 117 | ie.pdb → Actionable | CORRECT | This uncommon file name is unique enough to allow for a precise, automated match. |
| 118 | C:\ProgramData\Mail\MailAg\gl → Actionable | CORRECT | A complete and unique file path that provides a clear detection indicator. |

119 | GET /en-us/default.aspx HTTP/1.1
  Accept-Encoding: gzip, deflate
  Content-Type: application/x-www-form-urlencoded
 Host: microsoft.com
  Cookie: MC1=V=3&GUID=<32 character guid>
  Connection: Keep-Alive
  Cache-control: no-cache → Actionable | CORRECT | A complete HTTP request block can be directly used to construct a detection rule (Rule 1).

120 | microsoft.com → Actionable | CORRECT | Domain names are complete identifiers that can be matched exactly in detection systems.

121 | http://microsoft.com/en-us/default.aspx → Actionable | CORRECT | A full URL is a unique, concrete indicator suitable for automated detection.

122 | MC1=V=3&GUID=<32 character guid> → Described | CORRECT | The inclusion of a placeholder (“<32 character guid>”) implies ambiguity, requiring further context before it can be directly actionable.

| 123 | POST /geo/productid.php HTTP/1.1
  Content-Type: application/x-www-form-urlencoded
  Host: adobe.com
  identifiant=51032  175129256364 → Actionable | CORRECT | This full HTTP request text is a complete, exact string that can be directly matched in detection rules. |
| 124 | /geo/productid.php → Actionable | CORRECT | The URL path is complete and specific enough to be used directly in detection without ambiguity. |
| 125 | adobe.com → Actionable | CORRECT | A fully qualified domain name is a concrete indicator that can be matched exactly in various detection systems. |
| 126 | identifiant=51032  175129256364 → Actionable | CORRECT | The extracted HTTP parameter is a complete string from the request body, making it suitable for exact-match detection. |

| 127 | ```POST /check  value.php HTTP/1.1
  User-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; .NET CLR
  2.0.50727)
  Host: 93.188.161.235
  identifiant=51032  1799883375637&version=i2pver
``` → Actionable | CORRECT | The observable is a full HTTP request sample enclosed in a code fence, which is directly actionable. |
| 128 | 93.188.161.235 → Actionable | CORRECT | A complete IPv4 address is a unique, exact artifact that supports automated matching. |
| 129 | Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; .NET CLR 2.0.50727) → Described | CORRECT | This is a common user‐agent string lacking uniqueness, so it’s appropriately classified as Described. |
| 130 | identifiant=51032  1799883375637&version=i2pver → Described | INCORRECT — should be "Actionable" because the complete POST payload string is a unique, exact artifact that can be matched directly. | Despite being part of POST data, the exact and uncommon parameter string qualifies as actionable per the “complete identifier” rule. |
| 131 | value.php → Described | CORRECT | A lone filename like "value.php" is ambiguous and not uniquely indicative, making the Described rank appropriate. |

| 132 | HTTP/1.1 200 OK → Mentioned | CORRECT | This standard HTTP status line is a generic text string and isn’t unique enough to serve as an automated detection indicator. |
| 133 | Date: Tue, 28 Jan 2014 05:59:58 GMT\nVary: Accept-Encoding\nContent-Length: 324\nContent-Type: text/html\nX-Powered-By: PHP/5.3.10-1ubuntu3.9\nVia: 1.1 host.alexsieff.com → Mentioned | CORRECT | The complete HTTP header block is a typical extracted snippet that is too common to be used directly for precise detection. |
| 134 | work:3|downexec [\nwork:5|downexec [\nwork:7|downexec [\nwork:103|downexec [\nwork:118|downexec [ → Actionable | CORRECT | The full command block is a unique, complete string that can be directly matched in detection rules. |
| 135 | identifiant=[OS VERSION]_[DERIVED NUMBER] → Described | CORRECT | Being a template with placeholders, it lacks the concrete details needed for direct automated detection. |
| 136 | Mozilla/17.0 (compatible; MSIE 8.0; Windows NT 6.1; .NET CLR 2.0.50727; .NET CLR 3.5.30729) → Actionable | CORRECT | This complete User-Agent string, as observed in C&C traffic, is specific enough to be used in detection rules. |
| 137 | Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; .NET CLR 2.0.50727; .NET CLR 3.5.30729) → Actionable | CORRECT | Although such User-Agent strings can appear in benign traffic, its observed use in C&C requests makes the exact string actionable as an indicator. |

| 138 | pdump.jpg → Actionable | CORRECT | The file name is specific and can be matched exactly. |
| 139 | \ProgramData\Mail\MailAg\pwds.txt → Actionable | CORRECT | The file path is fully specified and thus directly actionable. |
| 140 | vaultcli.dll → Actionable | CORRECT | This complete DLL name is a specific indicator suitable for direct matching. |
| 141 | fl.txt → Actionable | CORRECT | The file name is exact and unambiguous for detection purposes. |
| 142 | \ProgramData\Mail\MailAg\fls.txt → Actionable | CORRECT | The explicit file path can be directly used in detection rules. |
| 143 | tl.jpg → Actionable | CORRECT | The specific file name is actionable as it is a complete identifier. |
| 144 | tasklist → Described | CORRECT | "Tasklist" is a common Windows utility and its use isn’t unique enough for automated detection. |
| 145 | \*pass\*\* → Described | CORRECT | The wildcard search pattern is inherently ambiguous and fits the "Described" category. |
| 146 | \*secret\*\* → Described | CORRECT | As a wildcard pattern, it is not uniquely actionable without further context. |
| 147 | shot.jpg → Actionable | CORRECT | The file name is a complete and precise artifact applicable for detection. |
| 148 | \ProgramData\Mail\MailAg\shot.png → Actionable | CORRECT | The exact file path is fully specified and therefore actionable. |

| 149 | (Table block of exploit site data) → Described | CORRECT | The table is a compilated context block with redacted details that require further extraction before yielding specific indicators for automated detection. |

| 150 | "[^=]\\*=(dw[de]|fn[de])\\$" → Actionable | CORRECT | The regex is a complete, precise detection pattern that can be directly used in automated detection.

| 151 | `### Backdoor.Oldrea...` → `Described` | CORRECT | The observable is a complete table capture that describes backdoor C&C server hostnames without providing a single, directly actionable indicator.  |

| 152 | `\.php\?id=[0-9A-F]{28}.{0,5}&v1=[0-9]{1,5}&v2=[0-9]{1,10}&q=[0-9A-F]{20}` → Actionable | CORRECT | The regex pattern is detailed and specific enough to be directly used in detection rules. 

| 153 | TMPprovider[0-9]{3}\.dll → Described | INCORRECT — should be "Actionable" because the regex specifies a complete, unique file naming pattern that can be directly used in detection. | The regex is specific and unambiguous, making it immediately actionable for rule-based detection in endpoint logs. |
| 154 | sy[ds]main\.dll → Described | INCORRECT — should be "Actionable" because the regex exactly defines the file names to be matched and can be directly used in automated detection. | The regex clearly delineates the two possible file names, providing a precise indicator suitable for detection rules. |

| 155 | HKEY\_LOCAL\_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run\"TmProvider" → Actionable | CORRECT | The registry key is a complete, unique artifact that can be directly used for detection. |
| 156 | HKEY\_CURRENT\_USER\Software\Microsoft\Windows\CurrentVersion\Run\"TmProvider" → Actionable | CORRECT | The registry key is fully specified and unique, making it directly actionable for detection. |

| 157 | "91.203.6.71" → Actionable | CORRECT | The IPv4 address is a complete, unique indicator that is directly actionable. |
| 158 | "93.171.216.118" → Actionable | CORRECT | The IPv4 address is fully specified and can be directly used for detection. |
| 159 | "93.188.161.235" → Actionable | CORRECT | The IPv4 address is a precise indicator with unique identification properties. |

| 160 | identifiant=[OS VERSION]\_[DERIVED NUMBER] → Described | CORRECT | The value is a format string with placeholders, indicating variable content that cannot be directly matched. |
| 161 | C&C server → Mentioned | CORRECT | It is a generic term without specific actionable details, making the "Mentioned" rank appropriate. |

| 162 | filename=[FILE NAME]&identifiant=[INFO DERIVED FROM OS]&fichier=[ENCODED DATA FROM FILE] → Described | CORRECT | The observable is a template with placeholders rather than a complete, actionable string. |

| 163 | ```\nKaragany Yara rule:\n      private rule isPE\n      {\n                   condition:\n                         uint16(0) == 0x5A4D and uint32(0x3c)) == 0x00004550\n      }\n      rule Trojan  Karagany\n      {\n                   meta:\n                         alias = "Dreamloader"\n                   strings:\n                         $s1 = "neosphere" wide ascii\n                         $s2 = "1000000000000051200" wide ascii\n                         $v1 = "&fichier" wide ascii\n                         $v2 = "&identifiant" wide ascii\n                         $c1 = "xmonstart" wide ascii\n                         $c2 = "xmonstop" wide ascii\n                         $c3 = "xgetfile" wide ascii\n                         $c4 = "downadminexec" wide ascii\n                         $c5 = "xdiex" wide ascii\n                         $c6 = "xrebootx" wide ascii\n                   condition:\n                         isPE and (($s1 and $s2) or ($v1 and $v2) or (any of ($c*)))\n      }\n``` → Actionable | CORRECT | Wrapped in a code fence, it is a complete, unique YARA rule that can be directly used for detection. |
| 164 | 0x5A4D → Actionable | CORRECT | This complete hex signature is a unique value (the MZ header) and directly actionable. |
| 165 | 0x00004550 → Actionable | CORRECT | A full, unique hex signature representing the PE header, making it actionable. |
| 166 | neosphere → Actionable | CORRECT | A literal YARA string that is complete and can be used directly for detection. |
| 167 | 1000000000000051200 → Actionable | CORRECT | This unique numeric string from the YARA rule is a complete detection artifact. |
| 168 | &fichier → Actionable | CORRECT | The literal string from the YARA rule is specific enough for direct matching. |
| 169 | &identifiant → Actionable | CORRECT | A complete, unique string from the YARA rule, making it directly actionable. |
| 170 | xmonstart → Actionable | CORRECT | Fully defined in the YARA rule, this string is actionable for detection purposes. |
| 171 | xmonstop → Actionable | CORRECT | As a complete and unique literal from the YARA rule, this string is directly actionable. |
| 172 | xgetfile → Actionable | CORRECT | The fully provided string from the YARA rule is unique and can be used for detection. |
| 173 | downadminexec → Actionable | CORRECT | A complete detection string from the YARA rule that is uniquely actionable. |
| 174 | xdiex → Actionable | CORRECT | Fully provided and unique as a literal from the YARA rule, making it actionable. |
| 175 | xrebootx → Actionable | CORRECT | This complete, unique string from the YARA rule is directly actionable for detection. |

| 176 | `www.symantec.com` → `Actionable` | CORRECT | It is a complete URL that can be matched as-is in detection rules. |
| 177 | `go.symantec.com/socialmedia` → `Actionable` | CORRECT | It is a full URL path, uniquely identifiable for automated matching. |
| 178 | `+1 (650) 527-8000` → `Actionable` | CORRECT | It is a complete phone number that can be exactly matched. |
| 179 | `1 (800) 721-3934` → `Actionable` | CORRECT | It is a complete phone number that qualifies for direct detection. |
| 180 | `@threatintel` → `Actionable` | CORRECT | It is a unique Twitter handle that serves as an exact identifier.

md file name: /content/validation/files.md

| 1 | Schneider Electric → Mentioned | CORRECT | Organization names are generic references and cannot be uniquely detected. |
| 2 | United States Department of Energy → Mentioned | CORRECT | It is a government agency name, a generic reference not suited for automated detection. |
| 3 | Mandiant → Mentioned | CORRECT | As a cybersecurity company name, it is conceptually referenced and not a unique detection artifact. |
| 4 | APT (Advanced Persistent Threat) Cyberattack Tools/Framework → Mentioned | CORRECT | It is a descriptive, conceptual reference to a cyberattack tool framework rather than a concrete identifier. |
| 5 | Programmable Logic Controllers (PLCs) → Mentioned | CORRECT | The term describes a category of devices and is too generic to be actionable for detections. |

| 6 | INCONTROLLER → Actionable | INCORRECT — should be "Described" because a tool's name is a label rather than a uniquely matchable indicator. | Tool names do not provide a precise, low false‐positive artifact for automated detection. |
| 7 | PIPEDREAM → Actionable | INCORRECT — should be "Described" because a generic tool name is ambiguous as a direct detection indicator. | As with other tool names, it functions as a descriptive label rather than a unique, actionable observable. |
| 8 | Modbus frame → Mentioned | CORRECT | It is a generic reference to protocol frames and lacks specificity for direct automated detection. |
| 9 | PLC → Mentioned | CORRECT | The term is a general reference to industrial control hardware and is not directly actionable. |
| 10 | OPC-UA client → Mentioned | CORRECT | It generically describes a role in network communications rather than a unique artifact. |
| 11 | OPC-UA server → Mentioned | CORRECT | It is a descriptive term for a server role and cannot be uniquely matched for automated detection. |

| 12 | `TM221` → `Described` | CORRECT | It is a specific device model reference that describes the targeted ICS asset without being a unique, directly matchable indicator. |
| 13 | `TM241/TM251` → `Described` | CORRECT | Combined device model identifiers are ambiguous and thus serve as a descriptive reference rather than an actionable string. |
| 14 | `TM258/LMC058` → `Described` | CORRECT | Listing two models in one observable makes it descriptive and ambiguous for direct automated matching. |
| 15 | `LMC078` → `Described` | CORRECT | It is a singular product model designation used descriptively, not as a unique actionable indicator. |
| 16 | `TM238` → `Described` | CORRECT | The product model identifier is used in a descriptive context without sufficient uniqueness for direct detection. |
| 17 | `PacDrive LMC` → `Described` | CORRECT | This product family name is referenced descriptively in the report and is not a unique, matchable artifact. |
| 18 | `Modbus` → `Described` | INCORRECT — should be "Mentioned" because it is a generic protocol reference that lacks specificity for automated detection. | As a widely used industrial communication protocol, "Modbus" functions as a conceptual reference rather than a precise indicator. |
| 19 | `CODESYS` → `Described` | CORRECT | The observable names a PLC programming environment, serving as a descriptive reference rather than a directly actionable string. |
| 20 | `EcoStruxure Machine Expert` → `Described` | CORRECT | It is a full product name reference used descriptively in the CTI report, not as a uniquely matchable indicator. |
| 21 | `SoMachine` → `Described` | CORRECT | This software tool name is used descriptively and does not offer a unique string for automated detection. |
| 22 | `Microgrid Operation (EMO-M)` → `Described` | CORRECT | The observable is a descriptive product name with an alias, making it unsuitable for direct actionable matching. |
| 23 | `ESME` → `Described` | CORRECT | As an alias for a known product, the observable remains ambiguous and is appropriately classified as descriptive. |

| 24 | `EcoStruxure Machine Expert` → `Described` | CORRECT | It’s a product name used for identification rather than a unique, directly searchable indicator. |
| 25 | `EcoStruxure Machine Expert Basic` → `Described` | CORRECT | As a product title, it serves as a descriptive reference rather than an exact, actionable match. |
| 26 | `Schneider Electric Software Update` → `Described` | CORRECT | This software tool name is used for context and requires additional enrichment to be detection‐specific. |
| 27 | `Controller Assistant for Machine Expert devices` → `Described` | CORRECT | The string names a specific tool but isn’t a unique technical artifact for automated detection. |
| 28 | `Controller Update feature in Commissioning tab of EcoStruxure Machine Expert Basic` → `Described` | CORRECT | It describes a feature within a product, which is informative but not directly actionable as an indicator. |
| 29 | `TM221` → `Described` | CORRECT | As a device model identifier, it is descriptive and requires context to be used for concrete detection. |
| 30 | `Application Protection page` → `Mentioned` | CORRECT | It’s a generic UI page label referenced conceptually rather than a unique, searchable artifact. |
| 31 | `default account` → `Mentioned` | CORRECT | The term is generic and conceptual, making it unsuitable for direct automated detection. |
| 32 | `UDP port 27126` → `Actionable` | CORRECT | A complete and unique port designation that can be directly matched by detection systems. |
| 33 | `UDP port 27127` → `Actionable` | CORRECT | The port number is a specific numeric indicator enabling exact rule‐matching. |
| 34 | `UDP port 3702` → `Actionable` | CORRECT | As a distinct port number, it qualifies as an actionable indicator for automated detection. |
| 35 | `TCP port 502 for TM221` → `Actionable` | CORRECT | The string combines a specific port and context, making it concrete enough for detection. |
| 36 | `UDP ports 1740 to 1743` → `Actionable` | CORRECT | The defined port range is a complete identifier suitable for network traffic matching. |
| 37 | `TCP ports 1105 and 11740` → `Actionable` | CORRECT | It details specific ports that can be directly referenced in detection rules. |
| 38 | `TCP port 502` → `Actionable` | CORRECT | This port number is a precise and complete indicator that is directly searchable. |
| 39 | `Intrusion Detection System` → `Mentioned` | CORRECT | It’s a conceptual reference to a tool type and not a specific, actionable artifact. |
| 40 | `network firewalls` → `Mentioned` | CORRECT | The phrase is a generic reference and cannot be turned into a concrete detection indicator. |
| 41 | `secure remote access` → `Mentioned` | CORRECT | This is a conceptual security feature, lacking the specificity needed for automated detection. |
| 42 | `device authentication` → `Mentioned` | CORRECT | It is a general reference to a security process rather than a unique, matchable artifact. |
| 43 | `device firewall` → `Mentioned` | CORRECT | The term is used conceptually, making it unsuitable for direct, signature‐based detection. |
| 44 | `CISA advisory` → `Mentioned` | CORRECT | As a reference to an advisory, it is a conceptual pointer rather than a distinct detection value. |
| 45 | `MITRE ATT&CK for ICS framework` → `Mentioned` | CORRECT | The framework name is a well‐known reference, not a unique artifact for automated detection. |
| 46 | `Cybersecurity Guidelines for EcoStruxure Machine Expert, Modicon and PacDrive Controllers and Associated Equipment User Guide` → `Described` | CORRECT | The full document title is descriptive and specific, but it still requires context to drive direct detection.

| 47 | CISA Advisory (AA22-103A) → Mentioned | CORRECT | It is simply a reference to an advisory document and not a unique actionable indicator. |
| 48 | Mandiant publication o → Mentioned | CORRECT | The observable is a truncated reference to a publication and doesn’t offer a specific detection artifact. |
| 49 | CODESYS Advisory 2022-08 0 → Mentioned | CORRECT | It refers to an advisory document; its reference is conceptual and not directly actionable. |

| 50 | `www.se.com` → `Actionable` | CORRECT | The domain name is complete, unique, and directly actionable for detection. |

md file name: /content/validation/ESET_ACAD_Medre_A_whitepaper.md

| 1 | autorun.inf → Described | CORRECT | The file name is generic and ambiguous, not unique enough for direct automated detection without additional context. |

| 2 | 18 | (setq MK_FILE-TEMP-B (OPEN (setq MK_FILE-TEMP-A (VL-FILENAME-MKTEMP nil nil ".vbs")) "W"))
19 (MAPCAR ' (LAMBDA ' (X) ' (WRITE-LINE X MK-INFO-BIN) ) MK-INFO-BIN)
(CLOSE MK_FILE-TEMP-B) 20
(STARTAPP (STRCAT (GETENV "windix") "\System32\wscript.exe") MK_FILE=TEMP-A 2)
<sup>17 | (</sup>setq MK FILE-TEMP-A (VL-FILENAME-MKTEMP nil nil ".vbs")) → Actionable | CORRECT | This complete inline code snippet is unique and can be directly matched in a detection rule. |
| 3 | ACAD/Medre.A → Actionable | CORRECT | The exact file name is complete and specific enough for direct detection. |
| 4 | acad.fas → Actionable | CORRECT | A full, hard‑coded file name that is directly actionable. |
| 5 | %windir%\System32\Acad.fas → Actionable | CORRECT | A complete file path using a standard environment variable, making it uniquely detectable. |
| 6 | %windir%\ Acad.fas → Actionable | CORRECT | Despite the extra space, it remains a complete file path that can be precisely matched. |
| 7 | %current_working_directory_of_DWG%\cad.fas → Described | CORRECT | The use of a non‑standard placeholder requires additional enrichment before detection. |
| 8 | %current_working_directory_of_DWG%\acad.fas → Described | CORRECT | The placeholder makes the path ambiguous, so enrichment is needed before it’s actionable. |
| 9 | %ACAD_support_directory%\cad.fas → Described | CORRECT | The inclusion of a placeholder prevents direct matching and needs further context. |
| 10 | %ACAD_support_directory%\acad.fas → Described | CORRECT | Contains a placeholder that requires resolution, making it non‑actionable by itself. |
| 11 | acad20??.lsp → Described | CORRECT | The wildcards render the file name a pattern that cannot be directly matched without enrichment. |
| 12 | wscript.exe → Described | CORRECT | A generic system executable name that is too common for direct, low‑false‑positive detection. |
| 13 | windix → Described | CORRECT | An ambiguous, obfuscated environment variable value that isn’t uniquely actionable on its own. |
| 14 | ``` 
1
    (DEFUN S : : STARTUP ()
2
      (if (findfile "cad.fas") (load "cad.fas") )
3
      (princ)
4
``` → Actionable | CORRECT | The observable is wrapped in a code fence, providing a complete and exact AutoLISP snippet suitable for detection. |
| 15 | acad2015.1sp → Actionable | CORRECT | A specific file name variant that is fully identifiable and directly actionable. |
| 16 | acad2014.1sp → Actionable | CORRECT | A complete and unique file name that can be used as an exact match in detection. |
| 17 | acad2013.1sp → Actionable | CORRECT | The file name is fully specified and unique, making it directly actionable. |
| 18 | *14.0* → Mentioned | CORRECT | This version string pattern is ambiguous and cannot be directly used for detection. |
| 19 | ==15.0* → Mentioned | CORRECT | The version pattern is conceptual and not specific enough to be actionable. |
| 20 | ==16.0* → Mentioned | CORRECT | An ambiguous version indicator that is used only for conditional logic, not direct matching. |
| 21 | *16.1* → Mentioned | CORRECT | The generic version string pattern is only indicative and not a concrete indicator for detection. |
| 22 | ==16.2* → Mentioned | CORRECT | This version pattern is non‑specific and meant only for informational purposes. |
| 23 | *17.0* → Mentioned | CORRECT | A generic version string pattern that is used conceptually rather than for direct detection. |
| 24 | ==17.1* → Mentioned | CORRECT | An ambiguous version indicator that lacks the specificity needed for actionable detection. |
| 25 | *17.2* → Mentioned | CORRECT | The version pattern is too broad and serves only as a conceptual reference. |
| 26 | *18.0* → Mentioned | CORRECT | A non‑unique version string used for contextual checks, not for direct detection. |
| 27 | *18.1* → Mentioned | CORRECT | This version string pattern is ambiguous and only serves as an informational indicator. |
| 28 | *18.2* → Mentioned | CORRECT | A generic version pattern that is used in conditional logic rather than for actionable detection. |
| 29 | *19.0* → Mentioned | CORRECT | The version string is ambiguous and represents only a conceptual indicator. |
| 30 | *19.1* → Mentioned | CORRECT | A generic version pattern that cannot be directly acted upon without additional context. |
| 31 | *19.2* → Mentioned | CORRECT | This version string pattern is too broad and serves solely as a conceptual reference. |

| 32 | ACAD/Medre.A → Mentioned | CORRECT | A malware family name is inherently a conceptual label rather than a unique, actionable indicator. |
| 33 | 163.com → Mentioned | CORRECT | Although a complete domain, as a popular email provider it is too generic to serve as a direct detection indicator. |
| 34 | qq.com → Mentioned | CORRECT | This is a common email provider domain; its generic nature makes it non‑actionable. |
| 35 | smtp.163.com → Mentioned | CORRECT | Even as an SMTP server domain mentioned in the malware context, it is a widely used legitimate service, not unique for detection. |
| 36 | smtp.qq.com → Mentioned | CORRECT | As with similar mainstream domains, its usage is common and not suitable for targeted automated detection. |
| 37 | 25 → Mentioned | CORRECT | The port number is generic (well‑known SMTP port 25) and does not provide a unique signature for automated detection.

| 38 | 163.com → Mentioned | CORRECT | The domain is widely used and generic, so it’s conceptually referenced rather than unique for detection. |
| 39 | qq.com → Mentioned | CORRECT | As a common email domain, it lacks uniqueness and is only mentioned in context. |
| 40 | 135 | (setq MaxEMAIL ' (\"#stored-server\") == 163-991\" … → Actionable | CORRECT | This complete AutoLISP code snippet is unique in structure and can be directly used for automated detection. |
| 41 | [Multi-line VBS script] → Actionable | CORRECT | The full VBS script block is complete and concrete, making it directly actionable for detection. |
| 42 | 180 | (setq VL-INFO-C (STRCAT (GETENV "COMPUTERNAME") "+" (GETENV "USERNAME"))) → Actionable | CORRECT | The complete AutoLISP command distinctly concatenates environment variables, allowing for precise automated detection. 

| 43 | `[HKEY_CURRENT_USER\Software\Microsoft\Office\11.0\Outlook\Catalog]` → Actionable | CORRECT | Registry key is a complete, unique identifier that can be directly used in detection. |
| 44 | `[HKEY_CURRENT_USER\Software\Microsoft\Office\12.0\Outlook\Catalog]` → Actionable | CORRECT | The key is fully specified and unique, making it actionable for detection. |
| 45 | `[HKEY_CURRENT_USER\Software\Microsoft\Office\13.0\Outlook\Catalog]` → Actionable | CORRECT | As a complete Windows registry key, it can be directly matched for automated detection. |
| 46 | `[HKEY_CURRENT_USER\Software\Aerofox\Foxmail] "Executable"` → Actionable | CORRECT | The observable is a precise registry key (with added context) that is unique and matchable. |
| 47 | `\Address\Address.INDX` → Actionable | CORRECT | This file path string is exact and unique enough to serve as an indicator in detection rules. |
| 48 | `\Address\Address.BOX` → Actionable | CORRECT | As a complete file path fragment, it is uniquely identifiable and actionable. |
| 49 | `\Address\Send.INDX` → Actionable | CORRECT | The specific file path is a concrete value that can be directly used in detection. |
| 50 | `\Address\Send.BOX` → Actionable | CORRECT | The file path is complete and distinctive, making it an actionable observable. |
| 51 | ```| 1   | ON ERROR RESUME NEXT                                                               |
|-----|------------------------------------------------------------------------------------|
| 2   | Set WshShell = WScript.CreateObject ("WScript.Shell")                              |
| ന   | set somcreateobject ("scripting.filesystemobject")                                 |
| ರ್ಕ |                                                                                    |
| ഗ   | so.getfile("apath to acad.fass").copy("&windirs\System32\!ExIgwiDuOEI4\acad.fas")  |
| 6   |                                                                                    |
| 7   | WshShell.run "attrib +h +R &windir%\System32\!ExIg»úBuOEI4\acad.fas",0             |
| ്ഥാ | m1="&windire\System32\ExI¶»uеÕEI4.rar"                                             |
| on  | m2="&windir%\System32\!ExI9>úеգͽ"                                                  |
| 10  | mm="WinRAR m -ep1 -hp1 "&m1&m2"                                                    |
| 11  |                                                                                    |
| 12  | myre = WshShell.Run (mm , 0, True)                                                 |
| 13  | createdbject ("scripting.filesystemobject").getfile(wscript.scriptfullname).delete |``` → Actionable | CORRECT | The full VBScript code snippet is complete and unique, making it directly matchable for detection. |
| 52 | `ɤι»úÐµÕÆ½.rar` → Actionable | CORRECT | The RAR filename, though containing unusual characters, is a distinct and concrete indicator. |
| 53 | `acad.fas` → Actionable | CORRECT | This specific file name is complete and directly usable as an indicator. |
| 54 | `ɤͶ»úÐµÕÆÍ½.dxf` → Actionable | CORRECT | The AutoCAD DXF file name is unique and can serve as an actionable observable. |
| 55 | `Ȥζ»úÐµÖÆÍ¼.dxf` → Actionable | CORRECT | Its distinctive characters make this file name a precise and actionable indicator. |
| 56 | ```| 1      | "O"                                                                                                                                                                           |
|--------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| 2      | "SECTION"                                                                                                                                                                     |
| 3      | "2"                                                                                                                                                                           |
| 4      | "HEADER"                                                                                                                                                                      |
| 5      | " Q "                                                                                                                                                                         |
| 6      | "SACADVER"                                                                                                                                                                    |
|        | "   "                                                                                                                                                                         |
| 8      | "AC1015"                                                                                                                                                                      |
| ರ      | " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " |
| 10     | "\$ACADMAINTVER"                                                                                                                                                              |
| 11     | "70"                                                                                                                                                                          |
| 12     | "20"                                                                                                                                                                          |
| 13     | " g "                                                                                                                                                                         |
| 14     | " \$ DWGCODE PAGE "                                                                                                                                                           |
| 15     | "3 "                                                                                                                                                                          |
| 16     | "ANSI 936"                                                                                                                                                                    |
| 1<br>7 | "g"                                                                                                                                                                           |
| 18     | "SINSBASE"                                                                                                                                                                    |
| 19     | "SHADEPLOTCUSTOMDPI"                                                                                                                                                          |
| 20     | "70"                                                                                                                                                                          |
| 21     | "300"                                                                                                                                                                         |
| 22     | "O"                                                                                                                                                                           |
| 23     | "ENDSEC"                                                                                                                                                                      |
| 24     | "O"                                                                                                                                                                           |
|        |                                                                                                                                                                               |
| 25     | "EOF"``` → Described | CORRECT | The DXF header content is a verbatim file excerpt that, while unique, requires further contextual enrichment before use in detection. |
| 57 | `1` → Described | CORRECT | As a single-digit password, "1" is too generic to be reliably used in automated detection without false positives. |

| 58 | HKCU\Software\Microsoft\Windows\Windows Error Reporting → Described | CORRECT | It’s a standard, common registry key that by itself isn’t uniquely malicious and requires additional context. |
| 59 | FII F → Actionable | INCORRECT — should be "Described" because the registry value name alone is ambiguous and not sufficiently unique to act upon without its parent key. | Standalone registry value names can generate false positives and are better classified as described. |
| 60 | FILE-G → Actionable | INCORRECT — should be "Described" because by itself this short registry value lacks the unique context needed for reliable detection. | Registry values, when isolated from their key context, are ambiguous indicators. |
| 61 | FII F-H → Actionable | INCORRECT — should be "Described" because the standalone value is too generic without the accompanying registry key for precise matching. | As an isolated registry value, it does not offer a definitive, unique indicator. |
| 62 | Time → Described | CORRECT | "Time" is overly generic and by itself is insufficient for actionable detection. |
| 63 | 7b56374of41e495a68b70cbb22980b20 → Actionable | CORRECT | MD5 hashes are complete, unique, and can be directly matched for detection. |

| 64 | `ACAD/ Medre.A` → `Mentioned` | CORRECT | It’s an incomplete email account identifier that isn’t actionable for direct detection. |
| 65 | `Administrator Account` → `Mentioned` | CORRECT | It’s a generic account term without the specificity needed for actionable detection. |
| 66 | `@qq.com>` → `Described` | CORRECT | The fragment is incomplete (contains extraneous characters and missing local-part), requiring further enrichment. |
| 67 | `@163.com>` → `Described` | CORRECT | Like the previous observable, it’s an incomplete email header fragment that isn’t directly actionable. |
| 68 | `C:\Users' Desktop\Nueva carpeta\.dwg` → `Actionable` | CORRECT | It’s a complete file path that can be directly matched by detection rules. |

| 69 | qq.com → Actionable | CORRECT | The domain is a complete, unique indicator that can be directly searched and matched. |
| 70 | ACAD/Medre.A → Described | CORRECT | The malware detection name is ambiguous and requires further enrichment to be actionable. |

| 71 | `ACAD/Medre. A` → `Actionable` | CORRECT | The malware family name is unique and can be matched as-is for detection, making it actionable.  |

md file name: /content/validation/Dragos_ChernoviteWP_v2b.md

| 1 | PIPEDREAM → Described | CORRECT | Malware family names are descriptive identifiers rather than direct telemetry feeds. |
| 2 | info@dragos.com → Actionable | CORRECT | Complete email addresses are unique and directly matchable in email-related detection systems. |
| 3 | @DragosInc → Mentioned | CORRECT | Social media handles, while identifying an entity, are typically less actionable for conventional detection. |

| 4 | CHERNOVITE → Mentioned | CORRECT | The threat actor name is conceptually referenced without providing actionable technical details. |
| 5 | PIPEDREAM → Mentioned | CORRECT | As a campaign reference appearing in headings and summaries, it is conceptual and not directly actionable. |

| 6 | PIPEDREAM → Mentioned | CORRECT | It's a malware family name referenced conceptually rather than a concrete, actionable artifact. |
| 7 | CHERNOVITE → Mentioned | CORRECT | Threat actor names are conceptual references and not directly actionable identifiers. |
| 8 | Omron → Mentioned | CORRECT | Vendor names are generic references that aren’t uniquely actionable for detection. |
| 9 | Schneider Electric → Mentioned | CORRECT | Company or vendor names are mentioned conceptually and cannot be directly converted into detections. |
| 10 | OPC-UA → Mentioned | CORRECT | Protocol names are conceptual and not directly actionable indicators. |
| 11 | CODESYS → Mentioned | CORRECT | Product/platform names in context are only conceptually described and not technically actionable. |

| 12 | "PIPEDREAM" → "Mentioned" | CORRECT | The observable is a threat actor name, which is conceptually referenced rather than being a complete, actionable indicator. |

| 13 | `PIPEDREAM` → `Mentioned` | CORRECT | Threat actor names are generally referenced conceptually rather than serving as unique, matchable detection indicators. |
| 14 | `CHERVONITE` → `Mentioned` | CORRECT | As with other threat actor names, this identifier is used conceptually and isn’t a unique string for automated matching. |
| 15 | `CHERNOVITE` → `Mentioned` | CORRECT | The threat actor name is referenced in context but isn’t unique enough to drive direct detection. |
| 16 | `OPC-UA` → `Mentioned` | CORRECT | This is a standard industrial protocol name that remains conceptual and too generic for actionable detection by itself. |
| 17 | `FINS` → `Described` | CORRECT | Although tied to Omron’s proprietary protocol, the short term “FINS” requires additional context for precise detection, fitting the “Described” category. |
| 18 | `Modbus` → `Mentioned` | CORRECT | As a widely used industrial protocol, “Modbus” is generic and referenced conceptually, making it non–actionable by itself. |
| 19 | `NetManage` → `Actionable` | CORRECT | The string is unique and specific to Schneider's custom broadcast protocol, enabling direct, low–false‐positive detection. |
| 20 | `CODESYS` → `Mentioned` | CORRECT | Even though it is important in analysis of PLC interactions, the common, generic nature of “CODESYS” makes it unsuitable as a direct detection indicator. |

| 21 | PIPEDREAM → Described | CORRECT | "PIPEDREAM" as a malware family name is a descriptive artifact that requires further context to be actionable. |
| 22 | (table of impacted technology) → Described | CORRECT | The table capture is a descriptive artifact summarizing technology details and is not a unique, directly-matchable indicator. |

| 23 | `observable_value` → `Described` | CORRECT | The table capture is a detailed record of technologies and labels, providing context but not a standalone, unique indicator for automated detection. |
| 24 | `observable_value` → `Actionable` | CORRECT | "PIPEDREAM" is a unique, complete identifier for an attack module that can be directly matched in detection systems. |

| 25 | `Modbus TCP` → `Mentioned` | CORRECT | "Modbus TCP" is a generic protocol name lacking the specificity required for actionable detection. |

| 26 | OPC Unified Architecture (UA) → Mentioned | CORRECT | It is a conceptual reference to an industry-standard protocol without actionable, unique indicators. |
| 27 | Open Platform Communications (OPC) Classic → Mentioned | CORRECT | It is a generic reference to a legacy protocol and lacks the specificity needed for automated detection. |

| 28 | CODESYS Control runtime system → Described | CORRECT | This product name is specific and descriptive but isn’t an exact, low-false‐positive indicator, so “Described” is appropriate. |
| 29 | IEC 61131-3 → Described | INCORRECT — should be "Mentioned" because it’s a generic reference to an international standard rather than a concrete, uniquely actionable artifact. | The standard identifier is conceptually referenced and too generic to drive automated detection directly. |

| 30 | `ASRock Motherboard Utility` → `Described` | CORRECT | It is a product name referenced descriptively without a unique technical indicator. |
| 31 | `ASRock Inc.` → `Mentioned` | CORRECT | It is an organizational name mentioned conceptually, not directly actionable via telemetry. |

| 32 | PIPEDREAM → Described | CORRECT | "PIPEDREAM" is a tool name and not a unique, actionable indicator. |
| 33 | Omron's proprietary FINS → Described | CORRECT | It names a proprietary protocol rather than a concrete, searchable indicator. |
| 34 | Modbus → Described | CORRECT | "Modbus" is a generic standard protocol, making it descriptive rather than actionable. |
| 35 | Schneider Electric's implementation of CODESYS → Described | CORRECT | This observable designates a particular software implementation without a unique detection signature. |
| 36 | (Complete table capture of CHERNOVITE/PIPEDREAM MITRE ATT&CK for ICS Techniques) → Described | CORRECT | The table is a comprehensive capture that is descriptive and not a direct, actionable indicator. |
| 37 | PLC implants → Mentioned | CORRECT | "PLC implants" refers to a generic concept of malicious implants without a specific, actionable signature.

| 38 | CHERNOVITE → Actionable | INCORRECT — should be "Mentioned" because threat actor names are conceptual and used for attribution rather than serving as unique technical indicators for automated detection. | Threat actor names generally lack the specificity needed for direct, low false‑positive automated detection. |
| 39 | DUSTTUNNEL → Actionable | CORRECT | The tool name "DUSTTUNNEL" is a complete and unique identifier that can be directly matched in logs. |
| 40 | Mimikatz → Actionable | CORRECT | Mimikatz is a well-known, unique software tool name that serves as an actionable indicator in detection systems. |
| 41 | LAZYCARGO → Actionable | CORRECT | "LAZYCARGO" is a distinct tool name that can be directly matched to detect its usage. |
| 42 | IT-OT DMZ → Mentioned | CORRECT | As a descriptive label for a network zone, "IT-OT DMZ" is conceptual and not suitable for direct automated detection. |

| 43 | DUSTTUNNEL → Actionable | CORRECT | The unique tool name is a complete identifier that can be directly matched in logs. |
| 44 | CHERNOVITE → Actionable | CORRECT | The exact, unique tool name makes it actionable for automated detection. |
| 45 | LAZYCARGO → Actionable | CORRECT | As a complete and distinct tool name, it is directly usable in detection rules.

| 46 | CHERNOVITE → Actionable | CORRECT | It's a unique malware/tool name that can be directly used for detection. |
| 47 | MOUSEHOLE → Actionable | CORRECT | It's a distinct tool name that is specific and can be searched as-is. |
| 48 | OPC-UA server → Described | CORRECT | The term is generic and lacks the unique detail needed for automated detection. |
| 49 | EVILSCHOLAR → Actionable | CORRECT | It is a complete, unique identifier for a malware/tool that can be directly matched. |
| 50 | BADOMEN → Actionable | CORRECT | This is a specific malware/tool name suitable for detection rule matching. |
| 51 | Schneider Electric PLCs → Mentioned | CORRECT | The observable only generically refers to a vendor’s device line, making it non‑actionable. |
| 52 | Omron PLCs → Mentioned | CORRECT | It generically describes a product family and cannot be uniquely tied to an automated detection. |

| 53 | EVILSCHOLAR → Actionable | CORRECT | The malware name is unique and can be matched exactly for detection. |
| 54 | Schneider Electric controller → Described | CORRECT | The reference is generic without specific model details, requiring additional context for actionable detection. |
| 55 | Modbus → Mentioned | CORRECT | As a generic protocol reference, it cannot be directly turned into a concrete detection indicator. |

| 56 | `safety controllers` → `Mentioned` | CORRECT | The term is a generic reference, not a concrete identifier for actionable detection. |
| 57 | `machine automation controllers` → `Mentioned` | CORRECT | It is a broad, non-specific description that does not indicate a unique detection target. |
| 58 | `emergency shutdown systems` → `Mentioned` | CORRECT | The observable is a generic reference and lacks the specificity needed for actionable detection. |

| 59 | PIPEDREAM → Mentioned | CORRECT | "PIPEDREAM" is a threat campaign name referenced conceptually, not a unique detection indicator. |
| 60 | Dragos Platform → Mentioned | CORRECT | The name is that of a proprietary tool and is referenced without providing an actionable indicator. |
| 61 | OT Watch → Mentioned | CORRECT | "OT Watch" is a service/tool name used for detection and does not lend itself to direct automated matching. |
| 62 | Neighborhood Keeper → Mentioned | CORRECT | It is simply the name of a service/platform, hence it is referenced conceptually rather than being directly actionable. |

| 63 | `Schneider Electric TM2xx series PLCs` → `Mentioned` | CORRECT | It's a generic reference to a category of ICS devices without a unique, searchable signature. |
| 64 | `firmware 5.0` → `Described` | CORRECT | The version detail is provided but lacks uniqueness, requiring additional context for automated detection. |
| 65 | `Administrator` → `Described` | CORRECT | It's a common default user account name that isn’t distinct enough for precise automated detection. |
| 66 | `EcoStruxure software` → `Mentioned` | CORRECT | It generically names a product without sufficient specificity to serve as a unique detection indicator. |
| 67 | `UDP/1740-1743` → `Actionable` | CORRECT | The specific UDP port range is complete and distinct enough to be directly used in detection rules. |
| 68 | `TCP/1105` → `Actionable` | CORRECT | It represents a clear, complete TCP port number that can be reliably matched in logs. |
| 69 | `TCP/11740` → `Actionable` | CORRECT | This is a distinct TCP port value that can be directly leveraged in automated detection. |
| 70 | `Schneider NetManage discovery service` → `Actionable` | CORRECT | The full service name is specific enough to be used in detection rules with low false‐positives. |
| 71 | `VA-2019-02` → `Mentioned` | CORRECT | As a vulnerability reference identifier, it is conceptual and not directly actionable on its own. |
| 72 | `EcoStruxure Machine Expert` → `Mentioned` | CORRECT | This product name is a generic reference that needs additional context before being used as a detection indicator. |

| 73 | TCP/80 → Actionable | CORRECT | "TCP/80" is a complete network port indicator that can be directly matched in detection rules. |
| 74 | TCP/9600 → Actionable | CORRECT | "TCP/9600" is a specific network port string that qualifies as an actionable indicator. |
| 75 | UDP/9600 → Actionable | CORRECT | "UDP/9600" is a precise network port identifier suitable for direct detection. |
| 76 | Omron Sysmac → Described | CORRECT | As a product name, "Omron Sysmac" requires additional context to be actionable, making "Described" appropriate. |
| 77 | CX-One → Described | CORRECT | "CX-One" is a product reference that is ambiguous without further specifics, thus correctly ranked as Described. |
| 78 | NX IO Confiqurator → Described | CORRECT | This product name is not unique enough for automated detection, so "Described" is the proper rank. |
| 79 | Omron PLCs → Mentioned | CORRECT | "Omron PLCs" generically refers to a family of devices and isn’t specific enough for direct detection. |
| 80 | EWS systems → Mentioned | CORRECT | "EWS systems" is a broad reference and, lacking specificity, is appropriately categorized as Mentioned. |

| 81 | `OPC-UA` → `Mentioned` | CORRECT | The observable is a generic protocol reference with no unique actionable details. 

| 82 | `#### Table 4: OPC-UA Mitigations ...` → `Described` | Validator output CORRECT | The observable is a complete table of mitigation guidance rather than an indicator that can be directly acted on.  |

| 83 | File Transfer of PIPEDREAM → Mentioned | CORRECT | This observable is a conceptual naming of an activity from MITRE ATT&CK and isn’t a concrete, unique indicator. |
| 84 | T1544 Remote File Copy → Mentioned | CORRECT | It names a MITRE technique in a descriptive manner, providing only a conceptual reference rather than a specific artifact. |
| 85 | T1105 Ingress Tool Transfer → Mentioned | CORRECT | The value is a reference to a MITRE technique, serving as a conceptual indicator rather than a directly actionable string. |
| 86 | PIPEDREAM Execution → Mentioned | CORRECT | This is a conceptual activity label from the MITRE ATT&CK framework and does not constitute a concrete, detectable artifact. |
| 87 | T1059 Command and Scripting Interpreter → Mentioned | CORRECT | It is a descriptive label of a MITRE technique and remains conceptual rather than a precise indicator for automated detection. |
| 88 | PIPEDREAM Interrogate Windows System → Mentioned | CORRECT | The observable is a conceptual activity reference from MITRE ATT&CK, not a complete, actionable artifact. |
| 89 | T1047 Windows Management Instrumentation → Mentioned | CORRECT | As a MITRE technique reference, it is only conceptually indicative and not a specific, unique value to detect. |
| 90 | BADOMEN Telnet Login Bypass → Mentioned | CORRECT | This observable is a conceptual activity extracted from MITRE ATT&CK for ICS and does not pinpoint a concrete artifact. |
| 91 | T1552.001 Unsecured Credentials: Credentials in Files → Mentioned | CORRECT | It is a descriptive MITRE technique reference, indicating a conceptual process rather than a direct matching string. |
| 92 | BADOMEN HTTP Login Bypass → Mentioned | CORRECT | The value naming a MITRE-attck activity remains conceptual and is not a complete, unique artifact for direct detection. |
| 93 | BADOMEN Get PLC Status → Mentioned | CORRECT | This is a conceptual activity indicator from MITRE ATT&CK, not providing a specific detectable artifact. |
| 94 | T0868 Detect Operating Mode → Mentioned | CORRECT | As a reference to a MITRE technique, the observable is conceptual and cannot be used as a concrete pattern for detection. |
| 95 | BADOMEN PLC Read Operation → Mentioned | CORRECT | The observable is a conceptual label from the MITRE ATT&CK ICS table without an exact, actionable artifact. |
| 96 | T0888 Remote System Information Discovery → Mentioned | CORRECT | It describes a MITRE technique in a conceptual way rather than offering a unique string that can be directly matched. |
| 97 | BADOMEN HTTP Encrypted Post → Mentioned | CORRECT | This observable is a conceptual activity reference from MITRE ATT&CK and is not a complete, concrete identifier. |
| 98 | T1573 Encrypted Channel → Mentioned | CORRECT | It is a descriptive reference to a MITRE technique, serving as a conceptual indicator rather than a specific artifact. |
| 99 | BADOMEN Activate Telnet → Mentioned | CORRECT | The observable is taken from a conceptual MITRE ATT&CK activity description and isn’t a directly actionable identifier. |
| 100 | T1021 Remote Services → Mentioned | CORRECT | It is a MITRE technique reference that remains conceptual and does not offer a concrete, matchable artifact. |
| 101 | BADOMEN File Upload → Mentioned | CORRECT | The observable names a MITRE ATT&CK activity conceptually and is not a complete, stand-alone indicator for detection. |
| 102 | EVILSCHOLAR Password Brute Force Attempt → Mentioned | CORRECT | This is a conceptual label extracted from MITRE ATT&CK, describing an activity rather than a specific artifact. |
| 103 | T1110 Brute Force → Mentioned | CORRECT | It’s a descriptive MITRE technique reference that is conceptual by nature and not directly actionable as a detection string. |
| 104 | EVILSCHOLAR Denial of Service Attempt → Mentioned | CORRECT | The value serves as a conceptual reference from MITRE ATT&CK for ICS, lacking a concrete, unique artifact. |
| 105 | T0814 Denial of Service → Mentioned | CORRECT | As a MITRE technique descriptor, it is a conceptual reference that cannot be directly translated into a detection rule. |
| 106 | FVII SCHOI AR Initial Communication Attempt → Mentioned | CORRECT | This observable is a conceptual activity indicator and does not provide a concrete, unique value for automated detection. |
| 107 | T0869 Standard Application Layer Protocol → Mentioned | CORRECT | It is a conceptual MITRE technique reference that describes an activity rather than specifying a unique artifact. |
| 108 | EVILSCHOLAR Unauthorized Login → Mentioned | CORRECT | The observable is a conceptual activity label from MITRE ATT&CK and isn’t a complete, directly actionable identifier. |
| 109 | T1078 Valid Accounts → Mentioned | CORRECT | This MITRE technique reference is conceptual and generic, making it unsuitable as a unique, actionable artifact. |
| 110 | File Transfer of LAZYCARGO → Mentioned | CORRECT | It is a conceptual naming of an activity from the MITRE ATT&CK framework and does not offer a concrete detection indicator. |
| 111 | MOUSEHOLE Scan for Devices → Mentioned | CORRECT | The observable is a broader activity reference from MITRE ATT&CK, serving as a conceptual indicator rather than an exact matchable string. |
| 112 | T1046 Network Service Scanning → Mentioned | CORRECT | It represents a MITRE technique in a descriptive, conceptual manner and is therefore only a general reference. |
| 113 | MOUSEHOLE Initial Device Connectivity → Mentioned | CORRECT | This observable is a conceptual label from MITRE ATT&CK indicating an activity, not a specific, actionable artifact. |

| 114 | `#### Table 5: MITRE ATT&CK for ICS Technologies` → `Mentioned` | CORRECT | The header is a conceptual reference from a CTI report and not a machine-detectable indicator. |

| 115 | `PIPEDREAM` → `Actionable` | CORRECT | The observable is a unique and complete tool name that can be directly matched for detection. |

| 116 | CHERNOVITE → Mentioned | CORRECT | It's a threat actor name mentioned in context with no actionable detection details. |
| 117 | PIPEDREAM → Mentioned | CORRECT | It's a campaign name used conceptually, not as a specific detection artifact. |

| 118 | PIPEDREAM → Mentioned | CORRECT | Malware family names are conceptual references and not specific, actionable indicators. |
| 119 | STUXNET → Mentioned | CORRECT | Malware family names are generic and used conceptually rather than as precise indicators. |
| 120 | HAVEX → Mentioned | CORRECT | As a family name, it is referenced conceptually without a concrete detection value. |
| 121 | BLACKENERGY2 → Mentioned | CORRECT | Being simply a malware family name, it is correctly labeled as mentioned. |
| 122 | CRASHOVERRIDE → Mentioned | CORRECT | The alias is a conceptual reference and not a unique, actionable identifier. |
| 123 | INDUSTROYER → Mentioned | CORRECT | It is properly classified as mentioned since it is only a malware family name. |
| 124 | TRISIS → Mentioned | CORRECT | The name is a conceptual reference to a malware family, hence not actionable. |
| 125 | TRITON → Mentioned | CORRECT | As with other malware family names, it is appropriately marked as mentioned. |
| 126 | INDUSTROYER2 → Mentioned | CORRECT | The observable is a malware family name, making it a conceptual and non-actionable indicator. |
| 127 | CHERNOVITE → Mentioned | CORRECT | It is correctly classified as mentioned since it is a generic malware family or actor name. |

| 128 | Omron → Mentioned | CORRECT | The vendor name is generic and cannot be directly used for unique detection. |
| 129 | Schneider Electric → Mentioned | CORRECT | The vendor name is a conceptual reference and not uniquely actionable. |
| 130 | OPC-UA → Mentioned | CORRECT | The protocol name is a standard reference, unsuitable for direct automated detection. |

| 131 | PIPEDREAM → Mentioned | CORRECT | "PIPEDREAM" is only cited as a campaign codename in the CTI report and is not a unique, concrete, or actionable IOC. |

| 132 | PIPEDREAM → Mentioned | CORRECT | Threat actor names like "PIPEDREAM" are conceptually referenced rather than unique, actionable indicators. |
| 133 | CODESYS protocol → Mentioned | CORRECT | "CODESYS protocol" is a generic protocol reference that lacks the uniqueness needed for direct automated detection. |
| 134 | MOUSEHOLE → Mentioned | CORRECT | As a threat actor name, "MOUSEHOLE" is conceptually mentioned and not a precise, actionable artifact. |
| 135 | OPC-UA → Mentioned | CORRECT | "OPC-UA" is a standard protocol name that is too generic to serve as a standalone actionable indicator. |
| 136 | OPC → Mentioned | CORRECT | The term "OPC" is an ambiguous, generic reference to a standard, not a uniquely actionable string. |
| 137 | EtherNet/IP → Mentioned | CORRECT | "EtherNet/IP" is a widely used protocol name and is referenced generically, thus non‑actionable by itself. |
| 138 | PROFINET → Mentioned | CORRECT | "PROFINET" is a protocol reference that is generic and does not represent a unique, actionable indicator. |
| 139 | EtherCAT → Mentioned | CORRECT | "EtherCAT" is similarly a generic protocol name and is appropriately classified as mere mention. |

| 140 | CHERNOVITE → Mentioned | CORRECT | Malware family names are conceptual identifiers and not concrete technical indicators, which makes "Mentioned" the correct rank. |

| 141 | `www.dragos.com` → `Actionable` | CORRECT | It’s a complete, fully-specified domain name that can be directly matched in a detection rule. |

===== ranking_results/ranking_results2.txt =====
md file name: /content/validation/ICSA-10-272-01.md

| 1 | "ICSA-10-272-01" → Actionable | CORRECT | The alert code is a unique, complete identifier that can be directly matched for automated detection. |

| 2 | ICSA-10-201-01 → Described | CORRECT | Advisory identifiers serve as reference labels that require additional context rather than direct automated detection. |
| 3 | ICSA-10-238-01 → Described | CORRECT | Advisory identifiers are non‐actionable by themselves and need further context, fitting the “Described” rank. |
| 4 | Stuxnet → Mentioned | CORRECT | Malware family names are generic and serve as conceptual references, so “Mentioned” is appropriate. |
| 5 | Conficker → Mentioned | CORRECT | As a malware family reference, it is used conceptually rather than as a concrete detection indicator. |
| 6 | Microsoft Security Bulletin MS-08-067 → Described | CORRECT | Security bulletin identifiers are reference values that require additional investigation, aligning with the “Described” rank. |
| 7 | Infected USB devices → Mentioned | CORRECT | Generic propagation method references are conceptual and not directly actionable. |
| 8 | network shares → Mentioned | CORRECT | The term refers broadly to a propagation method and is appropriately marked as “Mentioned.” |
| 9 | STEP 7 Project files → Mentioned | INCORRECT — should be "Described" because the file artifact description provides a specific but partial pattern that can be enriched for detection. | File artifacts with indicative naming patterns warrant a “Described” rank to signal potential for actionable matching after context enrichment. |
| 10 | WinCC database files → Mentioned | INCORRECT — should be "Described" because the generic file artifact pattern implies a specific set of files that can be further enriched for detection. | As with other file artifacts, the description here carries enough pattern specificity to raise it to “Described.” |
| 11 | print spooler vulnerability → Mentioned | CORRECT | Vulnerability references are generic concepts and do not directly translate to automated detection, making “Mentioned” appropriate. |
| 12 | Microsoft Security Bulletin MS-10-061 → Described | CORRECT | As a security bulletin identifier, it requires additional lookup and fits the “Described” classification. |
| 13 | Remote Procedure Call (RPC) → Mentioned | CORRECT | Protocol references like RPC are conceptual and too broad for direct detection, so “Mentioned” is fitting. |
| 14 | Siemens SIMATIC WinCC → Mentioned | CORRECT | Software/tool names are used conceptually and are not uniquely actionable, justifying the “Mentioned” rank. |
| 15 | SIMATIC STEP 7 → Mentioned | CORRECT | The software name is provided as a reference without unique detection attributes, so “Mentioned” is appropriate. |

| 16 | Windows XP SP3 → Mentioned | CORRECT | The OS version is a generic, conceptual reference rather than a unique, actionable indicator. |
| 17 | Siemens WinCC → Mentioned | CORRECT | The software product name is simply referenced and not a unique indicator for automated detection. |
| 18 | STEP 7 → Mentioned | CORRECT | As a generic reference to installed software, it isn’t a unique, actionable indicator. |

| 19 | `WINDOWS\inf\mdmeric3.PNF` → `Actionable` | CORRECT | The complete file path is a unique, exact artifact suitable for direct detection. |
| 20 | `b834ebeb777ea07fb6aab6bf35cdf07f` → `Actionable` | CORRECT | MD5 hashes are complete identifiers that can be directly used for detection. |
| 21 | `WINDOWS\inf\oem6C.PNF` → `Actionable` | CORRECT | The file path is specific and complete, making it directly actionable. |
| 22 | `WINDOWS\inf\oem7A.PNF` → `Actionable` | CORRECT | As a complete file path, it is precise enough for search and detection. |
| 23 | `ad19fbaa55e8ad585a97bbcddcde59d4` → `Actionable` | CORRECT | The MD5 hash is a unique, searchable identifier, fitting the actionable criteria. |
| 24 | `WINDOWS\inf\mdmcpq3.PNF` → `Actionable` | CORRECT | Being a full and explicit file path, it is directly actionable for detection rules. |

| 25 | WINDOWS\system32\s7otbxdx.dll → Actionable | CORRECT | The file path is a complete, exact indicator that can be directly matched in detection systems. |
| 26 | 7a4e2d2638a454442efb95f23df391a1 → Actionable | CORRECT | An MD5 hash is a unique and complete artifact, making it directly actionable. |
| 27 | WINDOWS\system32\s7otbxsx.dll → Actionable | CORRECT | This complete file path is specific and can be used for automated detection. |
| 28 | 5b855cff1dba22ca12d4b70b43927db7 → Actionable | CORRECT | The MD5 hash provides a complete, unique indicator that is directly matchable. |
| 29 | \GraCS\cc_alg.sav → Actionable | CORRECT | Although relative, this file path is exact and derived from endpoint logs, making it actionable. |
| 30 | ad19fbaa55e8ad585a97bbcddcde59d4 → Actionable | CORRECT | The full MD5 hash is a precise identifier that can be directly utilized in detection rules. |
| 31 | \GraCS\cc_tag.sav → Actionable | CORRECT | The specific file path is actionable despite noting that the associated hash may vary. |
| 32 | \GraCS\cc_tlg7.sav → Actionable | CORRECT | This complete file path serves as a clear and directly actionable indicator. |
| 33 | d102bdad06b27616babe442e14461059 → Actionable | CORRECT | The MD5 hash is a complete cryptographic artifact, making it uniquely actionable. |
| 34 | \GraCS\db_log.sav → Actionable | CORRECT | An exact file path provided from logs which can be directly used for detection. |
| 35 | b834ebeb777ea07fb6aab6bf35cdf07f → Actionable | CORRECT | This full MD5 hash is a unique indicator that is directly actionable. |
| 36 | *.sav → Described | CORRECT | The wildcard pattern is ambiguous and descriptive, requiring additional context before automation. |

| 37 | `ICSA-10-238-01B` → `Described` | CORRECT | Advisory IDs are reference identifiers that aren’t directly used for precise automated detection. |
| 38 | `</ics/advisories/icsa-10-238-01b>` → `Actionable` | CORRECT | This complete relative URL can be matched as a unique string in web logs. |
| 39 | `</ics/recommended-practices>` → `Actionable` | CORRECT | It is a full, concrete URL path that is sufficiently unique for detection. |
| 40 | `</sites/default/files/recommended_practices/nccic_icscert_defense_in_depth_2016_s508c.pdf>` → `Actionable` | CORRECT | The specific file path URL is a complete and unique string suitable for automated matching. |
| 41 | `</notification>` → `Actionable` | INCORRECT — should be "Described" because the URL is too generic and may trigger false positives. | Relative URL paths like "/notification" lack uniqueness for low false‑positive detection. |
| 42 | `</privacypolicy>` → `Actionable` | INCORRECT — should be "Described" because this generic relative URL is not uniquely identifiable for reliable automated detection. | Generic privacy policy URLs appear on many sites, making them ambiguous for actionable detection.

md file name: /content/validation/report_11.md

| 1 | `Exabeam Nova` → `Described` | CORRECT | The observable is a proper product name reference that does not provide a unique, actionable artifact for detection, fitting the "Described" category. |

| 2 | privacy@exabeam.com → Actionable | CORRECT | This email address is a complete, unique identifier that can be directly used for detection. |
| 3 | info@exabeam.com → Actionable | CORRECT | This email address is a specific and complete indicator, making it suitable for direct detection. |

| 4 | cookies → Mentioned | CORRECT | The term is generic and does not represent a unique, actionable identifier. |
| 5 | ept<br>kies → Mentioned | CORRECT | The garbled text is ambiguous and unsuitable for direct automated detection. |
| 6 | Event Logging → Mentioned | CORRECT | It is a generic security function description with no actionable attributes. |
| 7 | Cloud Security → Mentioned | CORRECT | The phrase is broad and conceptual rather than a specific, actionable indicator. |
| 8 | XDR → Mentioned | CORRECT | As an abbreviation for Extended Detection and Response, it serves as a conceptual term. |
| 9 | se → Mentioned | CORRECT | The very short, ambiguous text is not specific enough to be actionable. |
| 10 | What Are TTPs → Mentioned | CORRECT | It’s a conceptual reference to threat tactics, techniques, and procedures rather than a unique indicator. |
| 11 | New-Scale SIEM → Mentioned | CORRECT | Although it appears as a product name, it lacks the uniqueness needed for automated detection. |
| 12 | SIEM Security → Mentioned | CORRECT | The generic nature of the term makes it unsuitable as a concrete actionable indicator. |
| 13 | HIPAA Compliance → Mentioned | CORRECT | It refers to a regulatory framework rather than a unique, actionable artifact. |
| 14 | SOX Compliance → Mentioned | CORRECT | The term is descriptive of a compliance standard without a unique, searchable identifier. |
| 15 | Network Detection and Response → Mentioned | CORRECT | It is a broad service description, not a specific and actionable indicator string. |
| 16 | Compliance Management → Mentioned | CORRECT | The phrase is generic and would require further context to be used in detection. |
| 17 | PCI Compliance → Mentioned | CORRECT | It merely references a standard, lacking the distinctiveness needed for automated detection. |
| 18 | GDPR Compliance → Mentioned | CORRECT | The observable describes a regulatory standard and is too generic to be actionable. |
| 19 | SOAR → Mentioned | CORRECT | While it stands for Security Orchestration, Automation and Response, it remains a generic label. |
| 20 | Insider Threats → Mentioned | CORRECT | The term is a broad concept rather than a discrete, actionable indicator. |
| 21 | MITRE ATT&CK → Mentioned | CORRECT | It refers to a framework name, which is conceptual and not meant for direct automated detection. |
| 22 | Information Security → Mentioned | CORRECT | A broad and generic domain term, lacking the specificity required for actionable alerts. |
| 23 | Al Cyber Security → Mentioned | CORRECT | Despite the variant spelling, it remains a descriptive term rather than a unique detection element. |
| 24 | Log Management → Mentioned | CORRECT | It is a generic function designation that does not act as an individually actionable indicator. |
| 25 | SECURITY EXPLAINERS → Mentioned | CORRECT | This appears as a header or category label, making it non-actionable and purely descriptive. |
| 26 | SIEM → Mentioned | CORRECT | The abbreviation is used conceptually and is not a unique string for detection. |
| 27 | SIEM Tools → Mentioned | CORRECT | It is a generic descriptive phrase referring to a category rather than a concrete indicator. |
| 28 | UEBA → Mentioned | CORRECT | As an acronym for User and Entity Behavior Analytics, it remains a conceptual reference. |

md file name: /content/validation/report_3.md

| 1 | Carbon Black → Mentioned | CORRECT | The observable is a product reference and not a unique, actionable technical indicator. |

| 2 | `Carbon Black` → `Mentioned` | CORRECT | The observable refers to a product name used conceptually rather than as a unique, actionable technical artifact.  |

| 3 | `Carbon Black` → `Described` | CORRECT | The observable is a product name rather than a unique indicator, making it descriptive instead of directly actionable.  |

| 4 | Carbon Black → Mentioned | CORRECT | The observable is just a product name with no unique detection pattern, matching the definition for a "Mentioned" observable. |

md file name: /content/validation/ICSA-10-238-01B.md

| 1 | Stuxnet → Mentioned | CORRECT | "Stuxnet" is a malware family name that is conceptually referenced and not a concrete, searchable artifact. |
| 2 | ICSA-10-238-01B → Mentioned | CORRECT | The alert code is a report reference identifier rather than a unique, actionable artifact for detection. |

| 3 | </ics/advisories/icsa-10-201-01c> → Actionable | CORRECT | The relative URL is fully unique and can be directly matched in detection based on its exact string.  |

| 4 | "previously unpatched Windows vulnerability" → Mentioned | CORRECT | The indicator is a generic reference to a vulnerability without specific technical details. |
| 5 | "digitally signed kernel-mode rootkit" → Described | CORRECT | It offers descriptive details about a specific malicious component while lacking a unique, directly searchable artifact. |
| 6 | "original digital certificate used to sign the rootkit" → Mentioned | INCORRECT — should be "Described" because it provides concrete descriptive details about a certificate artifact that, while incomplete, can be enriched for detection. | The phrase specifies a particular certificate used for signing, akin to other partial file indicators that are classified as Described. |
| 7 | "second variant digital certificate used to sign the rootkit" → Mentioned | INCORRECT — should be "Described" because it similarly gives descriptive information about a specific certificate variant that can be further enriched for detection. | It details a particular digital certificate associated with the rootkit, making it more than merely a conceptual reference. |

| 8 | `Stuxnet` → `Mentioned` | CORRECT | The malware family name is used conceptually and isn’t a unique, exact indicator for detection. |
| 9 | `MS08-067` → `Actionable` | CORRECT | This is a complete, unique vulnerability identifier that can be directly matched. |
| 10 | `MS10-046b` → `Actionable` | CORRECT | It represents a full vulnerability identifier that is actionable as-is. |
| 11 | `MS10-061c` → `Actionable` | CORRECT | This complete vulnerability ID provides an exact artifact useful for automated detection. |
| 12 | `2347290` → `Actionable` | CORRECT | The numeric identifier is unique in its context and can be directly used for matching. |
| 13 | `Print Spooler Service` → `Mentioned` | CORRECT | The service name is generic and merely referenced conceptually, not as a precise detection indicator. |

| 14 | Microsoft Windows Update → Mentioned | CORRECT | It’s a generic product name reference, not a unique, actionable indicator. |
| 15 | MS10-046 → Described | CORRECT | As a vulnerability bulletin identifier, it requires additional context before automated detection. |
| 16 | Siemens WinCC → Described | INCORRECT — should be "Mentioned" because it is a generic product name reference without inherent detection specificity. | It’s a non-unique reference. |
| 17 | Step7 → Described | INCORRECT — should be "Mentioned" because it’s simply a generic software name lacking actionable properties. | It’s not sufficiently unique. |
| 18 | MS08-067 → Described | CORRECT | As a vulnerability bulletin identifier, it is contextually referenced and requires further enrichment to act upon. |

| 19 | "USB drives" → "Mentioned" | CORRECT | It’s a generic term referring to a type of device rather than a unique, actionable identifier. |
| 20 | "thumb drives" → "Mentioned" | CORRECT | It’s an alternate, generic reference to USB devices and not uniquely identifiable for direct detection. |
| 21 | "removable media" → "Mentioned" | CORRECT | It’s a broad, conceptual reference to devices and lacks the specificity to be actionable. |

| 22 | Siemens SIMATIC WinCC → Mentioned | CORRECT | It’s a generic software product name reference that isn’t unique enough for automated detection. |
| 23 | STEP 7 → Mentioned | CORRECT | It’s a generic reference to a software suite without a unique, actionable signature. |
| 24 | Microsoft Patch → Mentioned | CORRECT | The term is too generic and lacks specific details needed for direct detection. |
| 25 | SysClean tool → Mentioned | CORRECT | It names a tool conceptually without providing a unique indicator for automated response. |
| 26 | SIMATIC Security Update → Mentioned | CORRECT | It refers generically to a security update, offering insufficient specificity for detection. |
| 27 | WinCC project files → Described | CORRECT | It describes a category of files associated with WinCC that would require further details for actionable detection. |

| 28 | 1-844-Say-CISA → Actionable | CORRECT | The vanity phone number is complete and unique enough to be matched directly. |
| 29 | SayCISA@cisa.dhs.gov → Actionable | CORRECT | The email address is a full, uniquely identifiable contact that can be searched as-is. |
| 30 | </privacy=policy> → Described | CORRECT | The relative URL fragment lacks domain context, making it ambiguous and only suitable for description. |
| 31 | USA.gov → Mentioned | CORRECT | The generic government domain is referenced conceptually and not used as a unique detectable artifact. |
| 32 | </forms/feedback> → Described | CORRECT | The fragment is an incomplete URL path that requires additional context to be actionable. |

md file name: /content/validation/flamer-recipe-bluetoothache.md

| 1 | search → Mentioned | CORRECT | The string "search" is generic text without unique or specific detection details. |
| 2 | ರ → Mentioned | CORRECT | The isolated Unicode character lacks actionable context and remains a non-specific mention. |

| 3 | VMware Tanzu Platform → Mentioned | CORRECT | The observable is a product name reference rather than a unique, concrete indicator suitable for automated detection.  |

| 4 | VMware Cloud Foundation → Mentioned | CORRECT | The product name is a generic software reference and does not provide a unique, detectable string. |
| 5 | VMware vSphere Foundation 9.0 Beta Lau ... → Mentioned | CORRECT | The truncated product name is referenced generically and is not actionable. |
| 6 | Broadcom → Mentioned | CORRECT | It is a company name mentioned in context, not a unique indicator suitable for detection. |
| 7 | SSO login → Mentioned | CORRECT | "SSO login" is a generic authentication term and lacks the specificity for actionable detection. |

| 8 | cookies → Mentioned | CORRECT | This observable is a generic term with no unique, actionable properties. |
| 9 | Cookie Notice → Mentioned | CORRECT | The term refers to a generic document name and lacks the specificity needed for automated detection. |

===== ranking_results/ranking_results3.txt =====
md file name: /content/validation/report_44.md

| 1 | `ICS Operations` → `Mentioned` | CORRECT | The observable is a generic conceptual phrase without actionable specifics, so "Mentioned" is the appropriate rank. |

| 2 | EKANS → Described | CORRECT | "EKANS" is a malware family name and not a unique, directly matchable indicator, so it requires contextual enrichment. |
| 3 | MegaCortex → Described | CORRECT | "MegaCortex" is another malware family name that is referenced conceptually rather than as a unique, actionable artifact. |
| 4 | Snake ransomware → Described | CORRECT | "Snake ransomware" is used as an alias for EKANS and serves as a descriptive reference needing further context for detection. |
| 5 | W3ndige → Mentioned | CORRECT | As a Twitter handle of a researcher, "W3ndige" is a conceptual reference rather than a direct, actionable indicator. |

| 6 | EKANS → Described | CORRECT | Malware family names are generic descriptors and not unique detection indicators without additional context. |
| 7 | MEGACORTEX → Described | CORRECT | As a ransomware family name, it serves a descriptive purpose rather than offering a unique, actionable indicator. |

| 8 | `EKANS` → `Mentioned` | CORRECT | EKANS is a ransomware variant name referenced in context and is not a concrete, actionable indicator. |
| 9 | `Snake` → `Mentioned` | CORRECT | Snake is an alternate alias for the EKANS ransomware variant and is referenced conceptually rather than as a unique artifact. |
| 10 | `Turla` → `Mentioned` | CORRECT | Turla is a threat actor name mentioned in the report, making it a conceptual reference not directly actionable. |

| 11 | EKANS → Mentioned | CORRECT | A malware family name is generic and not a unique, directly matchable indicator. |
| 12 | update.exe → Described | CORRECT | The generic executable filename is ambiguous and could yield false positives if used alone. |
| 13 | 3d1cc4ef33bad0e39c757fce317ef82a → Actionable | CORRECT | An MD5 hash is a complete, unique identifier that can be directly matched. |
| 14 | f34e4b7080aa2ee5cfee2dac38ec0c306203b4ac → Actionable | CORRECT | A SHA1 hash is a complete, unique indicator suitable for automated detection. |
| 15 | e5262db186c97bbe533f0a674b08ecdafa3798ea7bc17c705df526419c168b60 → Actionable | CORRECT | A SHA256 hash is a fully formed, unique artifact that can be directly used in detection. |

| 16 | `C:/Users/WIN1/go/src/eoocimapbfojnpchcbcl/serviceStopper.go` → Actionable | CORRECT | This is a complete, absolute Windows file path that can be directly matched. |
| 17 | `C:/Users/WIN1/go/src/eoocimapbfojnpchcbcl/pStop.go` → Actionable | CORRECT | The file path is fully specified and unique, making it directly actionable. |
| 18 | `C:/Users/WIN1/go/src/eoocimapbfojnpchcbcl/misc.go` → Actionable | CORRECT | A complete file path that is exact and matchable without ambiguity. |
| 19 | `C:/Users/WIN1/go/src/eoocimapbfojnpchcbcl/getPartions.go` → Actionable | CORRECT | Fully specified Windows file path, suitable for direct detection. |
| 20 | `C:/Users/WIN1/go/src/eoocimapbfojnpchcbcl/footer.go` → Actionable | CORRECT | The provided absolute file path is a concrete indicator that can be matched as-is. |
| 21 | `C://Users/WIN1/go/src/jobnhbgmn/nfdlhophkeijadgfddim/nfdlhophkeijadgfddin/constants.go` → Actionable | CORRECT | Despite the double slash, it remains a complete and unique file path for automated detection. |
| 22 | `C:/Users/WIN1/go/src/eoocimapbfojnpchcbcl/delVSS.go` → Actionable | CORRECT | A fully qualified file path that is specific and directly actionable. |
| 23 | `C:/Users/WIN1/go/src/eoocimapbfojnpchcbcl/crypt.go` → Actionable | CORRECT | Complete file path meeting the criteria for direct matching and detection. |
| 24 | `C://Users/WIN1/go/src/eicppanngiigoeblpmd/heapjnpececncgncmcfb/1khInakioccljlbjoloc/bdalegiamceiigadonck/ ppnjmhoabnidcbmnhpoj/cojemfdcdhopolgcdpnm/service.go` → Actionable | CORRECT | Even with an embedded space, the full path is exact and unique, making it actionable. |
| 25 | `C://Users/WIN1/go/src/eicppanngiigoeblpmd/heapjnpececncgncmcfb/1khInakiocclibjoloc/bdalegiamedigadonck/ ppnjmhoabnidcbmnhpoj/cojemfdcdhopolgcdpnm/mgr.go` → Actionable | CORRECT | The complete file path, despite formatting nuances, is a concrete indicator. |
| 26 | `C://lsers/WIW1/go/src/eicppanngiigoeblppmd/heapjnpececacgncmcfb/lkhInakioccljlbjoloc/bdalegiandedigadonck/ ppnjmhoabnidcbmnhpoj/service.go` → Actionable | CORRECT | A fully defined file path that can be directly used for detection purposes. |
| 27 | `C:/Users/WIN1/go/src/jobhhbgnnifoffhhkdfmdnphigfmohf/caklkhbjildpnfmjcgac/process_windows.go` → Actionable | CORRECT | A precise and complete file path that is unambiguous in CTI context. |
| 28 | `C://Users/WIN1/go/src/jobnhbgnnif/effhhkdfmdnphigfmohf/caklkhbjildpnfmjcgac/process.go` → Actionable | CORRECT | Fully specified and unique file path, making it directly actionable. |
| 29 | `C:/Users/WIN1/go/src/jobnhbgnnifpodhhpkmf/ciffbcdgbdInejkjfbjk/pbijaooedmdfdbnenbcm/walk.go` → Actionable | CORRECT | The file path is complete and can be directly used for automated detection. |
| 30 | `C:/Users/WIN1/go/src/jobnhbgnnifpodhhpkmf/ciffbcdgbdInejkjfbjk/pbijaooedmdfdbnenban/symdir.go` → Actionable | CORRECT | A complete and exact file path that qualifies as an actionable indicator. |
| 31 | `C:/Users/WIN1/go/src/jobnhbgnnif/ciffbcdgbdInejkjfbjk/pbijaooedmdfdbnenbcm/scanner.go` → Actionable | CORRECT | This absolute file path is detailed and specific enough for direct matching. |
| 32 | `C:/Users/WIN1/go/src/jobhhbgnnifciffbcdgbdInejkjfbjk/pbijaooedmdfdbnenbcm/scandir_windows.go` → Actionable | CORRECT | The provided file path is complete and unambiguous, meeting actionable criteria. |
| 33 | `C:/Users/WIN1/go/src/jobnhbgmf/ciffbcdgbdInejkjfbjk/pbijaooedmdfdbnenbcm/readdir.go` → Actionable | CORRECT | Fully detailed Windows path that can be directly utilized in detection systems. |
| 34 | `C:/Users/WIN1/go/src/jobnhbgnnifpodhhpkmf/ciffbcdgbdInejkjfbjk/pbijaooedmdfdbnenbcm/dirent.go` → Actionable | CORRECT | A complete file path; its exact string can be matched by detection rules. |
| 35 | `C:/Users/WIN1/go/src/jobnhbgmifpodhhpkm/ciffbcdgbdInejkjfbjk/pbijaooedmdfdbnenbcm/debug_release.go` → Actionable | CORRECT | The full file path is unique and directly actionable without needing additional enrichment. |
| 36 | `C:/Users/NIN1/go/src/jobnhbgmn/cnipggilgipkfonngjcm/pifegfjpdoepfcnjnmeh/jmleabjnacdndkkifce/ disk_windows.go` → Actionable | CORRECT | Despite the embedded space, the file path is complete and specific enough to be a detection indicator. |
| 37 | `C:/Users/NIN1/go/src/jobnhbkm/cnipggilgipkfonngjcm/pifegfjpdoepfcnjnmen/jmleabjnacdndkkiifce/ disk.go` → Actionable | CORRECT | A fully specified file path that remains unique and matchable. |
| 38 | `C:/Users/WIN1/go/src/jobnhbgnnifpodhhpkmf/cnipggilgipktonngjcm/pitegtjpdoepfc` → Actionable | CORRECT | Even though it lacks an extension, the string is an exact file path fragment extracted for CTI purposes. |
| 39 | `fnlkcinffjndeioppeko/common_windows.go` → Actionable | CORRECT | This relative file path, including a unique directory segment, is specific enough to be directly actionable. |
| 40 | `C:/Users/WIN1/go/src/jobnhbgnnifpodhhpkmf/cnipggilgipkfonngjcm/pifegfjpdoepfcd` → Actionable | CORRECT | A complete file path segment that can be precisely matched in detection systems. |
| 41 | `fnlkcinffjndeioppeko/common.go` → Actionable | CORRECT | Despite being a relative path fragment, its unique components allow for actionable detection. |
| 42 | `C:/Users/WIN1/go/src/jobnhbgnnifpodhhpkmf/Bkplhakoiomfamamjleh/inpdjpeepnhkkp/` → Actionable | CORRECT | This directory path is fully specified and can be directly used for detection, meeting actionable criteria. |

| 43 | `EKANS` → `Actionable` | CORRECT | The mutex string is unique and can be directly matched for detection. |
| 44 | ```| _ctypes_test.pydHHzWX     | 1/10/2020 12:48 PM | PYDHHZWX File | … (file table data)``` → `Described` | CORRECT | The artifact is a descriptive file table that requires contextual interpretation rather than serving as a unique, directly detectable indicator. |
| 45 | `EKANS Ransom Note` → `Described` | CORRECT | It is merely a reference (caption) to the ransom note rather than the full actionable content. |
| 46 | `bapcocryp[AT]ctemplar] , .com` → `Actionable` | CORRECT | After trivial deobfuscation it represents a concrete email address usable for automated detection. |
| 47 | `C:\` → `Actionable` | INCORRECT — should be "Described" because it is a generic directory path common to Windows systems and not uniquely attributable to malicious activity. | The string is complete in format but too generic, leading to high false‐positives if used for detection. |
| 48 | `Dustman` → `Mentioned` | CORRECT | It is a malware family reference provided for context and not a unique, actionable identifier. |
| 49 | `LockerGoga` → `Mentioned` | CORRECT | The name is used conceptually as a malware family reference rather than a direct detection indicator. |
| 50 | `Ryuk` → `Mentioned` | CORRECT | It is a well‐known ransomware family name cited for context, not a unique actionable observable. |
| 51 | `MEGACORTEX` → `Mentioned` | CORRECT | It refers to a ransomware family name used conceptually rather than as a specific, actionable indicator. |

| 52 | 53dddbb304c79ae293f98e0b151c6b28 → Actionable | CORRECT | It is a full MD5 hash, which is unique and can be directly used in detection rules. |
| 53 | 2632529b0fb7ed46461c406f733c047a6cd4c591 → Actionable | CORRECT | It is a complete SHA1 hash that uniquely identifies an artifact and is directly actionable. |
| 54 | 873aa376573288fcf56711b5689f9d2cf457b76bbc93d4e40ef9d7a27b7be466 → Actionable | CORRECT | It is a full SHA256 hash with unique characteristics that make it directly matchable in detection systems. |
| 55 | EKANS → Mentioned | CORRECT | As a ransomware family name, it is referenced conceptually and is not a complete, unique indicator for automated detection. |
| 56 | MEGACORTEX → Mentioned | CORRECT | As with other ransomware family names, the term is generic and only conceptually referenced, making it non‐actionable. |

| 57 | Microsoft SQL servers → Described | CORRECT | It is a vendor-specific product reference that, while not a unique identifier, contains enough detail to be searchable with additional context. |
| 58 | Proficy servers → Described | CORRECT | It specifically names an industrial automation server product, making it descriptive rather than merely a conceptual reference. |
| 59 | HMI software → Mentioned | CORRECT | It is a generic term for human-machine interface software with no unique attributes, fitting the "Mentioned" category. |
| 60 | historian clients → Mentioned | CORRECT | It is a broad, conceptual reference to client software without specific identifying details. |
| 61 | licensing server → Mentioned | CORRECT | It is a generic description of a server function lacking the unique characteristics needed for actionable detection. |

| 62 | EKANS → Mentioned | CORRECT | As a malware family name, it is only referenced conceptually rather than being a unique, actionable indicator. |
| 63 | MEGACORTEX → Mentioned | CORRECT | Being a conceptual reference to a ransomware variant, it lacks the specificity required for automated detection. |

| 64 | Dustman → Described | CORRECT | The name is ambiguous and not unique enough for direct, actionable detection. |
| 65 | EKANS → Described | CORRECT | As a malware family name, it lacks the specificity required for actionable detection. |
| 66 | L → Mentioned | CORRECT | A single, ambiguous letter provides conceptual reference only and is non‑actionable. |
| 67 | Disttrack-like malware variants → Described | CORRECT | The descriptive phrase is too imprecise to drive a unique detection rule. |
| 68 | Shamoon → Described | CORRECT | Although recognized as a malware family, its use as an indicator is too ambiguous for direct detection. |
| 69 | ZeroCleare → Described | CORRECT | The variant’s name is referenced in context and does not offer a concrete, unique signature for detection. |

| 70 | EKANS → Described | CORRECT | The observable is just a ransomware family name without additional actionable details, matching the "Described" criteria. |

| 71 | `EKANS` → `Described` | CORRECT | The observable is a ransomware family name used for attribution rather than a unique, low‑false‑positive technical indicator. |
| 72 | `GE Proficy` → `Described` | CORRECT | The product name describes a specific ICS historian vendor asset but isn’t a concrete artifact that would yield reliable, low‑false‑positive automated detection. |

| 73 | unknown binary files → Described | CORRECT | "unknown binary files" is a generic description that lacks a unique actionable indicator, fitting the Described rank. |
| 74 | executable code → Described | CORRECT | The phrase "executable code" is a vague reference without unique identifiers, which aligns with the Described rank. |
| 75 | promiscuous logon activity → Mentioned | CORRECT | This is a generic behavioral indicator that cannot be directly matched for detection, thus appropriately ranked as Mentioned. |
| 76 | ransomware incidents → Mentioned | CORRECT | "Ransomware incidents" refers to a conceptual event without specific technical indicators, making it correctly classified as Mentioned. |

| 77 | `Synology network attached storage (NAS)` → `Described` | CORRECT | It describes a product without providing a unique, directly actionable artifact. |
| 78 | `SMB share` → `Mentioned` | CORRECT | It is a generic reference that does not yield a specific detection signature. |

| 79 | EKANS → Mentioned | CORRECT | “EKANS” is a malware family name referenced conceptually rather than a unique detection string. |
| 80 | MEGACORTEX → Mentioned | CORRECT | It is a malware family name and thus only conceptually referenced. |
| 81 | bluestripecollector.exe → Actionable | CORRECT | This is a complete, unique file name that can be matched directly. |
| 82 | ccflic0.exe → Actionable | CORRECT | The full executable name is provided, making it specific enough for detection. |
| 83 | ccflic4.exe → Actionable | CORRECT | The complete file name is a unique indicator that can power an exact match. |
| 84 | cdm.exe → Actionable | CORRECT | Although short, it is tied to a specific product (Nimsoft) and serves as a full indicator string. |
| 85 | certificateprovider.exe → Described | CORRECT | The note indicates ambiguity, meaning additional context is needed to act on it. |
| 86 | client.exe → Described | CORRECT | “client.exe” is generic and can lead to false positives without further enrichment. |
| 87 | client64.exe → Described | CORRECT | Its generic nature makes it unsuitable as a unique detection indicator on its own. |
| 88 | collwrap.exe → Actionable | CORRECT | The complete file name uniquely identifies the component tied to BlueStripe Data Collector. |
| 89 | config_api_service.exe → Actionable | CORRECT | This full executable name is specific enough for low–false positive detection. |
| 90 | dsmcsvc.exe → Actionable | CORRECT | The complete file name serves as an exact indicator associated with Tivoli Storage Manager Client. |
| 91 | epmd.exe → Actionable | INCORRECT — should be "Described" because the file name is common (e.g., Erlang’s epmd) and susceptible to false positives without additional context. | The indicator is a generic process name that requires further enrichment to be reliably actionable. |

| 92 | erlsrv.exe → Actionable | CORRECT | The file name is complete and exact, making it directly usable in detection rules. |
| 93 | fnplicensingservice.exe → Actionable | CORRECT | A full executable file name that is unique enough for actionable detection. |
| 94 | hasplmv.exe → Actionable | CORRECT | A complete and specific file name that can be directly matched. |
| 95 | hdb.exe → Actionable | CORRECT | The observable is a fully specified file name, making it actionable. |
| 96 | healthservice.exe → Actionable | CORRECT | The complete executable identifier qualifies as actionable. |
| 97 | ilicensevc.exe → Actionable | CORRECT | An exact file name that can be used directly in detection rules. |
| 98 | inet_gethost.exe → Actionable | CORRECT | The file name is presented in a complete, exact form that is actionable. |
| 99 | keysvc.exe → Described | CORRECT | The note indicates ambiguity, so a descriptive rank is appropriate. |
| 100 | managementagenthost.exe → Actionable | CORRECT | A fully detailed executable file name suitable for automated detection. |
| 101 | monitoringhost.exe → Actionable | CORRECT | The complete file name serves as a clear, actionable indicator. |
| 102 | msdtssrvr.exe → Actionable | CORRECT | Its exact file name makes it directly usable in detection systems. |
| 103 | msmdsrv.exe → Actionable | CORRECT | A complete, unambiguous file name that qualifies as actionable. |
| 104 | mustnotificationux.exe → Actionable | CORRECT | The full executable identifier is unique enough for direct matching. |
| 105 | n.exe → Described | CORRECT | The very short, ambiguous file name supports a descriptive rather than actionable rank. |
| 106 | nimbus.exe → Actionable | CORRECT | A distinct and complete file name that can be directly keyed on. |
| 107 | npmdagent.exe → Actionable | CORRECT | The observable is a full file name that meets actionable criteria. |
| 108 | ntevl.exe → Actionable | CORRECT | Its complete and exact nature makes it suitable for automated detection. |
| 109 | ntservices.exe → Actionable | CORRECT | The file name is fully specified and can be reliably used for detection. |
| 110 | pralarmmgr.exe → Actionable | CORRECT | A complete executable name that can serve as a direct indicator. |
| 111 | prcalculationmgr.exe → Actionable | CORRECT | The full file name identifier makes it actionable in detection systems. |
| 112 | prconfigmgr.exe → Actionable | CORRECT | A complete and exact file name that is well suited for detection rules. |
| 113 | prdatabasemgr.exe → Actionable | CORRECT | The exact observable string qualifies it as an actionable indicator. |
| 114 | premailengine.exe → Actionable | CORRECT | A fully specified file name that can be immediately leveraged in detection. |
| 115 | preventmgr.exe → Actionable | CORRECT | Its complete file name makes it directly identifiable in logs. |
| 116 | pritpengine.exe → Actionable | CORRECT | A specific file name that can be used as a concrete, matchable indicator. |
| 117 | prgateway.exe → Actionable | CORRECT | The full executable name is unique enough to be actionable. |
| 118 | prlicensingmgr.exe → Actionable | CORRECT | A complete and unambiguous file name that supports automated detection. |
| 119 | proficyadministrator.exe → Actionable | CORRECT | The full file name provides a clear, actionable indicator. |
| 120 | proficyclient.exe → Actionable | CORRECT | An exact, complete executable name that is actionable for detection. |
| 121 | proficypublisherservice.exe → Actionable | CORRECT | The observable is a detailed file name that permits direct detection. |
| 122 | proficyserver.exe → Actionable | CORRECT | A complete and unique file name that is directly actionable. |
| 123 | proficists.exe → Actionable | CORRECT | The file name is fully specified and thus qualifies as actionable. |
| 124 | prprintserver.exe → Actionable | CORRECT | A complete file name that can be directly used in security monitoring. |
| 125 | prproficymgr.exe → Actionable | CORRECT | The exact file name provides a concrete, actionable identifier. |
| 126 | prrds.exe → Actionable | CORRECT | Its full and specific nature makes it suitable for direct matching. |
| 127 | prreader.exe → Actionable | CORRECT | A complete file name that meets actionable criteria for detection. |
| 128 | prrouter.exe → Actionable | CORRECT | The file name is fully specified, ensuring it is directly actionable. |
| 129 | prschedulemgr.exe → Actionable | CORRECT | A unique and complete executable name that is actionable for detection. |
| 130 | prstubber.exe → Actionable | CORRECT | The observable is a full file name, making it directly matchable. |
| 131 | prsummarymgr.exe → Actionable | CORRECT | Its detailed file name qualifies it as an actionable indicator. |
| 132 | prwriter.exe → Actionable | CORRECT | A complete and unique file name that can be used in detection rules. |
| 133 | reportingservicesservice.exe → Actionable | CORRECT | The full executable name makes it a clear, actionable observable. |
| 134 | server_eventlog.exe → Described | CORRECT | The provided note of ambiguity justifies the descriptive rank. |
| 135 | server runtime.exe → Described | CORRECT | Ambiguity as noted in the CTI table makes a descriptive rank appropriate. |
| 136 | spooler.exe → Described | CORRECT | The ambiguous nature of the file name is correctly reflected with a Described rank. |
| 137 | sqlservr.exe → Actionable | CORRECT | Without an ambiguity note, the complete file name is treated as actionable. |
| 138 | taskhostw.exe → Actionable | CORRECT | A fully specified file name that clearly meets actionable criteria. |
| 139 | vgauthservice.exe → Actionable | CORRECT | The file name is unique and complete, making it directly usable for detection. |
| 140 | vmacthlp.exe → Actionable | CORRECT | A distinct executable file name that qualifies as an actionable observable. |
| 141 | vmtoolsd.exe → Actionable | CORRECT | The complete file name enables direct matching in detection rules. |
| 142 | win32sysinfo.exe → Actionable | CORRECT | A clear and specific file name that makes it actionable. |
| 143 | winvnc4.exe → Actionable | CORRECT | The full executable identifier meets criteria for actionable detection. |
| 144 | workflowresttest.exe → Described | CORRECT | The note indicating ambiguity supports a descriptive rank rather than actionable. |

| 145 | `SNAKE Ransomware` → `Mentioned` | CORRECT | It is simply a malware family name referenced in context, not a concrete, actionable artifact. |
| 146 | `EKANS Ransomware` → `Mentioned` | CORRECT | As a malware family name, it is a generic text reference rather than a unique, directly detectable indicator. |
| 147 | `ICS Opera` → `Mentioned` | CORRECT | This is a ransomware family name with no additional actionable details supplied. |
| 148 | `Snake` → `Mentioned` | CORRECT | The shortened form is ambiguous and lacks the specificity needed for automated detection. |
| 149 | `Turla` → `Mentioned` | CORRECT | Threat actor names like this are conceptual references and not direct, actionable artifacts. |
| 150 | `snake/Uroburos` → `Mentioned` | CORRECT | The dual naming indicates ambiguity, making it unsuitable for a precise, automated match. |
| 151 | `SCADA Ransomware` → `Mentioned` | CORRECT | This generic descriptor does not provide a unique, concrete signature for actionable detection. |
| 152 | `Proficy Historian` → `Mentioned` | CORRECT | As a product name reference, it lacks the specificity required for actionable automated detection. |
| 153 | `HMIWeb Solutions` → `Mentioned` | CORRECT | The observable names a product without offering a unique, searchable attribute. |
| 154 | `ThingWorx Industrial Connectivity` → `Mentioned` | CORRECT | A product name that is referenced conceptually rather than as a distinct, actionable indicator. |
| 155 | `FlexNet Licensing` → `Mentioned` | CORRECT | Being a general product/tool name, it is used conceptually and isn’t a unique artifact for detection. |
| 156 | `Sentinel HASP` → `Mentioned` | CORRECT | This software product name remains a conceptual reference without actionable matching criteria. |
| 157 | `LockerGoga` → `Mentioned` | CORRECT | The ransomware family name is generic and conceptual, not a direct automated detection signature. |
| 158 | `CTemplar` → `Mentioned` | CORRECT | As an email service name, it is merely a reference without concrete, actionable attributes. |
| 159 | `Dustman Wiper` → `Mentioned` | CORRECT | This is a generic malware name, serving only as a conceptual reference rather than a unique identifier. |
| 160 | `MegaCortex Ransomware` → `Mentioned` | CORRECT | The name is a general indicator for a ransomware family and lacks the detail needed for actionable detection. |
| 161 | `MegaCortex Version 2 Ransomware` → `Mentioned` | CORRECT | Despite the version detail, it remains a malware family name that isn’t unique enough for automated detection. |
| 162 | `Snake: Industrial-focused Ransomware with Ties to Iran` → `Mentioned` | CORRECT | Even with added descriptive text, it functions as a conceptual title rather than a unique, actionable pattern. |
| 163 | `Shamoon2` → `Mentioned` | CORRECT | This malware variant name is used as a general reference without providing an exact artifact for detection. |
| 164 | `RawDisk` → `Mentioned` | CORRECT | As a tool name, it is an ambiguous reference not specific enough for automated matching. |
| 165 | `ZeroCleare` → `Mentioned` | CORRECT | The wiper name is used as a generic reference and lacks the detail necessary for an actionable indicator. |
| 166 | `Shamoon` → `Mentioned` | CORRECT | The malware family name is conceptual and not presented as a distinct, unique artifact for detection. |
| 167 | `NotPetya` → `Mentioned` | CORRECT | Although well-known, it is referenced historically and lacks the concrete specificity required for actionable detection. |

| 168 | EKANS Ransomware → Mentioned | CORRECT | The string is a generic malware family name and does not provide a unique, actionable technical indicator. |

md file name: /content/validation/report_38.md

| 1 | `QUISERCENTRICS Cookiebot` → `Mentioned` | CORRECT | The observable is a product name provided as plain text without unique technical identifiers, making it non-actionable.  |

| 2 | ExPetr → Mentioned | CORRECT | The malware family name is used conceptually for comparison rather than as a concrete, unique detection indicator. |
| 3 | install_flash_player.exe → Actionable | CORRECT | The filename is a complete, exact identifier that can be directly matched in detection rule contexts. |
| 4 | C:Windowsinfpub.dat → Actionable | CORRECT | Despite its unconventional formatting, the file path is a concrete artifact suitable for precise matching. |
| 5 | rund||32 → Actionable | CORRECT | The string is a unique, complete process launch indicator that can be used for detection. |
| 6 | QUISERCENTRICS Cookiebot → Mentioned | CORRECT | The tool name is referenced in context as part of legitimate infrastructure, making it a conceptual mention rather than an actionable indicator. |

| 7 | "infpub.dat" → "Actionable" | CORRECT | The file name is a concrete, complete indicator that can be directly matched in endpoint logs. |
| 8 | "RSA-2048" → "Mentioned" | CORRECT | It only specifies the encryption algorithm without providing actionable key material. |

| 9 | "QUISERCENTRICS Cookiebot" → "Mentioned" | CORRECT | This product name is generic and not directly actionable, aligning with the "Mentioned" rank. |

| 10 | dispci.exe → Actionable | CORRECT | The executable’s filename is a complete string from EDR logs that can be exactly matched with low likelihood of false positives. |
| 11 | DiskCryptor → Mentioned | CORRECT | It’s a reference to a known legitimate utility rather than a uniquely identifying artifact. |
| 12 | 65537 (0x10001) → Mentioned | CORRECT | As a common RSA exponent, this value is non‑unique and only conceptually referenced. |
| 13 | Game Of Thrones → Mentioned | CORRECT | It’s a cultural reference found in the code strings and isn’t actionable for detection. |

| 14 | QUISERCENTRICS Cookiebot → Mentioned | CORRECT | It is a non-actionable product/service reference that isn’t a concrete, unique technical indicator. |

| 15 | RSA-2048 → Mentioned | CORRECT | "RSA-2048" is a generic encryption algorithm identifier that isn't a directly actionable IOC. |
| 16 | ExPetr → Mentioned | CORRECT | As a malware family name, it is referenced conceptually and is not a searchable artifact by itself. |
| 17 | | A- volo artis = = f. D = ] B-1 l- '+ - = = ] F = Dotus hools van varians = ' ... → Described | CORRECT | The markdown table block is a structured representation requiring further extraction before it can be used in automated detection. |

| 18 | QUISERCENTRICS Cookiebot → Described | CORRECT | The observable is a product name which is ambiguous and not a unique, directly searchable technical artifact.  |

| 19 | DiskCryptor → Mentioned | CORRECT | The string refers to a well-known open-source tool used conceptually rather than as a unique, actionable indicator. |
| 20 | dcrypt.sys → Actionable | CORRECT | It is a complete, specific file name that can be directly matched for detection. |
| 21 | C:Windowscscc.dat → Actionable | CORRECT | As a full file path, it is unique and directly searchable. |
| 22 | drv_ioctl.c → Described | CORRECT | The source file name is generic and not inherently unique, warranting a "Described" classification. |
| 23 | dispci.exe → Actionable | CORRECT | The executable file name is a complete indicator that can be matched directly in detection systems. |
| 24 | CryptGenRandom → Mentioned | CORRECT | It is a generic Windows API function, making it conceptually referenced and not unique for automated detection. |
| 25 | AES cipher in XTS mode → Mentioned | CORRECT | The observable describes a standard encryption algorithm/mode, not a unique identifier for detection. |

| 26 | `QUISERCENTRICS Cookiebot` → Actionable | CORRECT | The string is a unique identifier extracted directly from malware debugging output, making it directly matchable. |
| 27 | `QUSERCENTRICS Cookiebot` → Actionable | CORRECT | Despite being a variant, it remains a complete, unique identifier used by the malware for internal tracking. |
| 28 | `XZ Utils` → Mentioned | CORRECT | It references a well‐known open source compression utility rather than a unique, matchable malware artifact. |

| 29 | `personal installation key#2` → `Actionable` | CORRECT | The note confirms this unique exact string can be directly matched for detection. |
| 30 | `Readme file` → `Described` | CORRECT | The observable is a generic filename making it unsuitable for precise automated detection. |

| 31 | "QUISERCENTRICS Cookiebot" → "Described" | CORRECT | The observable is a product name mention that requires contextual enrichment rather than being a unique, directly actionable string. |
| 32 | "Trojan-Ransom.Win32.Gen.ftl" → "Actionable" | CORRECT | It is a complete, unique malware signature that can be directly matched by detection rules. |
| 33 | "Trojan-Ransom.Win32.BadRabbit" → "Actionable" | CORRECT | The string is a full antivirus detection signature, making it precise and actionable. |
| 34 | "DangerousObject.Multi.Generic" → "Actionable" | CORRECT | Despite containing "Generic," it is provided as an exact antivirus signature used for detection and is thus actionable. |
| 35 | "PDM:Trojan.Win32.Generic" → "Actionable" | CORRECT | This is a complete detection signature indicator that can be matched directly in EDR logs. |
| 36 | "Intrusion.Win.CVE-2017-0147.sa.leak" → "Actionable" | CORRECT | The value fully identifies a specific intrusion detection signature tied to a known CVE, making it actionable. |
| 37 | "multibyte2wide" → "Described" | CORRECT | As a function name under analysis, it lacks the unique, complete context required for direct automated detection. |
| 38 | "0xE5A05A00 mcshield.exe {McAfee Scanner Service}" → "Actionable" | CORRECT | The observable provides a complete process indicator including a hash and executable name, suitable for direct matching. |
| 39 | "0xC8F10976 mfevtps.exe {McAfee Process Validation Service}" → "Actionable" | CORRECT | It is an exact process detection signature with all necessary elements to form actionable indicators. |
| 40 | "0x923CA517 McTray.exe {McTray Application}" → "Actionable" | CORRECT | This process indicator is complete with hash, executable, and descriptor, making it directly actionable. |

| 41 | `FRBA` → `Mentioned` | CORRECT | The string is ambiguous and not unique enough to be actionable. |
| 42 | `QUISERCENTRICS Cookiebot` → `Mentioned` | CORRECT | It merely references a software tool without providing unique, actionable attributes. |

md file name: /content/validation/report_20.md

| 1 | `BlackEnergy` → `Described` | CORRECT | The malware family name is used descriptively and is not a concrete technical artifact for detection. |
| 2 | `SSHBearDoor` → `Described` | CORRECT | The threat actor group name is a descriptive attribution that does not enable direct automated detection. |

| 3 | BlackEnergy → Described | CORRECT | A malware family name is a generic indicator requiring contextual enrichment rather than serving as a unique, actionable IOC. |
| 4 | KillDisk → Described | CORRECT | Like other malware component names, it is descriptive and not a unique, directly actionable indicator. |
| 5 | SSH backdoor → Mentioned | CORRECT | The term is generic and conceptual, making it unsuitable for direct automated detection. |
| 6 | threatintel@eset.com → Actionable | CORRECT | Email addresses are specific, unique identifiers that can be reliably matched in detections. |

| 7 | ft/derstatus.php → Actionable | CORRECT | The PHP file endpoint is a unique, exact string that can be directly matched. |
| 8 | KS081274.php → Actionable | CORRECT | The file name is a complete identifier that can be used in detection rules with low false‑positives. |
| 9 | 2015en → Actionable | CORRECT | The build ID is a unique, complete value extracted from the malware configuration, making it actionable. |
| 10 | khm10 → Actionable | CORRECT | As a unique build ID from the configuration, it can be directly matched for detection. |
| 11 | khelm → Actionable | CORRECT | The string is a full, unique build ID value from BlackEnergy, thus actionable. |
| 12 | 2015telsmi → Actionable | CORRECT | This unique build ID from the configuration qualifies as an exact, actionable indicator. |
| 13 | 2015ts0 → Actionable | CORRECT | The concatenated build ID is complete and unique, making it directly actionable. |
| 14 | 2015stb → Actionable | CORRECT | As a unique build ID value from the malware configuration, it is actionable for detection. |
| 15 | kiev → Actionable | CORRECT | The build ID is a unique identifier that can be directly matched for detection. |
| 16 | brd2015 → Actionable | CORRECT | This unique build ID from the BlackEnergy configuration is complete and actionable. |

| 17 | BlackEnergy → Mentioned | CORRECT | Threat actor names are conceptually referenced and are not directly actionable. |
| 18 | unicode 0, <a.iuf.ivr.ivs.izz.izzy.jnv.jss.jts.jtv.k3g.kmv.lrec.lrv.l> → Described | CORRECT | The file extension list is ambiguous and requires additional context for detection. |
| 19 | unicode 0, <sf.lsx.lvix.m15.m1pg.m1v.m21.m21.m21.m2ts.m2v.m4e.m4u> → Described | CORRECT | As an unordered list of file extensions, it is non‑unique and only described. |
| 20 | unicode 0, <.m4v.m75.mani.meta.mgv.mj2.mjp.mjpg.mk3d.mkv.mnv.mnv.mob.> → Described | CORRECT | The observable is a non‑unique enumeration of file extensions, fitting the described category. |
| 21 | unicode 0, <mod.moff.moi.mov.mov.movie.mp21.mp21.mp2v.mp4.infovi> → Described | CORRECT | This is a list of file extensions that is ambiguous and not directly actionable. |
| 22 | unicode 0, <d.mp4v.mpe.mpeg1.mpeg4.mpf.mpg.mpg2.mpgindex.mpl.mpl> → Described | CORRECT | The extension list does not provide a unique identifier for direct detection. |
| 23 | unicode 0, <s.mpsub.mpv.mpv2.mqv.msdvd.msh.mswmm.mts.mtv.mvd.> → Described | CORRECT | The file extension enumeration is ambiguous and only descriptive in nature. |
| 24 | unicode 0, <mve.moex.mop.my.my.mys.ncor.nut.nuv.nuc.nuv.nvc.ogm.ogv> → Described | CORRECT | The observable’s ambiguous list of extensions is not sufficiently unique for actionable detection. |
| 25 | unicode 0, <. ogx.orv.otrkey.par.pds.pgi.photoshow.piv.pjs.playlist.pl> → Described | CORRECT | This file extension list is non‑specific and requires enrichment, hence described. |
| 26 | unicode 0, <proj.pmF.pmv.ppj.prel.pro.pro4dvd.pro5dvd.progc.prproj.pr> → Described | CORRECT | The enumerated file extensions are ambiguous and properly classified as described. |

| 27 | unicode 0, <tx.tib.vhd.iso.lib.mdb.accdb.sq1.ndf.xml.rtf.ini.cfg.boot> unicode 0, <.txt.rar.msi.zip.jpg.bmp.jpeg.tiff>,0 → Described | CORRECT | The observable is a captured list of file extensions intended for context rather than a unique, directly matchable detection indicator. |
| 28 | O komut.exe → Actionable | CORRECT | The process name is a complete and exact string from endpoint logs, making it directly actionable in detection rules. |
| 29 | O sec service.exe → Actionable | CORRECT | The process name is provided in full, allowing for precise detection without ambiguity. |
| 30 | ASEM Ubiquity → Mentioned | CORRECT | The observable is a software/tool name referenced for contextual association, which isn’t directly used for automated detection. |
| 31 | ELTIMA Serial to Ethernet Connector → Mentioned | CORRECT | The software/tool name is noted as context and cannot be directly transformed into a unique detection indicator. |

| 32 | `6789` → `Actionable` | CORRECT | The port number is a complete, specific identifier that can be directly used in detection rules. |
| 33 | `SSH server` → `Mentioned` | CORRECT | It is a generic reference to software rather than a precise, actionable identifier. |
| 34 | `backdoor` → `Mentioned` | CORRECT | It is a broad, conceptual term that lacks the specificity required for automated detection. |
| 35 | `opbear\" 6789", 0, false` → `Actionable` | CORRECT | The code snippet is a unique artifact that can be matched directly by detection rules.

| 36 | 5.149.254.114 → Actionable | CORRECT | The IPv4 address is unique and directly matchable in detection rules. |
| 37 | 5.9.32.230 → Actionable | CORRECT | The IPv4 address is fully specified and can be used for precise detection. |
| 38 | 31.210.111.154 → Actionable | CORRECT | The fully-formed IPv4 address is actionable as it’s unique and easily matched. |
| 39 | 88.198.25.92 → Actionable | CORRECT | The IPv4 address is complete and can directly trigger automated detection. |
| 40 | 146.0.74.7 → Actionable | CORRECT | This IPv4 address is specific enough to be used in detection systems. |
| 41 | 188.40.8.72 → Actionable | CORRECT | A complete IPv4 address that is actionable for network traffic monitoring. |
| 42 | AA67CA4FB712374F5301D1D2BAB0AC66107A4DF1 → Actionable | CORRECT | This SHA‑1 hash conforms to the expected 40‑hex format, making it directly actionable. |
| 43 | 4C424D5C8CFFDF8D2164B9F833F7C631F94C5A4C → Actionable | CORRECT | A fully valid SHA‑1 hash that can be exactly matched by detection rules. |
| 44 | 896FCACFF6310BBE5335677E99E4C3D370F73D96 → Actionable | CORRECT | The SHA‑1 hash is complete and unique, thus fit for actionable detection. |
| 45 | 069163E1FB606c6178E23066E0AC7B7F0E18506B → Actionable | CORRECT | Despite mixed case, this SHA‑1 hash is a complete, actionable identifier. |
| 46 | 0B4BE96ADA3B54453BD37130087618EA90168D72 → Actionable | CORRECT | A valid and complete SHA‑1 hash that can be used for automated matching. |
| 47 | 1A716BF5532C13FA0DC407D00ACDC4A457FA87CD → Actionable | CORRECT | The SHA‑1 hash is properly formed and directly actionable. |
| 48 | 1A86F7EF10849DA7D36CA27D0C9B1D686768E177 → Actionable | CORRECT | A fully specified SHA‑1 hash that supports immediate automated detection. |
| 49 | 1CBE4E22B034EE8EA8567E3F8EB9426B30D4AFFE → Actionable | CORRECT | The observable is a complete SHA‑1 hash, making it directly usable in detection contexts. |
| 50 | 20001007670年5月20c720676550161766705で27 → Actionable | INCORRECT — should be "Described" because the value contains non‑hex characters and does not conform to a proper SHA‑1 hash format, creating ambiguity for direct matching. | The inclusion of characters like "年", "月", and "で" means the indicator isn’t a clear, complete hash and requires further clarification before automated detection. |

| 51 | E1C2B28E6A35AEADB508C60A9D09AB7B1041AFB8 → Actionable | CORRECT | The SHA-1 hash is a complete, unique identifier that can be directly used for detection. |
| 52 | E40F0D402FDCBA6DD7467C1366D040B02A44628C → Actionable | CORRECT | The SHA-1 hash is a complete, unique identifier that can be directly used for detection. |
| 53 | E5A2204F085C07250DA07D71CB4E48769328D7DC → Actionable | CORRECT | The SHA-1 hash is a complete, unique identifier that can be directly used for detection. |

| 54 | 16F44FAC7E8BC94ECCD7AD9692E6665EF540EEC4 → Actionable | CORRECT | The SHA‑1 hash is a complete, unique identifier suitable for direct matching. |
| 55 | 8AD6F88C5813C2B4CD7ABAB1D6C056D95D6AC569 → Actionable | CORRECT | The SHA‑1 hash is a complete, unique identifier suitable for direct matching. |
| 56 | 6D6BA221DA5B1AE1E910BBEAA07BD44AFF26A7C0 → Actionable | CORRECT | The SHA‑1 hash is a complete, unique identifier suitable for direct matching. |
| 57 | F3E41EB94C4D72A98CD743BBB02D248F510AD925 → Actionable | CORRECT | The SHA‑1 hash is a complete, unique identifier suitable for direct matching. |

| 58 | 72D0B326410E1D0705281FDE83CB7C33C67BC8CA → Actionable | CORRECT | The SHA-1 hash is a complete, unique identifier that can be directly matched for detection. |

| 59 | `166D71C63D0EB609C4F77499112965DB7D9A51BB` → `Actionable` | CORRECT | It's a complete SHA‑1 hash that can be directly matched per Rule 2. |
| 60 | `Win32/SSHBearDoor.A trojan` → `Mentioned` | INCORRECT — should be "Described" because it is a malware family label that provides context but isn’t sufficiently specific for direct detection. | Malware family names are descriptive labels requiring enrichment to create reliable detection rules. |

md file name: /content/validation/report_21.md

| 1 | `RANSOMWARE` → `Mentioned` | CORRECT | It is a generic reference to a malware category without unique actionable attributes. |

| 2 | paloalto → Mentioned | CORRECT | The observable is an organizational reference and not a concrete, unique artifact suitable for direct detection. |
| 3 | UNIT 42 → Mentioned | CORRECT | The observable is simply a name reference for an organization, making it non‑actionable. |

| 4 | `-f` → `Described` | CORRECT | The flag “-f” is a generic command‐line option that by itself is ambiguous and unsuitable for direct, low–false-positive detection. |
| 5 | `Log:` → `Described` | CORRECT | “Log:” is merely a command–line argument prefix and lacks the uniqueness necessary for automated actionable detection. |
| 6 | `File:` → `Described` | CORRECT | “File:” is a generic parameter indicator that does not offer a unique, complete identifier for detection. |
| 7 | `cl.log` → `Described` | CORRECT | Although “cl.log” is a complete file name, its generic nature makes it ambiguous and unsuitable for direct actionable matching.

| 8 | `| 000000000 |       |       |       |    | 4D 49 47 64 4D 41 30 47 |  |       |       |  | 43 53 71 47 53 49 62 33 |    |                         | MIGdMA0GCSqGSIb3  | ... Table 2. RSA Public key found in initial LockerGoga sample` → `Actionable` | CORRECT | The full RSA public key is completely captured and unique, making it directly matchable for detection. |
| 9 | `RSA-OAEP MGF1(SHA-1)` → `Mentioned` | CORRECT | It merely references the RSA padding scheme and isn’t a concrete, unique indicator. |
| 10 | `LockerGoga` → `Mentioned` | CORRECT | As a malware family name, it’s a conceptual reference rather than a uniquely actionable identifier. |
| 11 | `Cryptopp library` → `Mentioned` | CORRECT | It names a cryptographic tool and is descriptive rather than a precise, actionable artifact. |

| 12 | "Figure 1. Data encrypted in 80,000 byte chunks" → Described | CORRECT | The observable is a qualitative description of an encryption process rather than a unique, actionable technical indicator.  |

| 13 | `-r` → `Described` | CORRECT | The short command line flag "-r" is ambiguous and not unique enough to be directly actionable. |
| 14 | `-1` → `Described` | CORRECT | The parameter "-1" is similarly generic and serves only as descriptive context rather than an exact detection indicator. |
| 15 | `LockerGoga ransomware` → `Mentioned` | CORRECT | As a malware family name, it is used conceptually and is not uniquely actionable by itself. |
| 16 | `doc` → `Described` | CORRECT | The file extension "doc" is generic and requires additional context for actionable detection. |
| 17 | `dot` → `Described` | CORRECT | "dot" as a file extension is non‐unique, making it appropriate as a descriptive indicator. |
| 18 | `wbk` → `Described` | CORRECT | The "wbk" file extension is generic and not sufficiently distinct to be directly actionable. |
| 19 | `docx` → `Described` | CORRECT | "docx" is a common file extension and fits a Described rank due to its ambiguity in isolation. |
| 20 | `dotx` → `Described` | CORRECT | The file extension "dotx" is generic, aligning with a descriptive rather than actionable classification. |
| 21 | `docb` → `Described` | CORRECT | "docb" is simply a file extension noted in context and is not uniquely identifying for detection. |
| 22 | `x1m` → `Described` | CORRECT | The extension "x1m" is ambiguous without further context, making it Described. |
| 23 | `xlsx` → `Described` | CORRECT | "xlsx" is a widely used file extension and does not provide sufficient uniqueness for actionable detection. |
| 24 | `xltx` → `Described` | CORRECT | As with other common file extensions, "xltx" is only descriptive due to its generality. |
| 25 | `x1sb` → `Described` | CORRECT | The file extension "x1sb" is generic and needs more context to be considered actionable. |
| 26 | `x1w` → `Described` | CORRECT | "x1w" is an ambiguous file extension, appropriately ranked as Described. |
| 27 | `ppt` → `Described` | CORRECT | The "ppt" extension is common and not uniquely identifying, fitting a Described classification. |
| 28 | `potx` → `Described` | CORRECT | "potx" is a generic file extension, thus detection would require additional enrichment. |
| 29 | `ppsx` → `Described` | CORRECT | The file extension "ppsx" is ambiguous and serves only as a descriptive piece of information. |
| 30 | `s` → `Described` | CORRECT | A single-letter file extension like "s" is extremely generic, justifying a Described rank. |
| 31 | `dx` → `Described` | CORRECT | "dx" as a file extension lacks distinctiveness and is correctly rated as Described. |
| 32 | `pdf` → `Described` | CORRECT | The "pdf" extension, while noted in reports, is too common to be considered actionable on its own. |

| 33 | README NOW.txt → Actionable | CORRECT | The file name is unique enough and used by the ransomware, making it directly matchable. |
| 34 | README LOCKED.TXT → Actionable | CORRECT | As a unique ransomware note file name, it can be used for direct detection. |
| 35 | T → Described | CORRECT | A single-letter command line parameter is ambiguous and requires additional context. |
| 36 | -S → Described | CORRECT | The short command line parameter is too generic for automated detection. |
| 37 | -m → Described | CORRECT | The master process flag is ambiguous and not unique enough for direct matching. |
| 38 | /w → Described | CORRECT | The command line parameter is generic and requires further context before being used in detection. |
| 39 | SM-zzbdrimp → Actionable | CORRECT | The mutex string is complete and unique, making it directly actionable. |
| 40 | svchost|numeric value|exe → Described | CORRECT | The placeholder pattern is ambiguous and cannot be directly turned into a detection rule. |
| 41 | NtQuerySection → Mentioned | CORRECT | As a Windows API call, it is generic and serves only as a conceptual reference. |
| 42 | HuHuHUHoHo283283@dJD → Actionable | CORRECT | This hard-coded credential is a unique exact string usable for direct detection. |
| 43 | WS2 32.dll → Described | CORRECT | The ambiguous DLL name (likely a typo) is not distinct enough for precise automation. |
| 44 | ALISA LTD → Actionable | CORRECT | The digital signer string is a complete, unique identifier tied to the malware binaries. |
| 45 | KITTY'S LTD → Actionable | CORRECT | The exact digital signing entity name is sufficiently specific for detection purposes. |
| 46 | MIKL LIMITED → Actionable | CORRECT | The unique digital signer name qualifies as an actionable indicator. |
| 47 | Goga → Described | CORRECT | The simple binary marker is too generic on its own and requires additional context to avoid false positives. |

md file name: /content/validation/report_30.md

===== ranking_results/ranking_results4.txt =====
md file name: /content/validation/TrickBot Malware Infection Leads to Ryuk Ransomware _ Google Cloud Blog.md

| 1 | TEMP.MixMaster → Mentioned | CORRECT | The campaign name is a generic reference and not a unique, actionable artifact. |
| 2 | Ryuk → Mentioned | CORRECT | As a malware family name, it is conceptually referenced and not a unique detection indicator. |
| 3 | TrickBot → Mentioned | CORRECT | The malware name is used in a descriptive context and isn’t a concrete, unique signature. |
| 4 | EMPIRE → Mentioned | CORRECT | The tool name is generic and serves as a conceptual reference, not an exact match for automated detection. |
| 5 | RDP → Mentioned | CORRECT | The protocol reference is too generic to be used as a precise detection indicator. |
| 6 | gtags → Mentioned | CORRECT | Although noted as a campaign identifier, the string is too generic to drive low false‑positive automated detection. |
| 7 | Hermes → Mentioned | CORRECT | The ransomware kit name is used conceptually and does not provide a unique actionable signature. |
| 8 | GRIM SPIDER → Mentioned | CORRECT | As an alternate campaign label, it is a conceptual reference rather than a precise, actionable indicator. |
| 9 | APT38 → Mentioned | CORRECT | Threat actor names are used for attribution and are not directly actionable for automated detection. |

| 10 | `Ryuk ransomware` → `Mentioned` | CORRECT | The observable is a generic malware family name referenced conceptually, which fits the "Mentioned" classification. 

| 11 | TrickBot → Mentioned | CORRECT | As a generic malware family name, it isn’t unique enough to drive direct automated detection. |
| 12 | Ryuk → Mentioned | CORRECT | As a ransomware family name, it is referenced conceptually and isn’t directly actionable. |
| 13 | Payrollschedule.xls → Described | CORRECT | The file name is specific but not unique, requiring additional context to be reliably actionable. |

| 14 | TrickBot → Actionable | INCORRECT — should be "Mentioned" because "TrickBot" is a generic malware family name referenced conceptually rather than a unique, matchable indicator. | Malware family names are not unique technical artifacts for automated detection. |
| 15 | sharedll → Actionable | CORRECT | "sharedll" is a specific module name used by TrickBot that can be exactly matched in logs. |
| 16 | tabdll → Actionable | CORRECT | "tabdll" is a concrete identifier of a TrickBot propagation module, suitable for direct detection. |
| 17 | SMB → Mentioned | CORRECT | "SMB" is a standard protocol term referenced conceptually, not a unique technical indicator. |

| 18 | `Ryuk` → `Mentioned` | CORRECT | "Ryuk is a malware family name referenced conceptually, not a unique, machine-actionable indicator." |
| 19 | `Empire` → `Mentioned` | CORRECT | "The name Empire refers to a framework and is used conceptually rather than as a concrete IOC." |
| 20 | `RDP` → `Mentioned` | CORRECT | "RDP is a protocol identifier and is too generic to serve as a direct detection indicator." |
| 21 | `NewBCtestDll` → `Actionable` | CORRECT | "The DLL name is a complete, unique identifier that can be directly used in detection rules." |
| 22 | `Empire backdoor` → `Mentioned` | CORRECT | "The term describes a component conceptually rather than providing a specific, searchable artifact." |

| 23 | .txt files → Described | CORRECT | The indicator is a generic file type description that isn’t a unique, directly searchable artifact. |
| 24 | batch scripts → Described | CORRECT | It generically describes a type of script without a unique identifier, requiring additional context for detection. |
| 25 | .bat script → Described | CORRECT | It denotes a generic file type (batch file) which isn’t a concrete, unique string for automated matching. |
| 26 | PsExec → Described | INCORRECT — should be "Mentioned" because it is a generic tool name commonly used in both benign and malicious contexts, making it only conceptually referenceable. | The observable is a common legitimate tool name and thus isn’t uniquely actionable. |
| 27 | Ryuk → Mentioned | CORRECT | As a malware family name, it is conceptually referenced rather than being a unique, actionable indicator. |
| 28 | Empire → Mentioned | CORRECT | It is a generic reference to a post-exploitation framework and isn’t specific enough for actionable detection. |
| 29 | taskkill → Mentioned | CORRECT | This common Windows command is generic and only serves as a conceptual reference. |
| 30 | net → Mentioned | CORRECT | The term is a generic command name that lacks the uniqueness needed for actionable indicators. |
| 31 | sc commands → Mentioned | CORRECT | It describes a generic set of service control commands and does not constitute a uniquely actionable string. |

| 32 | AdFind.exe → Described | CORRECT | The filename is a generic tool name and does not offer a unique, actionable indicator. |
| 33 | PSExec.exe → Described | CORRECT | As a common administrative tool name, it is appropriately classified as a descriptive reference. |
| 34 | Ryuk → Actionable | INCORRECT — should be "Described" because the malware family name is ambiguous and lacks the unique technical detail required for precise automated detection. | 
| 35 | %TEMP% → Described | CORRECT | The environment variable is a common Windows path reference and is not uniquely actionable. |
| 36 | C:\Windows\SysWOW64\ → Described | CORRECT | This well-known system directory path is generic and unsuitable for direct, low–false‑positive detection. |
| 37 | %SystemRoot% → Described | CORRECT | As a standard environment variable, it serves as contextual information rather than a unique indicator. |
| 38 | | adfind.exe -f (objectcategory=person) ... (complete table block) → Actionable | CORRECT | The complete batch script snippet is a full code indicator that can be directly matched for detection. |
| 39 | batch script → Described | CORRECT | The generic reference lacks specific technical content and is correctly classified as descriptive. |

| 40 | `PsExec` → `Described` | CORRECT | It is a generic tool name that, without additional context such as a full file path or hash, isn’t a unique, directly actionable indicator. |
| 41 | `Batch script` → `Described` | CORRECT | The term describes a generic file type and requires additional context to be used for automated detection. |
| 42 | `.txt file with host lists` → `Described` | CORRECT | It generically describes a file type and purpose rather than providing a concrete, unique identifier. |
| 43 | `RDP` → `Mentioned` | CORRECT | The reference to a protocol is generic and conceptual, making it unsuitable for direct automated detection. |
| 44 | `C$ share` → `Mentioned` | CORRECT | It refers to a well-known administrative share name that is generic and not uniquely actionable by itself. |

| 45 | PsExec.exe → Described | CORRECT | The file name is a common tool name that is generic and not unique enough to drive precise automated detection. |
| 46 | C:\\$\\.txt → Actionable | CORRECT | Its unusual, exact file path makes it a unique indicator that can be directly matched for detection. |
| 47 | \ → Mentioned | CORRECT | The single backslash as a username is overly generic and ambiguous, preventing precise automated detection. |
| 48 | cm → Mentioned | CORRECT | The password "cm" is too generic and ambiguous to be actionable as an indicator. |

| 49 | "## start PsExec.exe -d @C:\\\\$\\.txt -u \\ -p\n\nFigure 4: Line from the batch file used to execute Ryuk on each system" → Actionable | CORRECT | The observable is a complete, unique command-line snippet that can be directly used for detection. 

| 50 | `ser0918us` → `Actionable` | CORRECT | The string is a complete, unique TrickBot group tag that can be directly used in detections. |
| 51 | `lib373` → `Actionable` | CORRECT | The observable is an exact, complete identifier in the 'libxxx' format, making it actionable. |
| 52 | `lib369` → `Actionable` | CORRECT | The tag is fully specified and unique, allowing for direct matching in detection systems. |
| 53 | `tot373` → `Actionable` | CORRECT | The observable is a complete TrickBot identifier, suitable for precise detection. |
| 54 | `tot369` → `Actionable` | CORRECT | The string is an exact group tag that serves as a unique identifier for TrickBot samples. |
| 55 | `jim373` → `Actionable` | CORRECT | The observable is a distinct and complete TrickBot group tag, enabling actionable detection. |
| 56 | `jim369` → `Actionable` | CORRECT | The tag is fully defined and unique, thereby supporting direct automated detection. |
| 57 | `jim371` → `Actionable` | CORRECT | The observable is a precise TrickBot group tag, which can be used as an exact match in detection. |
| 58 | `tot371` → `Actionable` | CORRECT | The string is a complete and unique identifier, making it actionable for triggering detections. |

| 59 | SamSam operations → Described | CORRECT | It is a threat actor group name used descriptively, not as a direct actionable indicator. |
| 60 | TEMP.MixMaster's → Described | CORRECT | It is a malware family name mentioned in context, lacking a unique technical indicator. |
| 61 | uismouted → Described | CORRECT | Its ambiguous nature renders it non-actionable and suitable for a descriptive rank. |

| 62 | `CVE-2025-22457` → `Actionable` | CORRECT | The CVE is a complete, unique vulnerability identifier that can be directly matched for detection. |

md file name: /content/validation/unpacking-the-blackjack-groups-fuxnet-malware.md

| 1 | Blackjack Group → Mentioned | CORRECT | The observable is a threat actor's name, which is a conceptual reference and not directly actionable.  |

| 2 | Blackjack hacker group → Mentioned | CORRECT | The observable is a threat actor name, conceptually referenced and not directly testable. |
| 3 | Team82 → Mentioned | CORRECT | The group name is mentioned without actionable technical specifics, fitting the Mentioned category. |
| 4 | JSON files → Described | CORRECT | The reference to JSON files is generic and requires additional context or enrichment to be actionable. |
| 5 | dedicated M-Bus fuzzer → Described | CORRECT | The tool description is non-specific and requires further context for automatable detection. |

| 6 | `CVE-2025-3128` → `Actionable` | CORRECT | It is a complete, unique vulnerability identifier that can be directly matched. |
| 7 | `CWE-78` → `Actionable` | INCORRECT — should be "Described" because it is a generic weakness classification that lacks the concrete, unique details needed for direct detection. | CWE identifiers signal a category of weakness rather than a specific, actionable artifact. |
| 8 | `M-Bus fuzzing` → `Mentioned` | CORRECT | It describes a general attack technique rather than a concrete indicator for automated detection. |
| 9 | `M-Bus fuzzer` → `Mentioned` | INCORRECT — should be "Described" because although it names a tool, it is ambiguous and lacks the specificity required for direct matching. | As an attack tool reference, additional details (like executable path or hash) would be needed to make it actionable. |
| 10 | `smsd` → `Described` | CORRECT | It is an ambiguous process name that would require further context to be used in detection. |
| 11 | `ion flooding` → `Mentioned` | CORRECT | It is a conceptual reference to an attack technique rather than a specific artifact. |
| 12 | `sensor-gateways` → `Mentioned` | CORRECT | It generically refers to a type of device and isn’t specific enough for direct, automated detection. |
| 13 | `sensorgateway` → `Mentioned` | CORRECT | It is a generic reference to a device lacking the precise attributes needed for actionable matching. |

| 14 | "ruexfil.com" → Actionable | CORRECT | It is a complete domain name that can be matched directly by detection systems. |
| 15 | "Mitsubishi Flectric smartRTU" → Described | CORRECT | It is a product name that requires additional enrichment to be used in automated detection. |
| 16 | "CVSS V3: 9.8" → Mentioned | CORRECT | It is a vulnerability score value, which is conceptual and not directly actionable for automated detection. |

| 17 | CVE-2025-3232 → Actionable | CORRECT | A complete CVE identifier can be matched directly and used for automated lookups. |
| 18 | CWE-306 → Described | CORRECT | A CWE code is a generic classification that requires further enrichment to act upon. |

| 19 | `112` → `Mentioned` | CORRECT | The number is generic and not unique enough for actionable detection, as noted. |
| 20 | `ruexfil website` → `Described` | CORRECT | It lacks full URL details and remains a partial indicator, fitting the described classification. |

| 21 | CVE-2025-2081 → Actionable | CORRECT | CVE identifiers are specific and unique, making them directly matchable for detection. |
| 22 | CWE-547 → Actionable | INCORRECT — should be "Described" because CWE identifiers represent generic weakness classes that require additional context for actionable detection. | CWE identifiers are taxonomy references and not immediately unique for detection rules. |
| 23 | Optigo Networks Visual BACnet Capture Tool version 3.1.2rc11 → Actionable | CORRECT | The product version string is specific enough to be used for precise detection in logs. |
| 24 | Optigo Visual Networks Capture Tool version 3.1.2rc11 → Actionable | CORRECT | The exact product name and version provide a unique indicator that can be directly matched. |
| 25 | Visual BACnet Capture Tool version v3.1.3rc8 → Actionable | CORRECT | The full and specific software version string is precise and actionable for identification. |
| 26 | Optigo Visual Networks Capture Tool version v313rc8 → Actionable | CORRECT | The unique version detail in the product string can be directly used to search for affected systems. |
| 27 | CVSS V3: 7.5 → Mentioned | CORRECT | CVSS metrics are used as metadata and are not directly actionable for automated detection. |
| 28 | CVE-2025-2080 → Actionable | CORRECT | CVE identifiers are concrete and unique, making them directly searchable for threat correlation. |
| 29 | CWE-288 → Actionable | INCORRECT — should be "Described" because CWE identifiers denote generic weakness categories that need further context to be used for detection. | CWE identifiers are classification references rather than unique actionable indicators. |
| 30 | Optigo Visual Networks Capture Tool version v3.1.3rc8 → Actionable | CORRECT | The precise product version string is distinct and suitable for automated detection. |
| 31 | CVSS V3: 9.8 → Mentioned | CORRECT | As a vulnerability metric, the CVSS score serves as contextual metadata rather than a direct actionable indicator. |

| 32 | "CVE-2025-2079" → Actionable | INCORRECT — should be "Described" because vulnerability identifiers are reference indicators rather than directly actionable detection strings. | Vulnerability IDs, though unique, are used for context and remediation rather than as direct IOCs. |
| 33 | "CWE-547" → Described | CORRECT | CWE identifiers serve as descriptive reference markers for weaknesses and are not used for automated detection. |
| 34 | "Optigo Networks Visual BACnet Capture Tool" → Described | CORRECT | Software product names are descriptive references that do not directly translate into actionable detection indicators. |
| 35 | "Optigo Visual Networks Capture Tool version 3.1.2rc11" → Described | CORRECT | Even with version details, product names remain descriptive and insufficient for automated detection. |
| 36 | "Visual BACnet Capture Tool: Version v3.1.3rc8" → Described | CORRECT | Detailed versioned software identifiers are primarily meant for description rather than direct actionable detection. |

| 37 | "Optigo Visual Networks Capture Tool: Version v3.1.3rc8" → Described | INCORRECT — should be "Actionable" because the string is a complete, unique software identifier that can be matched directly in detection systems. | It meets the criteria for a complete and actionable observable per Rule 2. |

| 38 | AQ SBK → Mentioned | CORRECT | As a manufacturer name, this is a generic reference not intended for automated detection. |
| 39 | SBK URL → Described | CORRECT | The string appears to represent a web address but is incomplete, requiring enrichment before use in detection. |
| 40 | SBK website → Mentioned | INCORRECT — should be "Described" because it offers an incomplete website indicator that, while not directly actionable, contains tangible details needing further enrichment. | The observable is similar to an ambiguous file or URL reference that should be classified as "Described." |
| 41 | MPSE → Described | CORRECT | As a model identifier for an ICS gateway, it lacks inherent uniqueness and requires additional context for detection. |
| 42 | TMSB → Described | CORRECT | Like MPSE, this gateway model string is incomplete and needs further enrichment to serve as a concrete detection indicator. |

| 43 | `sbk` → `Actionable` | CORRECT | The default SSH username is an exact string that can be directly matched for detection. |
| 44 | `temppwd` → `Actionable` | CORRECT | The default SSH password is an exact string usable in low false‑positive detection rules. |
| 45 | `Meter-Bus/RS485` → `Mentioned` | CORRECT | It is a generic reference to a communication protocol rather than a unique, matchable identifier. |
| 46 | `CAN` → `Mentioned` | CORRECT | "CAN" is a generic protocol name that cannot be specifically detected without additional context. |
| 47 | `RS-232` → `Mentioned` | CORRECT | It refers to a common serial communication protocol and is only conceptually mentioned. |
| 48 | `RS-485` → `Mentioned` | CORRECT | It is a general reference to a serial protocol and lacks the specificity for actionable detection. |
| 49 | `ethernet` → `Mentioned` | CORRECT | It denotes a standard network interface and is used conceptually, not as a unique identifier. |
| 50 | `SSH` → `Mentioned` | CORRECT | Although exact, "SSH" is a common protocol name and is not distinctive enough for actionable detection. |
| 51 | `GASBM` → `Described` | CORRECT | It is a sensor device identifier that requires additional enrichment to be actionable. |
| 52 | `PPOSB` → `Described` | CORRECT | This security console identifier is descriptive and not sufficiently unique for direct automated detection. |
| 53 | `TVSB` → `Described` | CORRECT | As a sensor device code, it serves as a descriptive marker rather than an actionable indicator. |
| 54 | `MPSB` → `Described` | CORRECT | The sensor gateway identifier is provided as a descriptive label, needing further context to be actionable. |
| 55 | `TMSB` → `Described` | CORRECT | It is a model code for a sensor gateway, used descriptively rather than as a unique detection parameter. |
| 56 | `IBZ` → `Described` | CORRECT | The 3G router identifier is descriptive and not unique enough for direct automated detection. |
| 57 | `Windows 10` → `Described` | CORRECT | This common OS label is used as a descriptive attribute, not as a precise, matchable indicator. |
| 58 | `Windows 7` → `Described` | CORRECT | As a generic operating system identifier, it is appropriately classified as described. |
| 59 | `Windows XP` → `Described` | CORRECT | Being a common OS version name, it serves as a descriptive attribute rather than an actionable string. |

| 60 | iRZ RL22w → Actionable | CORRECT | The router model string is specific and can be directly used in Shodan/Censys searches. |
| 61 | OpenWRT → Mentioned | CORRECT | "OpenWRT" is a generic firmware name and not unique enough for direct detection. |
| 62 | TMSB module → Described | CORRECT | The module name is ambiguous and requires further context before it can drive actionable detection. |

| 63 | SBKManager → Actionable | CORRECT | "SBKManager" is a unique, complete tool name that can be directly matched in detection rules. |
| 64 | TCP/4321 → Actionable | CORRECT | "TCP/4321" is a complete network indicator (protocol and port) that can be used to create targeted detection rules. |
| 65 | proprietary protocol → Mentioned | CORRECT | The term is generic and lacks specificity, making it conceptually referenced rather than directly actionable. |

| 66 | Sensor Monitoring System → Described | CORRECT | The observable is a generic system reference without unique identifiers, making it appropriate for a "Described" rank. |

| 67 | `Deploy Script` → `Mentioned` | CORRECT | It is a generic descriptive term for an action rather than a unique, actionable artifact. |
| 68 | `Lock up the device and destroy the filesystem` → `Mentioned` | CORRECT | It describes a destructive behavior in generic language that isn’t specific enough for direct detection. |
| 69 | `Destroy NAND Chips` → `Mentioned` | CORRECT | It is a conceptual description of hardware destruction, lacking unique, actionable details. |
| 70 | `Destroy UBI Volume` → `Mentioned` | CORRECT | It is a generic description of a destructive action, not a concrete string for automated detection. |
| 71 | `Flood M-Bus` → `Mentioned` | CORRECT | It represents a conceptually described ICS command without the precision needed for actionable detection. |

| 72 | SSH → Mentioned | CORRECT | "SSH" is a generic protocol name referenced conceptually. |
| 73 | SBK → Mentioned | CORRECT | "SBK" is a short, generic protocol identifier and is used conceptually rather than as a unique, actionable string. |
| 74 | 4321 → Described | INCORRECT — should be "Actionable" because the network port number is a complete, exact identifier that can be directly matched in network traffic. |

| 75 | SSH → Mentioned | CORRECT | "SSH" is a generic protocol reference that isn’t unique enough to be actionable. |
| 76 | HTTP → Mentioned | CORRECT | "HTTP" is a generic protocol indicator and thus appropriately marked as Mentioned. |
| 77 | telnet → Mentioned | CORRECT | "telnet" is used conceptually as a remote access service, making the Mentioned rank suitable. |
| 78 | SNMP → Mentioned | CORRECT | "SNMP" is a generic protocol term, fitting the Mentioned category due to its broad reference. |
| 79 | reaper_start → Actionable | CORRECT | "reaper_start" is a specific routine name that can be matched directly, qualifying it as Actionable. |
| 80 | mtdblock devices → Described | CORRECT | "mtdblock devices" refers to a category of block devices in a descriptive manner rather than a unique identifier. |

| 81 | `NAND memory chips` → `Mentioned` | CORRECT | The term is a generic descriptor for hardware without any unique, actionable details. |
| 82 | `SSD NAND chip` → `Mentioned` | CORRECT | The value is a generic hardware component description, not a unique indicator for detection. |
| 83 | `NAND write cycles` → `Mentioned` | CORRECT | It describes a hardware property conceptually, without a concrete, matchable identifier. |
| 84 | `bit-flip operation` → `Mentioned` | CORRECT | The phrase is a generic reference to an attack technique rather than an actionable IOC. |

| 85 | UBI_IOCVOLUP_allowing → Actionable | CORRECT | It’s a unique, complete IOCTL command string that can be directly used in detection. |
| 86 | OxFF → Described | CORRECT | Although exact, it is a common filler hex constant and not unique enough for actionable detection. |
| 87 | UBI volume → Mentioned | CORRECT | It is a generic, conceptual reference and not sufficiently specific for detection. |

| 88 | `sensor gateway` → `Mentioned` | CORRECT | The term is a generic reference and not a unique, actionable identifier. |
| 89 | `dedicated serial bus` → `Mentioned` | CORRECT | It is a generic description that does not provide a unique, actionable indicator. |
| 90 | `RS485/Meter-Bus channel` → `Mentioned` | CORRECT | This is a descriptive reference to a communications channel and isn’t unique enough for automated detection. |
| 91 | `serial ports` → `Mentioned` | CORRECT | It’s a generic term for a hardware interface without unique actionable properties. |
| 92 | `TMSB gateway` → `Mentioned` | CORRECT | Although it names a specific model, it lacks the unique properties needed for an actionable indicator. |
| 93 | `Meter-Bus channel` → `Mentioned` | CORRECT | It is a generic reference to a communication channel without a unique signature. |
| 94 | `M-Bus bus` → `Mentioned` | CORRECT | This variant naming is still generic and does not offer a unique, directly actionable string. |

| 95 | `M-Bus` → `Mentioned` | CORRECT | It generically names the protocol without providing a unique or complete string for detection. |
| 96 | `68 06 06 68   53 FE 51   01 7A 08   25 16` → `Actionable` | CORRECT | It is a complete, exact hex representation of an M-Bus packet usable in detection rules. |
| 97 | `68 0D 0D 68   53 FE 51   07 79 04 03 02 01 24 40 01 95 04 16` → `Actionable` | CORRECT | The hex string fully represents the packet data, enabling direct matching. |
| 98 | `12345678` → `Described` | INCORRECT — should be "Actionable" because it is a complete and exact numerical identifier from the attack command that can be directly matched. | Although it’s just digits, as a full slave identifier it can serve as a concrete, actionable indicator. |
| 99 | `68 OF OF 68 | 53 FE 51| 0C 79 78 56 34 12 | 0C 06 07 01 00 00 | 55 16` → `Actionable` | CORRECT | Despite its pipe‑delimited format, the string is complete and specific enough for detection. |
| 100 | `pyMeterBus` → `Actionable` | CORRECT | It is a unique tool name that can be directly used as an exact indicator in detection processes. |
| 101 | `EN-13757` → `Mentioned` | CORRECT | As a reference to an industry standard, it is conceptually noted rather than a unique string for automated detection. |

| 102 | "M-Bus Fuzzing" → "Mentioned" | CORRECT | It is a generic reference to an attack technique rather than a unique, directly searchable artifact. |
| 103 | "Blackjack" → "Described" | CORRECT | As a malware family name, it lacks the unique, matchable structure needed for automated detection. |
| 104 | "M-Bus Flooding" → "Mentioned" | CORRECT | It describes an attack technique in conceptual terms without a concrete pattern to match. |
| 105 | "RS485" → "Mentioned" | CORRECT | It refers to a well‐known communication standard, making it a generic mention rather than an actionable indicator. |
| 106 | "mk_mbus_mode == 1" → "Actionable" | CORRECT | It is a complete and specific code snippet that can be directly matched for detection. |
| 107 | "mk_mbus_mode == 0" → "Actionable" | CORRECT | It is a literal code fragment that is unique and directly actionable in detection systems. |
| 108 | "Fuxnet" → "Described" | CORRECT | The malware family name requires additional context to be reliably used in automated detection. |
| 109 | "M-Bus" → "Mentioned" | CORRECT | It is a generic reference to an industrial protocol rather than a unique, actionable artifact. |

| 110 | Fuxnet malware → Described | CORRECT | The malware family reference is generic and lacks precise indicators for direct detection. |
| 111 | ruexfil website → Described | CORRECT | The website reference is incomplete without full URL details, making it non-actionable. |

| 112 | `Claroty xDome Platform` → `Described` | CORRECT | It's a specific product name that describes a commercial tool without being a direct detection signature. |
| 113 | `Industrial Cybersecurity` → `Mentioned` | CORRECT | It's a generic industry term without actionable detection details. |
| 114 | `Healthcare Cybersecurity` → `Mentioned` | CORRECT | It's a broad, conceptual mention of an industry domain not suited for automated detection. |
| 115 | `Commercial Cybersecurity` → `Mentioned` | CORRECT | It references a general cybersecurity domain concept rather than a specific, actionable indicator. |
| 116 | `Public Sector Cybersecurity` → `Mentioned` | CORRECT | It is a conceptual, generic reference to an industry sector, lacking concrete actionable details. |

| 117 | Team82 Home Vulnerability Disclosure Dashboard Research PGP Key → Mentioned | Validator output CORRECT | The observable only references a PGP key conceptually without providing actionable key details. |

md file name: /content/validation/to-kill-a-centrifuge.md

| 1 | Natanz → Mentioned | CORRECT | The reference is a facility name, used contextually rather than as a concrete technical indicator. |
| 2 | Active Defense → Mentioned | CORRECT | It is a generic cybersecurity term that does not yield a unique, actionable string. |
| 3 | SCADA Software → Mentioned | CORRECT | The term is a broad reference to software in industrial control systems and is not specific enough for detection. |
| 4 | Plant Design → Mentioned | CORRECT | It describes a conceptual industrial layout rather than providing a concrete, unique detection artifact. |
| 5 | Sensors and Valves → Mentioned | CORRECT | The observable is a general reference to components without actionable, unique characteristics. |
| 6 | Industrial Controllers → Mentioned | CORRECT | It names a broad category of devices rather than a specific, actionable identifier. |
| 7 | Overpressure Attack → Mentioned | CORRECT | The term describes a conceptual attack technique without providing a concrete, unique indicator for detection. |
| 8 | Rotor Speed Attack → Mentioned | CORRECT | It refers to a generic attack vector description, not an actionable technical string. |

| 9 | Stuxnet → Mentioned | CORRECT | The observable is a well-known malware name referenced without technical details, making it non-actionable. |

| 10 | `Stuxnet` → `Mentioned` | CORRECT | The observable is a malware family name used conceptually, not a unique, actionable indicator. |

| 11 | `Virustotal` → `Mentioned` | CORRECT | It’s a generic reference to a well-known antivirus service and isn’t an actionable, unique indicator. |
| 12 | `Cascade Protection System (CPS)` → `Mentioned` | CORRECT | It names a targeted ICS component in a conceptual way without providing a unique, detection-ready indicator. |

| 13 | `IR-1 centrifuge` → `Described` | CORRECT | It’s a descriptive model name that lacks the unique, technical specificity required for automated detection. |
| 14 | `P-1 centrifuge` → `Described` | CORRECT | The observable is a descriptive, non-unique model label, aligning with a "Described" classification rather than an actionable indicator. |

| 15 | UF6 → Actionable | INCORRECT — should be "Described" because it is a generic chemical compound label that lacks the unique, concrete properties (like a hash or full code snippet) needed for direct automated detection. | It requires additional contextual enrichment to be used in detection rules. |
| 16 | IR-1 → Actionable | INCORRECT — should be "Described" because it is merely a centrifuge model designation that does not provide a unique, reliably searchable indicator. | It needs further context to be actionable for detection purposes. |

| 17 | industrial control systems → Mentioned | CORRECT | It’s a generic conceptual reference that isn’t unique enough to drive direct detection. |
| 18 | production systems → Mentioned | CORRECT | It’s a generic reference to operational environments and not a specific, actionable indicator. |
| 19 | protection systems → Mentioned | CORRECT | It’s a broad, conceptual reference rather than a concrete value for automated matching. |
| 20 | Cascade Protection System → Described | CORRECT | It provides a unique product name with context but lacks the exactness needed for low false‐positive automated detection. |

| 21 | Cascade Protection System → Described | CORRECT | The system name is descriptive and not inherently unique enough to drive direct automated detection. |
| 22 | centrifuge → Mentioned | CORRECT | The term is generic and conceptually referenced rather than a unique, actionable artifact. |
| 23 | fast-acting shut-off valves → Described | CORRECT | The phrase describes a technical item that requires additional context before it can be directly acted upon. |
| 24 | centrifuge piping → Described | CORRECT | This term is a descriptive label for a component and lacks the specificity needed for direct detection. |
| 25 | enrichment stage piping → Described | CORRECT | The observable is a descriptive element that identifies a component without being uniquely actionable. |
| 26 | central monitoring screen → Described | CORRECT | It denotes a specific display element but remains descriptive without a unique signature for automated matching. |
| 27 | green dot → Mentioned | CORRECT | The term is a generic indicator description with conceptual significance rather than a uniquely actionable string. |
| 28 | grey dot → Mentioned | CORRECT | This observable is a generic display indicator that is only conceptually referenced. |
| 29 | vibration → Mentioned | CORRECT | "Vibration" is a common term used conceptually, making it unsuitable as a concrete, searchable indicator. |
| 30 | UF6 gas pressure → Described | CORRECT | The parameter is described with contextual relevance but lacks the uniqueness for direct automated detection. |
| 31 | exhaust valve → Described | CORRECT | The term is a descriptive label for a component that requires further context to be directly actionable. |
| 32 | dump system → Described | CORRECT | It identifies a backup system descriptively and is not a uniquely actionable artifact. |
| 33 | tails take-off → Mentioned | CORRECT | As a process procedure, it is conceptually referenced rather than being a unique, directly searchable indicator. |
| 34 | pressure → Described | INCORRECT — should be "Mentioned" because the term is extremely generic and conceptually referenced without uniqueness. | The term "pressure" is too broad and common to serve as a direct, actionable indicator. |

| 35 | Siemens 57-417 → Actionable | CORRECT | It is a specific, complete controller model identifier that can be directly matched. |
| 36 | PROFIBUS fieldbus → Mentioned | CORRECT | It refers to a general communication protocol rather than a unique, actionable artifact. |
| 37 | Khan network → Mentioned | CORRECT | It is merely a threat actor name referenced conceptually without a concrete detection signature. |

| 38 | fieldbus → Mentioned | CORRECT | "fieldbus" is a generic term for an industrial network type without unique, actionable attributes. |
| 39 | PROFIBUS → Mentioned | CORRECT | "PROFIBUS" is a generic protocol name referenced conceptually rather than as a specific detection indicator. |
| 40 | Ethernet → Mentioned | CORRECT | "Ethernet" is a broad network technology term without distinct, actionable characteristics. |
| 41 | SCADA software → Mentioned | CORRECT | "SCADA software" is a general descriptor of a software category and lacks the specificity for automated detection. |
| 42 | CPS → Mentioned | CORRECT | "CPS" is an abbreviated, conceptual reference to cyber‑physical systems rather than a unique identifier. |
| 43 | Khan network → Mentioned | CORRECT | "Khan network" is a generic network name mentioned in context, not a precise string for actionable detection. |
| 44 | Natanz Fuel Enrichment Plant → Mentioned | CORRECT | The facility name is contextually referenced and is not unique enough to drive direct automated detection. |

| 45 | `Cascade Protection System` → `Described` | CORRECT | It is a descriptive system name without a unique or complete indicator for direct automated detection. |
| 46 | `Siemens S7-417` → `Actionable` | CORRECT | The model designation is specific and complete enough to be directly matched in detection rules. |

| 47 | `SCADA` → `Mentioned` | CORRECT | The term is a generic reference to supervisory control systems and isn’t a unique, actionable identifier. |
| 48 | `industrial controllers` → `Mentioned` | CORRECT | It’s a broad, non-specific reference to a class of devices, making it unsuitable for direct automated detection. |
| 49 | `Siemens S7-417` → `Actionable` | CORRECT | This is a specific industrial controller model that can be directly matched and monitored for detection. |
| 50 | `dedicated pressure controllers` → `Mentioned` | CORRECT | The phrase is a generic description without a unique identifier, making it conceptually referenced rather than directly actionable. |
| 51 | `pressure sensors` → `Mentioned` | CORRECT | It is a common term for a type of sensor and lacks the specificity required for actionable detection. |
| 52 | `stage exhaust valves` → `Mentioned` | CORRECT | This generic term for a valve type does not offer a concrete, unique identifier for automated detection. |
| 53 | `master feed valves` → `Mentioned` | CORRECT | It is a descriptive, generic phrase referring to process components without actionable uniqueness. |
| 54 | `feed header` → `Mentioned` | CORRECT | The observable denotes an industrial process component generically, lacking a specific identifier for detection. |
| 55 | `product take-off` → `Mentioned` | CORRECT | Despite being part of the process flow, the term remains generic and too ambiguous for direct detection. |
| 56 | `dump line` → `Mentioned` | CORRECT | This is a generic reference to an industrial process component, not a concrete, unique each indicator needed for automated rules. |
| 57 | `pressure transducers (numbered 16 to 21)` → `Mentioned` | CORRECT | Although it includes numbering details, the description still represents a group of sensors rather than a unique, actionable identifier. |
| 58 | `centrifuges` → `Mentioned` | CORRECT | The term generically refers to a type of industrial equipment, which is conceptual rather than uniquely actionable. |
| 59 | `vibration sensors` → `Mentioned` | CORRECT | It is a broad, generic reference to sensors without a distinct, actionable signature for detection. |

| 60 | Rotor Speed Attack → Mentioned | CORRECT | It is a conceptual label for an attack variant rather than a concrete, matchable artifact. |
| 61 | overpressure attack → Mentioned | CORRECT | It merely describes an attack technique and lacks the specificity necessary for automated detection. |
| 62 | Centrifuge Drive System (CDS) → Mentioned | CORRECT | It is a descriptive reference to an ICS component and does not represent a unique, actionable indicator. |

| 63 | USB stick → Mentioned | CORRECT | The observable is a generic reference to removable media with no unique, actionable details. |
| 64 | infected configuration file for Siemens controllers → Described | CORRECT | It describes a file related to Siemens controllers that requires enrichment to be actionable. |
| 65 | engineering software → Mentioned | CORRECT | The term is a generic reference to a type of software rather than a unique identifier. |
| 66 | extended dropper → Mentioned | CORRECT | The phrase is a conceptual descriptor of a malware dropper variant, not a concrete, unique indicator. |
| 67 | Centrifuge Drive System → Described | CORRECT | It names a specific ICS component but lacks the unique, complete identifier needed for actionable detection. |
| 68 | MS Windows exploits → Mentioned | CORRECT | The observable generically refers to a class of exploits without a specific, actionable indicator. |
| 69 | stolen digital certificates → Mentioned | CORRECT | The phrase is a general description and does not provide a unique identifier that detection systems can key on. |
| 70 | driver software → Mentioned | CORRECT | It is a generic reference to software and lacks a concrete signature or identifier for detection. |
| 71 | zero-days → Mentioned | CORRECT | The term generically references undisclosed vulnerabilities and is not a specific, actionable observable. |
| 72 | overpressure attack → Mentioned | CORRECT | It describes an attack technique conceptually, without a unique string for automated detection. |
| 73 | Siemens controllers → Mentioned | CORRECT | The observable generically refers to targeted industrial controllers without a unique identifier. |
| 74 | portable engineering system → Mentioned | CORRECT | It is a generic descriptor for a device used in engineering environments and not directly actionable. |
| 75 | malicious file → Mentioned | CORRECT | The term is a broad, generic reference to a file delivering malware, lacking specific identifiable details. |

| 76 | RS-232 → Mentioned | CORRECT | It’s a generic reference to a standard serial protocol and not a unique, actionable indicator. |
| 77 | Step7 software project → Described | CORRECT | It identifies a software tool in a generic way that requires additional context before it can be used for precise detection. |

| 78 | `S7-417` → `Actionable` | CORRECT | It is a specific ICS controller model that can be uniquely matched. |
| 79 | `S7-315` → `Actionable` | CORRECT | It is a complete and unique model identifier enabling direct matching. |
| 80 | `Siemens WinCC SCADA system` → `Actionable` | CORRECT | The product name is specific enough to facilitate automated detection. |
| 81 | `PROFIBUS` → `Mentioned` | CORRECT | The term is generic and conceptual, making it unsuitable for direct automated detection. |
| 82 | `Centrifuge Drive System` → `Described` | CORRECT | It is a descriptive label lacking the unique specificity needed for actionable detection. |
| 83 | `frequency converters` → `Mentioned` | CORRECT | The generic term does not provide a concrete, searchable identifier for detection. |

| 84 | 63,000 rpm → Described | CORRECT | It is a numerical measurement with units provided for contextual reference rather than a unique, matchable identifier. |
| 85 | 84,600 rpm → Described | CORRECT | It is a rotor speed measurement that describes a state rather than serving as a unique, actionable identifier. |
| 86 | 120 rpm → Described | CORRECT | The value describes a rotor speed measurement and lacks the unique properties required for automated detection. |
| 87 | IR-1 centrifuge → Mentioned | CORRECT | It is a specific model name referenced conceptually, making it unsuitable as a directly actionable identifier. |
| 88 | Cascade Protection System → Mentioned | CORRECT | The term refers to a generic control system component without sufficient unique attributes for detection. |
| 89 | gas centrifuges → Mentioned | CORRECT | It is a generic descriptive term for a type of equipment and is not uniquely identifiable for automated matching. |
| 90 | frequency converter → Mentioned | CORRECT | The observable references a generic component without unique detection characteristics, thus remaining conceptual. |

| 91 | S7-315 → Described | CORRECT | It’s a product model reference mentioned in the narrative without the unique specificity needed for automated detection. |
| 92 | WinCC → Described | CORRECT | It refers to a SCADA software product in a descriptive manner, lacking the complete, unique identifier that would make it directly actionable. |
| 93 | (Complete Wireshark PCAP table capture with hex dumps, IP addresses, GUIDs, and protocol details) → Actionable | CORRECT | The artifact is a complete, specific network capture that includes unique details which can be matched exactly by detection rules. |

| 94 | IR-1 centrifuges → Described | CORRECT | The observable names a specific industrial device model, which is clearly defined but not directly actionable for automated matching. |
| 95 | Operation Olympic Games → Described | CORRECT | As a campaign code name, it is a distinctive reference but requires additional enrichment for direct automated detection. |
| 96 | Khan network → Mentioned | CORRECT | Threat actor names like this are conceptual identifiers and are not intended for strict automated detection.

| 97 | "Operation Olympic Games" → "Described" | CORRECT | The observable is a campaign name referenced in the report, requiring enrichment before it can be used for direct detection. |
| 98 | "Cascade Protection System" → "Described" | CORRECT | As an industrial system name that is not uniquely identifying for automated detection, it appropriately remains "Described." |
| 99 | "Centrifuge Drive System" → "Described" | CORRECT | Despite specifying a control system component, the name is ambiguous without further context, thus fitting the "Described" category. |

| 100 | `| ths in office, President Obama                                | FACEBOOK        |  |  |  |  |  | ... Figure 13: Coming out about Stuxnet's Modus Operandi and intention: Reporting by David Sanger in the New York Times on June 1, 2012` → `Described` | CORRECT | The figure/table capture is a descriptive artifact extracted from text and isn’t a unique, actionable indicator.  |

| 101 | Operation Olympic Games → Mentioned | CORRECT | The observable is a campaign name mentioned conceptually and is not directly actionable for automated detection. |

| 102 | s7otbxsx.dll → Actionable | CORRECT | The filename is a unique and complete identifier, making it directly actionable per the detection rules. |

| 103 | Cascade Protection System → Described | CORRECT | The observable names require additional context for actionable detection. |
| 104 | Centrifuge Drive System → Described | CORRECT | The named system is not a unique, directly matchable indicator, making "Described" appropriate. |

| 105 | driver DLL → Described | CORRECT | The observable is a generic reference without a unique identifier for direct matching. |
| 106 | jump directive → Described | CORRECT | It generically describes a technique without providing a concrete, unique string for detection. |
| 107 | BLOCK END directive → Described | CORRECT | This is a generic command reference lacking the specificity needed for an actionable indicator. |
| 108 | PROFIBUS → Described | INCORRECT — should be "Mentioned" because it is a conceptual reference to a protocol rather than a unique, actionable identifier. |

| 109 | Stuxnet → Actionable | INCORRECT — should be "Described" because the malware name is generic and lacks the uniqueness for direct automated matching. | Malware family names, while recognizable, are not specific technical identifiers. |
| 110 | IR-1 cascade → Actionable | INCORRECT — should be "Described" because it is a descriptive ICS component name that requires additional context to be used as a direct indicator. | Such component names are ambiguous and not inherently unique for low false‑positive detection. |
| 111 | uranium hexafluoride → Actionable | INCORRECT — should be "Described" because the chemical substance name is a generic reference rather than a uniquely actionable indicator. | Chemical substance names are descriptive and typically require more context for precise detection. |
| 112 | overpressure → Mentioned | CORRECT | It describes a physical phenomenon conceptually, making it unsuitable as a concrete detection indicator. |
| 113 | rotor speed manipulations → Mentioned | CORRECT | The phrase is a generic description of a process manipulation technique without a unique signature. |
| 114 | empty centrifuges → Mentioned | CORRECT | It is a vague, generic reference to equipment state and cannot be directly tied to a specific detection rule. |
| 115 | uranium enrichment test bed → Mentioned | CORRECT | The term is a conceptual description of a facility rather than a concrete, actionable identifier. |
| 116 | top secret plant → Mentioned | CORRECT | It is a vague, conceptual reference that lacks a uniquely matchable identifier for automated detection. |

| 117 | CVE-2012-3015 → Actionable | CORRECT | It is a complete and unique vulnerability identifier that can be directly matched in detection or vulnerability databases. |

| 118 | `SCADA display` → `Mentioned` | CORRECT | It is a generic, conceptual reference without unique actionable details. |
| 119 | `Piping and Instrumentation Diagram (P&ID)` → `Mentioned` | CORRECT | It is a conceptual term used to describe a generic SCADA interface, lacking the specificity for actionable detection. |

| 120 | Cascade Protection System monitoring application → Described | CORRECT | This is a descriptive name for a monitoring interface rather than a unique, actionable indicator. |
| 121 | Red piping → Mentioned | CORRECT | It’s a generic UI element description that isn’t unique enough for direct detection. |
| 122 | Feed header → Mentioned | CORRECT | The term is a generic label referencing a UI component rather than a concrete indicator. |
| 123 | Blue piping → Mentioned | CORRECT | This is a color-coded UI element description and is non‐actionable. |
| 124 | Product take-off → Mentioned | CORRECT | It refers to a process component in a generic manner and isn’t uniquely actionable. |
| 125 | White piping → Mentioned | CORRECT | The observable is a generic description of a UI element, not a specific identifier. |
| 126 | Tails take-off → Mentioned | CORRECT | This is a descriptive, generic label for a process component without direct detection value. |
| 127 | Green piping → Mentioned | CORRECT | It’s a generic description of a UI element associated with a process system, not an actionable artifact. |
| 128 | Pressure normalization and dump system → Mentioned | CORRECT | The phrase describes a process component conceptually rather than providing a unique indicator. |
| 129 | Millibar readings → Mentioned | CORRECT | It is a generic descriptive term for measurement readings, not a concrete indicator. |
| 130 | mbar → Mentioned | CORRECT | The unit "mbar" is generic and doesn’t serve as a unique, actionable value. |
| 131 | absolute pressure → Mentioned | CORRECT | This is a descriptive measurement term that lacks the specificity required for an actionable indicator. |
| 132 | differential pressure → Mentioned | CORRECT | The term is a generic process measurement descriptor and is not directly actionable. |
| 133 | Centrifuge isolation valves → Mentioned | CORRECT | It’s a descriptive reference to ICS components, not a unique artifact for detection. |
| 134 | Centrifuge monitor area → Mentioned | CORRECT | The observable is a generic UI area reference rather than a concrete, actionable string. |
| 135 | Vertical red lines → Mentioned | CORRECT | This is a descriptor for graphical UI elements and isn’t intended for direct automated detection. |
| 136 | Enrichment stage borders → Mentioned | CORRECT | The term refers to a conceptual boundary and lacks the uniqueness needed for actionable detection. |
| 137 | Cascade shape → Mentioned | CORRECT | It describes a configuration outline in the UI and is non‐actionable as an indicator. |
| 138 | cascade → Mentioned | CORRECT | The term is overly generic and conceptual, making it unsuitable as a standalone actionable indicator. |

| 139 | WinCC software → Described | CORRECT | "WinCC software" is a generic product name that requires contextual knowledge and is not uniquely actionable on its own. |
| 140 | CPS monitoring application → Described | CORRECT | The term is a descriptive, non‐unique label for a custom‐built application, fitting the "Described" category. |
| 141 | CASCADE → Mentioned | CORRECT | "CASCADE" is an ambiguous UI label with potential multiple interpretations, so it remains conceptual and non‑actionable. |
| 142 | Pressure Transducer 4110 → Described | CORRECT | Although specific to a sensor label, it is still a descriptive identifier that lacks the uniqueness needed for automated detection. |
| 143 | Feed Static Pressure → Mentioned | CORRECT | This text is a generic display label indicating a parameter and does not serve as a concrete, actionable indicator. |

| 144 | Stuxnet → Mentioned | CORRECT | "Stuxnet" is a well-known malware name that serves as a conceptual reference rather than a unique, complete artifact for direct detection. |
| 145 | IR-1 → Described | CORRECT | "IR-1" is an equipment model designation that is ambiguous on its own and requires additional context before being used in detection. |

| 146 | "IR-1 cascade" → "Described" | CORRECT | It is a design concept describing the overall cascade, not a precise, unique indicator for automated detection. |
| 147 | "IR-1 centrifuges" → "Described" | CORRECT | It describes a component of the system rather than providing a unique, searchable artifact. |
| 148 | "centrifuge isolation valves" → "Mentioned" | CORRECT | It generically refers to a type of component without a unique signature for detection. |
| 149 | "vibration sensors" → "Mentioned" | CORRECT | It only names a generic sensor category with no unique identifying data. |
| 150 | "Profibus network" → "Mentioned" | CORRECT | It labels a well‐known industrial protocol, which is conceptual rather than a unique string for matching. |
| 151 | "Siemens S7-417 controllers" → "Actionable" | CORRECT | The model-specific reference is a complete identifier that can be used directly in detection or asset scans. |
| 152 | "connector pipes" → "Mentioned" | CORRECT | It is a generic description of a physical asset with no actionable unique indicator. |
| 153 | "stage feed pipe" → "Mentioned" | CORRECT | It is a descriptive term for an industrial component lacking a unique signature for automated matching. |
| 154 | "product pipe" → "Mentioned" | CORRECT | The term is a generic descriptor rather than an exact, actionable artifact. |
| 155 | "tails pipe" → "Mentioned" | CORRECT | It generically describes a component (waste pipe) without a distinct, unique identifier. |
| 156 | "signal cable trunks" → "Mentioned" | CORRECT | It is a generic term for physical cabling infrastructure, not a unique string that could drive automated detection. |

| 157 | `Stage exhaust valves` → `Mentioned` | CORRECT | It’s a generic reference to physical equipment, not a unique identifier for direct detection. |
| 158 | `EP-` → `Described` | CORRECT | It’s a partial prefix that requires further detail to uniquely identify an instance. |
| 159 | `pressure controller` → `Mentioned` | CORRECT | It’s a generic component name and not unique enough for actionable detection. |
| 160 | `pressure sensor` → `Mentioned` | CORRECT | It’s a non-specific reference to a sensor, lacking unique details for detection. |
| 161 | `pneumatic pump` → `Mentioned` | CORRECT | It’s a generic description of a device, not a unique identifier. |
| 162 | `M` → `Mentioned` | CORRECT | It’s a shorthand display indicator that is generic and not directly actionable. |

| 163 | Control valves → Mentioned | CORRECT | The term is a generic reference without unique actionable details. |
| 164 | absolute pressure sensors → Mentioned | CORRECT | It generically describes sensor types and lacks a concrete identifier. |
| 165 | feed header → Mentioned | CORRECT | "Feed header" is an ambiguous, non-specific process component reference. |
| 166 | product header → Mentioned | CORRECT | This generic term does not provide a unique, actionable indicator. |
| 167 | tails headers → Mentioned | CORRECT | The reference is a broad, generic description that isn’t uniquely actionable. |
| 168 | instrument loops → Mentioned | CORRECT | It is a non-specific concept reference unsuitable for direct detection.

| 169 | PT- → Described | CORRECT | The label "PT-" is a generic SCADA sensor label requiring context, aligning with a non‑actionable, descriptive categorization. |
| 170 | Pressure Transducer → Mentioned | CORRECT | As a generic, conceptually referenced sensor term, "Pressure Transducer" is appropriately classified as Mentioned. |
| 171 | MKS Baratron sensors → Described | CORRECT | This manufacturer-specific sensor model is detailed yet not unique for automated detection, fitting the Described rank. |
| 172 | MKS clones → Described | CORRECT | "MKS clones" is a vague, descriptive reference to sensor variants, appropriately requiring enrichment and thus Described. |
| 173 | Differential pressure sensor → Described | CORRECT | Although it denotes a specific sensor instance in context, it remains a generic, descriptive term not sufficient for direct automated detection. |

| 174 | "Industrial Controllers" → "Mentioned" | CORRECT | The observable is a generic reference to industrial control systems without specific identifiers, which is appropriate for the "Mentioned" rank. |

| 175 | `Siemens S7-417` → `Described` | CORRECT | The observable is a product model reference, which is descriptive detail rather than a unique, directly actionable indicator. |
| 176 | `Siemens S7-315` → `Described` | CORRECT | The observable is a product model reference, providing context but not a concrete, matchable indicator for automated detection. |

| 177 | Siemens S7-315 → Described | CORRECT | The value is a product model reference that requires contextual enrichment rather than a unique, low–false-positive signature. |
| 178 | Siemens S7-417 → Described | CORRECT | As a model name mentioned in the attack code, it is descriptive and not uniquely actionable for automated detection. |
| 179 | 57-315 → Described | CORRECT | This alternate notation of a controller model is ambiguous and needs additional context, fitting the "Described" rank. |
| 180 | 417H → Described | CORRECT | Being a variant identifier without standalone uniqueness, it appropriately falls under "Described." |
| 181 | Centrifuge Drive System → Described | CORRECT | The system name is contextually informative but not a directly actionable indicator. |
| 182 | Cascade Protection System → Described | CORRECT | This observable is a descriptive system name that requires further context for actionable detection. |

| 183 | Siemens Field PG → Described | CORRECT | The observable is a product/device reference that is not a unique, directly matchable indicator for automated detection. |
| 184 | SIMATIC Manager → Described | CORRECT | The observable is a generic software product name that requires additional context for actionable detection rather than serving as a precise identifier. |

| 185 | "fergutec.com" → Actionable | CORRECT | The domain is fully specified and unique, making it directly matchable in detection systems. |
| 186 | "MKS PR-4000" → Described | CORRECT | It’s a product name that lacks inherent uniqueness and requires additional context before it can drive detection. |
| 187 | "Cascade Protection System" → Mentioned | CORRECT | It is a conceptual reference without sufficient specificity to create a concrete detection rule. |
| 188 | "Siemens S7-417" → Described | CORRECT | As a product model name, it isn’t uniquely identifiable for automated matching and needs contextual enrichment. |
| 189 | "PROFIBUS-to-serial gateway" → Described | CORRECT | It describes a configuration element rather than being a unique, directly matchable identifier. |

md file name: /content/validation/TRISIS-01.md

| 1 | DRAGCS → Actionable | INCORRECT — should be "Described" because a product/tool name lacks the uniqueness required for an automated detection indicator. | Product names need additional context to be used effectively in detection rules. |
| 2 | www.dragos.com → Actionable | CORRECT | Domains are complete and unique identifiers that can directly underpin detection rules. |
| 3 | version 1.20171213 → Described | CORRECT | Software version strings are informational details requiring further context before they can drive automated detection. |

| 4 | `TRISIS` → `Actionable` | CORRECT | "TRISIS" is a complete, unique malware family name that can be matched precisely for detection. |
| 5 | `Schneider Electric's Triconex safety instrumented system (SIS)` → `Described` | CORRECT | The product name is contextual and benefits from additional enrichment, making it more descriptive than directly actionable. |

| 6 | Schneider Electric's Triconex safety instrumented system (SIS) → Described | CORRECT | The observable is a specific product name that describes a unique asset but isn’t a direct trigger for an automated detection rule. |
| 7 | Triconex SIS Controller → Described | CORRECT | The observable is a descriptive product component identifier that requires additional contextual enrichment before it can be used for automated detection. |

| 8 | IEC-61131 → Mentioned | CORRECT | It’s a reference to an industry standard rather than a concrete artifact for automated detection. |
| 9 | JEC-61508 → Mentioned | CORRECT | It’s cited as a safety standard reference and isn’t a unique, directly matchable indicator. |
| 10 | Triconex system → Described | CORRECT | It names a proprietary product, providing descriptive context that would require additional enrichment for automated detection. |
| 11 | Cyber Security Implications of SIS Integration with Control Networks  2011%20mod%20jan%202013.pdf → Actionable | CORRECT | The complete file name is a unique, exact match that can be used directly in detection rules. |
| 12 | Remote Desktop Protocol → Mentioned | CORRECT | It is a generic protocol name without a unique, actionable identifier. |
| 13 | RDP jump box → Mentioned | CORRECT | It is a descriptive reference to a gateway device rather than a concrete, unique artifact for detection. |
| 14 | Modbus/TCP → Mentioned | CORRECT | It refers to a well‐known industrial protocol, which is only conceptually referenced rather than uniquely actionable. |
| 15 | OPC → Mentioned | CORRECT | It is a generic reference to an industrial communication protocol and lacks the specificity needed for direct detection. |

| 16 | CRASHOVERRIDE → Actionable | CORRECT | The malware family name "CRASHOVERRIDE" is unique and can be matched directly for detection. |

| 17 | SIS equipment → Mentioned | CORRECT | It's a generic, conceptual reference to ICS equipment with no unique identifying details. |
| 18 | safety controller → Mentioned | CORRECT | It’s a non‑unique descriptive term referring to a general type of device, not an actionable identifier. |
| 19 | standard PLC → Mentioned | CORRECT | The term is generic and lacks specificity, making it a conceptual reference rather than an exact match. |
| 20 | backdoor accounts → Described | CORRECT | The phrase describes a type of account with contextual details but isn’t a precise, directly matchable identifier. |
| 21 | Schneider Electric's Triconex units → Described | CORRECT | It references a specific product line with contextual detail that requires additional enrichment for detection. |
| 22 | X.509 mutual authentication → Mentioned | CORRECT | It denotes a conceptual cryptographic protocol reference rather than a unique, actionable indicator. |

| 23 | Figure 3: ICS Cyber Kill-Chain → Mentioned | CORRECT | It's a figure caption reference without technical IOC details. |
| 24 | TRISIS → Described | INCORRECT — should be "Actionable" because it is the complete, unique tool name that can be directly used in detection rules. | 
| 25 | py2exe → Mentioned | CORRECT | It's a generic reference to a publicly available compiler, not a unique indicator. |
| 26 | Schneider Electric Triconex device → Mentioned | CORRECT | It describes a specific ICS device, but is not a unique, actionable identifier. |
| 27 | Triconex 3008 processor modules → Mentioned | CORRECT | It indicates a device model without sufficient uniqueness for automated detection. |
| 28 | SIS device → Mentioned | CORRECT | It's a generic reference to a Safety Instrumented System device and not directly actionable. |

29 | TRISIS → Actionable | CORRECT | "TRISIS" is a unique, complete tool name that can be directly matched for detection.  
30 | SIS → Mentioned | CORRECT | "SIS" is too generic, referencing a category rather than a unique identifier, making it non-actionable.

| 31 | TRISIS → Described | CORRECT | The observable is only a tool name mentioned in context without providing a unique, complete signature for direct detection.  |

| 32 | `TRISIS` → `Actionable` | CORRECT | "TRISIS" is a specific, complete tool name that can be exactly matched for detection. |
| 33 | `SIS` → `Described` | CORRECT | "SIS" is generic and ambiguous, referring to a control system that requires additional context for detection. |
| 34 | `loader` → `Described` | CORRECT | "loader" is a generic module name and not unique enough to enable automated detection without further enrichment. |

| 35 | TRISIS executable → Actionable | INCORRECT — should be "Described" because the term is a generic label for the malware file rather than a complete, unique indicator that can be precisely matched. | It lacks specific data (e.g., exact filename, hash, or full code snippet) that enables direct automated detection. |
| 36 | Triconex software → Mentioned | CORRECT | It only references legitimate software behavior conceptually, without providing a specific indicator that can be directly used for detection. |
| 37 | initializing code (4-byte sequence) → Described | CORRECT | It describes a code snippet lacking the full explicit byte sequence, thereby necessitating further enrichment before direct detection. |

| 38 | TRISIS → Described | CORRECT — the tool name, although exactly matchable, serves as a descriptive label rather than a unique, technical artifact used for automated detection. | Rule 3: Tool names are typically descriptive. |
| 39 | SIS → Mentioned | CORRECT — the abbreviation is generic and context‐dependent, making it unsuitable as a concrete detection signature. | Ambiguity leads to a Mentioned rank. |
| 40 | ladder logic → Mentioned | CORRECT — the term refers to a generic programming language construct in ICS environments and is not uniquely actionable. | Generic reference, not serving as a detection indicator. |
| 41 | Start Code → Described | CORRECT — although it implies a code segment, the term is too generic to be used directly for detection without further context. | Generic reference to code rather than a unique artifact. |
| 42 | Figure 4: TRISIS Attack Flow → Mentioned | CORRECT — as a figure caption, it is a descriptive representation of the attack flow and not a direct, actionable indicator. | Descriptive caption rather than a precise detection artifact. |

| 43 | SIS → Mentioned | CORRECT | "SIS" is a generic term for Safety Instrumented Systems, which is ambiguous and non‑actionable. |
| 44 | Schneider Electric's Triconex → Described | CORRECT | The product name is specific but used contextually rather than as a unique detection string. |

| 45 | Triconex Controllers → Described | CORRECT | The term is a generic description of a type of controller, not a unique actionable identifier. |
| 46 | Tristation terminals (Triconex programming software) → Described | CORRECT | This observable is a product description requiring further context to be actionable. |
| 47 | Tricon key switch → Described | CORRECT | It’s a generic component name that does not offer enough unique information for automated detection. |

| 48 | TRISIS → Actionable | CORRECT | The unique malware name “TRISIS” is an exact, unique identifier that can be directly matched for detection. |
| 49 | SIS controller(s) → Mentioned | CORRECT | It refers generically to safety instrumented system controllers and cannot be turned into a concrete detection rule. |
| 50 | L2: Process LAN → Mentioned | CORRECT | The label names a network segment in a conceptual way, lacking unique, searchable properties for automated detection. |

| 51 | py2exe → Described | INCORRECT — should be "Mentioned" because it’s a generic reference to a common tool that isn’t directly actionable for detection. | The observable is a common software name lacking unique, low-false-positive characteristics. 

| 52 | TRISIS executable → Actionable | CORRECT | The observable is a unique identifier which can be directly matched in logs, making it actionable. |
| 53 | SIS controller → Mentioned | CORRECT | The term is generic and lacks specific identifiers for precise detection, fitting the "Mentioned" category. |
| 54 | TRISIS attack → Mentioned | CORRECT | As a campaign/attack name, it is conceptual rather than a specific, actionable indicator. |

| 55 | TRISIS → Actionable | CORRECT | The unique malware/tool name can be directly matched for detection, making it actionable. |

| 56 | `Yara rules` → `Mentioned` | CORRECT | The observable is a generic reference to detection rules without including actual rule content, making it non‑actionable. |
| 57 | `Indicators of Compromise (IOCs)` → `Mentioned` | CORRECT | The observable is a conceptual term without specific actionable details, so it is appropriately classified as "Mentioned". |

| 58 | Triconex → Mentioned | CORRECT | The product name is generic and not a unique detection artifact. |
| 59 | Schneider Electric → Mentioned | CORRECT | The vendor name is generic and not directly actionable as a detection signature. |
| 60 | SIS → Mentioned | CORRECT | "SIS" is a general acronym for Safety Instrumented Systems and lacks the specificity needed for actionable detection. |
| 61 | safety systems → Mentioned | CORRECT | The broad term "safety systems" is non-specific and not suitable for direct, concrete detection. |

| 62 | SIS → Described | CORRECT | "SIS" is a generic reference to Safety Instrumented System lacking unique, actionable technical details. |

| 63 | dragos.com → Actionable | CORRECT | A domain name is a complete identifier and can be directly used for detection. |
| 64 | info@dragos.com → Actionable | CORRECT | An email address is a complete, unique indicator that can be directly matched in logs. |

===== ranking_results/ranking_results5.txt =====
md file name: /content/validation/VB2021-Slowik.md

| 1 | `vblocalhost.com` → `Actionable` | CORRECT | The domain is complete and unique, making it directly actionable for detection. |

| 2 | joe.slowik@gigamon.com → Actionable | CORRECT | The email address is a complete, unambiguous identifier that can be directly matched. |
| 3 | www.virusbulletin.com → Actionable | CORRECT | The domain is a fully-qualified, unique indicator that is actionable for detection. |

| 4 | Berserk Bear → Mentioned | CORRECT | Threat actor names are conceptual references and not unique, actionable technical indicators. |
| 5 | Dragonfly → Mentioned | CORRECT | As an alias of a threat actor, it remains a generic reference and is not directly actionable. |
| 6 | Crouching Yeti → Mentioned | CORRECT | Alias names, like threat actor names, are abstract and do not provide a unique, actionable indicator. |
| 7 | Sandworm → Mentioned | CORRECT | Despite its association with specific activities, the name is a conceptual reference and not a directly actionable artifact. |

| 8 | `Berserk Bear` → `Mentioned` | CORRECT | This is a threat actor alias mentioned conceptually rather than a concrete, actionable indicator. |
| 9 | `Dragonfly` → `Mentioned` | CORRECT | This alternate threat actor alias is only referenced conceptually, fitting the "Mentioned" category. |
| 10 | `Energetic Bear` → `Mentioned` | CORRECT | As an alternative alias for a threat actor, it is used conceptually and is not technically actionable. |
| 11 | `TEMP.Isotope` → `Mentioned` | CORRECT | Being an alias for a threat actor, it is referenced conceptually, which justifies the "Mentioned" rank. |
| 12 | `Crouching Yeti` → `Mentioned` | CORRECT | This is a conceptual reference to a threat actor via an alias, not a unique technical artifact. |
| 13 | `ALLANITE` → `Mentioned` | CORRECT | The value is a threat actor alias mentioned in the report, and thus is correctly ranked as "Mentioned". |
| 14 | `DYMALLOY` → `Mentioned` | CORRECT | It is an alternative threat actor alias given conceptually, making "Mentioned" the proper rank. |
| 15 | `Berserk` → `Mentioned` | CORRECT | As a shortened alias for a threat actor, it serves as a conceptual reference rather than an actionable indicator. |
| 16 | `Sandworm` → `Mentioned` | CORRECT | This threat actor name is only referenced for differentiation, fitting the "Mentioned" classification. |

| 17 | `#### Figure 1: Berserk overview.` → `Mentioned` | CORRECT | The observable is a figure caption, which is only conceptually referenced and not actionable. |
| 18 | `Berserk Bear` → `Mentioned` | CORRECT | As a threat actor name, it is a conceptual reference rather than a concrete, actionable indicator. |
| 19 | `Figure 2: Berserk timeline.` → `Mentioned` | CORRECT | Being a figure caption from the CTI report, it is only a conceptual reference without direct detection value. |

| 20 | `THE DRAGONFLY CAMPAIGN` → `Mentioned` | CORRECT | Campaign names, being conceptual labels, are not direct indicators for automated detection. |
| 21 | `Berserk Bear` → `Mentioned` | CORRECT | Threat actor names are used descriptively and lack the specificity required for actionable detection. |
| 22 | `Energetic Bear` → `Mentioned` | CORRECT | Similar to other threat actor designations, this is a conceptual label rather than a concrete detection indicator. |

| 23 | CVE-2011-0611 → Actionable | CORRECT | It's a complete, unique identifier (a CVE) that can be directly matched for detection. |
| 24 | Adobe Portable Document Format (PDF) → Described | CORRECT | It's a generic file format reference that requires further context to act upon. |
| 25 | XML Data Package (XDP) files → Described | CORRECT | It describes a file format used as a container rather than an explicit, unique detection indicator. |
| 26 | Java archive (JAR) file → Described | CORRECT | It refers to a common file archive type, making it ambiguous without additional actionable details. |

| 27 | LightsOut exploit kit → Actionable | INCORRECT — should be "Described" because the exploit kit’s name is generic and lacks the unique, concrete pattern needed for direct automated matching. | The observable is a product/family name rather than an exact, unambiguous artifact. |
| 28 | Hello → Described | CORRECT | The term is ambiguous and requires additional context for reliable detection. |
| 29 | HelloEK → Actionable | CORRECT | The string is sufficiently specific to be used as a direct indicator in automated detection. |
| 30 | | Website                  | Description                                                        |  … (the table) → Actionable | INCORRECT — should be "Described" because the table is a composite artifact that must be parsed to extract individual actionable indicators. | The multi-entry table does not provide a single, unique indicator for direct detection without further enrichment. |

| 31 | Havex DLL payload → Described | CORRECT | The term is a descriptive label for a malware payload rather than a unique, directly matchable indicator. |
| 32 | MESA Imaging Swiss Ranger photography software → Described | CORRECT | It names a commercial software tool and is not a unique, exact indicator for automated detection. |
| 33 | eWon Talk2M eCatcher industrial maintenance software → Described | CORRECT | The observable names a product/tool and lacks the uniqueness needed for an actionable indicator. |
| 34 | eWon eGrabit VPN client software → Described | CORRECT | As a software product name, it provides context but isn’t a singular, directly matchable artifact. |
| 35 | mbCONFTOOL → Described | CORRECT | The tool name is descriptive and ambiguous without additional unique attributes for direct matching. |
| 36 | mbCHECK → Described | CORRECT | It is a software/tool name that requires further context to be actionable in detection rules. |
| 37 | VCOM\_LAN2 → Described | CORRECT | This string, although exact, represents a tool identifier that is best used descriptively rather than as a unique trigger. |
| 38 | .ndata → Actionable | CORRECT | The PE section name is an exact, complete string that can be directly used in rule matching. |
| 39 | Nullsoft Scriptable Install System (NSIS) → Described | CORRECT | It refers to a common installer framework, making it too generic to be an actionable indicator on its own. |
| 40 | rundll32 → Described | CORRECT | As a common Windows utility, “rundll32” is not unique and therefore fits the descriptive category. |
| 41 | RunDllEntry → Described | CORRECT | The exported function name is ambiguous and lacks the uniqueness required for an actionable indicator. |
| 42 | (complete PE header figure capture for mbCHECK installer) → Actionable | INCORRECT — should be "Described" because the multi‐line metadata block isn’t a singular, directly matchable indicator and requires further extraction of actionable fields. | The artifact is a bulk capture of file metadata that serves as contextual information rather than a concrete, automatable indicator. |

| 43 | "| Port number | Associated service or software                                                                                       |\n|-------------|----------------------------------------------------------------------------------------------------------------------|\n| 102         | Siemens SIMATIC PLC Communications                                                                                   |\n| 502         | Modbus over Ethernet                                                                                                 |\n| 11234       | Measuresoft ScadaPro Communications                                                                                  |\n| 12401       | 7-Technologies Graphical SCADA, GE Proficy License Server Manager, WillinTech KingSCADA                              |\n| 44818       | Rockwell Automation ControlLogix and RSLinx, Tec4Data SmartCooler, Cisco IOS Common<br>Industrial Protocol processor |\n\nTable 2: Hard-coded ICS-related ports." → Actionable | INCORRECT — should be "Described" because the text is a composite, formatted table that requires parsing before it can be used in automated detection. | The observable is an aggregated listing of individual port numbers rather than a single complete, matchable indicator. |
| 44 | Open Platform Communication (OPC) standard → Mentioned | CORRECT | It merely names a standard concept without providing a unique, directly actionable identifier. |

| 45 | Havex → Described | CORRECT | "Havex" is a malware family name used for descriptive reference, not as a precise detection indicator. |
| 46 | Karagany → Described | CORRECT | "Karagany" is a tool name from CTI context that describes a malware family but isn’t unique for automated matching. |
| 47 | DreamLoader → Described | CORRECT | "DreamLoader" is a malware framework name provided descriptively, making it unsuitable as a direct indicator. |
| 48 | Sysmain → Described | CORRECT | "Sysmain" is given as a malware tool name in context and is ambiguous enough to warrant a descriptive rating. |
| 49 | DDex → Described | CORRECT | "DDex" serves as a family or tool name observed in analysis, fitting the descriptive category rather than actionable. |
| 50 | ddex.exe → Actionable | CORRECT | "ddex.exe" is a complete file name that can be matched directly, making it an actionable indicator. |
| 51 | ClientX → Described | CORRECT | "ClientX" is a malware tool name provided for context, making it adequately described but not uniquely actionable. |
| 52 | Crouching Yeti → Mentioned | CORRECT | "Crouching Yeti" is a campaign label referenced conceptually, which aligns with a mentioned rating.

| 53 | "Dragonfly campaign" → "Mentioned" | CORRECT | It refers to a campaign name described in the report, a generic conceptual reference not directly usable for detection. |
| 54 | "early Berserk behaviours" → "Mentioned" | CORRECT | It describes generic behaviors associated with a campaign that lack the specificity needed for automated detection. |
| 55 | "SWC targets" → "Mentioned" | CORRECT | It generically names targets without providing a specific, actionable technical indicator. |
| 56 | "Havex modules" → "Mentioned" | CORRECT | It refers to malware modules in a descriptive manner rather than offering a unique artifact for detection. |

| 57 | Dragonfly campaign → Mentioned | CORRECT | The campaign name is conceptually referenced without actionable technical detail. |
| 58 | Berserk Bear → Mentioned | CORRECT | As a threat actor name, it is a conceptual reference rather than a directly detectable artifact. |
| 59 | OPC enumeration utility → Described | CORRECT | It describes a tool's functionality without providing a unique, actionable technical indicator. |
| 60 | OPC enumeration payload → Described | CORRECT | The payload is a descriptive element of malware behavior that is not directly unique for detection. |
| 61 | spear phishing → Mentioned | CORRECT | It names an attack technique, which is a generic reference and not an actionable technical indicator. |

| 62 | RESURGENCE → Described | CORRECT | Campaign titles are descriptive entities that require context rather than being concrete technical indicators. |
| 63 | Dragonfly → Described | CORRECT | As a campaign name reference, it is presented as a descriptive entity not directly usable for automated detection. |
| 64 | DRAGONFLY 2.0 → Described | CORRECT | This updated campaign name is a descriptive reference and not a standalone actionable artifact. |
| 65 | PALMETTO FUSION → Described | CORRECT | The campaign title is given as context and requires enrichment, fitting the Described rank. |
| 66 | Berserk Bear → Described | CORRECT | Threat actor names are labels for entities that need additional context, making Described the appropriate rank. |
| 67 | SWC → Described | CORRECT | As a software/tool name reference in threat context, it is descriptive rather than a precise, actionable indicator.

| 68 | Dragonfly campaign → Mentioned | CORRECT | It's a campaign name referenced conceptually rather than a unique, actionable artifact. |
| 69 | Dragonfly 2.0 → Mentioned | CORRECT | It's a campaign variant name mentioned as a reference, not as an actionable identifier. |
| 70 | Palmetto Fusion → Mentioned | CORRECT | It's a campaign identifier mentioned in context, lacking the precision needed for detection. |
| 71 | Responder → Mentioned | CORRECT | It's a tool name referenced conceptually and not provided as a unique, actionable string. |
| 72 | phishing → Mentioned | CORRECT | It's a generic attack method term, referenced conceptually without unique actionable attributes. |
| 73 | SWC → Mentioned | CORRECT | It's an abbreviated attack technique referenced in context and not directly actionable. |

| 74 | "Phishery" → "Described" | CORRECT | It’s the name of an open‐source phishing tool that, while identifiable, isn’t a complete technical artifact for automated detection. |
| 75 | "Dragonfly 2.0" → "Mentioned" | CORRECT | As a campaign name, it is a conceptual reference that cannot be directly translated into an automated detection rule. |
| 76 | (Table block representing a phishing sample referencing ISO 27001 and Dragonfly 2.0) → "Described" | CORRECT | The table provides contextual, descriptive information rather than a concrete, unique indicator suitable for direct detection. |
| 77 | "Palmetto Fusion" → "Mentioned" | CORRECT | Being a campaign name, it serves as a generic reference that is not sufficiently unique to drive automated detection. |
| 78 | (Table block resume phishing sample with industrial control and IT references) → "Described" | CORRECT | The extensive text block is descriptive in nature and lacks a concise, unique artifact that would enable direct automated matching. |
| 79 | "Berserk" → "Mentioned" | CORRECT | As a threat actor/group name, it is referenced conceptually and does not constitute a precise, directly actionable indicator. |
| 80 | "Dragonfly campaign" → "Mentioned" | CORRECT | The generic reference to a campaign is a conceptual label and is not a complete, unique artifact for automated detection. |

| 81 | ameresco[.]com → Actionable | CORRECT | Domain is complete and actionable after trivial deobfuscation. |
| 82 | cfemedia[.]com → Actionable | CORRECT | Domain is fully specified and actionable once normalized. |
| 83 | cfemedia.gcnpublishing[.]com → Actionable | CORRECT | Obfuscated domain is complete and can be directly used for detection after minor cleanup. |
| 84 | controleng  .  com → Actionable | CORRECT | Extra spaces are a trivial normalization issue, leaving a complete actionable domain. |
| 85 | csemag . com → Actionable | CORRECT | Domain remains distinct and fully actionable after removing unnecessary spaces. |
| 86 | gama . com.tr → Actionable | CORRECT | Despite spacing issues, it's a complete domain including country TLD, making it actionable. |
| 87 | grand-central[.]net → Actionable | CORRECT | Domain is uniquely identified and actionable after simple deobfuscation. |
| 88 | oilandgaseng . com → Actionable | CORRECT | Extra spacing is trivial; the normalized domain is complete and actionable. |
| 89 | plantengineering[.]com → Actionable | CORRECT | Obfuscation does not impede detection; the domain is complete and actionable. |
| 90 | reenergyholding[.]com → Actionable | CORRECT | Domain is entirely specified and actionable after minor deobfuscation adjustments. |
| 91 | turcas.[.]com.tr → Actionable | CORRECT | Despite unconventional obfuscation placement, the domain remains complete and actionable. |

| 92 | `jquery.easing.js` → `Described` | CORRECT | The filename is common and not uniquely identifiable for automated detection, so additional contextual analysis is needed. |

| 93 | `/typo3conf/ext/t3s_jslidernews/res/js/jquery.easing.js` → `Actionable` | CORRECT | The file path is a complete, unique identifier that can be directly matched in detection tools. |
| 94 | `file: / / 184.154.150.66/ce.png` → `Actionable` | CORRECT | Despite its unusual formatting, the URL string is complete and specific enough to be leveraged for direct detection. |
| 95 | `184.154.150.66` → `Actionable` | CORRECT | The IPv4 address is a complete and concrete indicator that can be directly used in search and detection. |

| 96 | `Figure 7: Injected code example.` → `Described` | Validator output CORRECT | The figure caption does not contain actual code details, making it insufficient for direct detection. |
| 97 | `Dragonfly 2.0 campaign` → `Mentioned` | Validator output CORRECT | Campaign names are conceptual references and not directly actionable. |
| 98 | `Palmetto Fusion campaign` → `Mentioned` | Validator output CORRECT | As a campaign name, it is only a reference rather than a unique indicator for detection. |
| 99 | `Berserk-related operations` → `Mentioned` | Validator output CORRECT | The term is a generic operational reference lacking specific actionable indicators. |
| 100 | `SWC` → `Mentioned` | Validator output CORRECT | The term is ambiguous and does not provide enough detail to be actionable. |

| 101 | `Heriplor` → `Actionable` | CORRECT | Its unique backdoor name makes it directly matchable with low false-positive risk. |
| 102 | `PSExec utility` → `Described` | CORRECT | The term is generic for a legitimate tool and requires additional context to detect malicious use. |
| 103 | `SWC` → `Mentioned` | CORRECT | The ambiguous, unspecific term cannot be turned into a concrete detection indicator. |

| 104 | Palmetto Fusion → Mentioned | CORRECT | The value is a generic campaign phase designation without a unique, actionable identifier. |
| 105 | Berserk → Mentioned | CORRECT | As a threat actor alias, it is referenced conceptually and is not a concrete, matchable artifact. |
| 106 | Dragonfly campaign → Mentioned | CORRECT | The campaign name is used in a descriptive manner and isn’t directly actionable for detection. |
| 107 | Havex's OPC item → Described | CORRECT | It describes a specific ICS capability but lacks a unique, exact string for automated detection. |
| 108 | port scanners → Mentioned | CORRECT | The term is generic and conceptual, referring to reconnaissance tools rather than a concrete indicator. |
| 109 | OPC polling entity → Described | CORRECT | It is a descriptive artifact that requires additional context for detection rather than being a unique indicator. |
| 110 | remote access profiles → Mentioned | CORRECT | The phrase is a generic reference to configuration items and is not a directly actionable string. |
| 111 | control system-related documentation → Mentioned | CORRECT | It generically references documentation and cannot be used as a specific detection indicator. |
| 112 | custom tool → Mentioned | CORRECT | The term is too generic to trigger automated detection and is referenced conceptually. |

| 113 | "Dragonfly" → "Mentioned" | CORRECT | Campaign names are generic references and not unique, actionable indicators. |
| 114 | "Dragonfly 2.0" → "Mentioned" | CORRECT | As a campaign name, it is a generic reference not directly usable for automated detection. |
| 115 | "Palmetto Fusion" → "Mentioned" | CORRECT | The campaign name is a generic reference extracted from text, matching the intended usage. |
| 116 | "Berserk Bear" → "Mentioned" | CORRECT | Threat actor names are conceptual identifiers and are not actionable on their own. |
| 117 | "| Berserk Bear-Linked Campaigns | ... Figure 9: Comparing Dragonfly, Palmetto Fusion and Dragonfly 2.0." → "Mentioned" | CORRECT | The complete table capture is a report excerpt and not a concrete, unique indicator for detection. |
| 118 | "Phishing" → "Mentioned" | CORRECT | ‘Phishing’ is a generic infection vector term and cannot be directly used for detection. |
| 119 | "SWC" → "Mentioned" | CORRECT | The acronym is ambiguous and only conceptually referenced, thus non‑actionable. |
| 120 | "Supply Chain" → "Mentioned" | CORRECT | This generic reference to an attack vector is not a unique string for automated detection. |
| 121 | "Traffic Shaping" → "Mentioned" | CORRECT | The term describes a technique rather than a unique, actionable indicator. |
| 122 | "Registry Keys" → "Mentioned" | CORRECT | As a generic reference to a persistence mechanism, it is not uniquely actionable. |
| 123 | "I NK Files" → "Mentioned" | CORRECT | This generic term for a persistence method does not provide a unique, actionable string. |
| 124 | "LNK Files" → "Mentioned" | CORRECT | The reference is to a file type used for persistence and remains non‑actionable. |
| 125 | "Credential Harvesting" → "Mentioned" | CORRECT | The observable describes a technique in general terms, making it unsuitable for direct detection. |

| 126 | Palmetto Fusion → Mentioned | CORRECT | Campaign names used for attribution are non-actionable, making "Mentioned" the appropriate rank. |
| 127 | Berserk → Mentioned | CORRECT | Threat actor names are conceptually referenced and not directly actionable in telemetry. |
| 128 | SWC → Mentioned | CORRECT | As a campaign identifier, "SWC" is used for context and not for automated detection. |
| 129 | Dragonfly → Mentioned | CORRECT | Historical campaign names are contextually referenced and deemed non-actionable, justifying "Mentioned." |

| 130 | `SWC` → `Mentioned` | CORRECT | The value is a threat actor group name mentioned in the report, not a unique actionable indicator. |
| 131 | `Berserk operations` → `Mentioned` | CORRECT | It is a campaign name referenced conceptually without a unique, actionable pattern. |
| 132 | `Dragonfly 2.0` → `Mentioned` | CORRECT | As a campaign name, it is used conceptually and is not directly actionable. |
| 133 | `Palmetto Fusion` → `Mentioned` | CORRECT | It is only a campaign name mentioned in context, lacking actionable uniqueness. |

| 134 | `| Website              | Description                    |  |...Table 4: Ukrainian websites featuring compromises.` → Actionable | INCORRECT — should be "Described" because the value is a table block containing multiple obfuscated domain names that require extraction before they can serve as direct detection indicators. | The observable is not a singular, clean artifact but a formatted table needing additional parsing to be actionable. |

| 135 | San Francisco International Airport website (primary web page and mirrored resource) → Described | CORRECT | The observable lacks a specific URL or direct indicator, making it insufficient for automated detection and appropriately "Described". |
| 136 | Berserk activity → Mentioned | CORRECT | The observable is a generic reference to threat actor activity rather than a concrete, actionable technical indicator. |

| 137 | `Dragonfly campaign` → `Mentioned` | CORRECT | Campaign names are conceptual references and not direct technical indicators. |
| 138 | `Dragonfly 2.0` → `Mentioned` | CORRECT | As a campaign variant reference, it is a conceptual identifier rather than an actionable artifact. |
| 139 | `Palmetto Fusion campaign` → `Mentioned` | CORRECT | The campaign name is used conceptually, making it non‑actionable for direct detection. |
| 140 | `GRU` → `Mentioned` | CORRECT | This is a threat actor name reference and is not a precise technical indicator. |
| 141 | `FSB` → `Mentioned` | CORRECT | The abbreviation for the federal agency serves as a conceptual reference rather than an actionable IOC. |
| 142 | `SVR` → `Mentioned` | CORRECT | As a general threat actor identifier, it remains a conceptual mention. |
| 143 | `Main Center for Special Technologies` → `Mentioned` | CORRECT | Organizational unit names are conceptual and not unique technical detection artifacts. |
| 144 | `Unit 74455` → `Mentioned` | CORRECT | Though specific, it is an organizational reference that is generally non‑actionable. |
| 145 | `Sandworm` → `Mentioned` | CORRECT | Threat actor aliases like this are referenced conceptually rather than with precise technical indicators. |
| 146 | `NOBELIUM` → `Mentioned` | CORRECT | This threat actor name is used conceptually and does not act as a detailed, actionable indicator. |
| 147 | `Berserk` → `Mentioned` | CORRECT | As a threat actor name reference, it is a conceptual identifier, not directly actionable. |
| 148 | `Berserk Bear` → `Mentioned` | CORRECT | This alias is a conceptual reference to a threat actor rather than a concrete, actionable artifact. |
| 149 | `Triton event` → `Mentioned` | CORRECT | Incident names like this serve as descriptive references, making them non‑actionable by themselves. |
| 150 | `Ukraine power events` → `Mentioned` | CORRECT | As an incident descriptor, the term is conceptual and not a direct indicator for detection. |
| 151 | `Ukraine electric sector attacks` → `Mentioned` | CORRECT | The phrase is a description of an incident and serves as a conceptual reference rather than an actionable indicator. |
| 152 | `steel mill incident` → `Mentioned` | CORRECT | This generic incident descriptor is conceptual and not intended as a precise detection artifact. |

| 153 | Berserk Bear → Mentioned | CORRECT | Threat actor names are conceptual references rather than unique detection strings. |
| 154 | Turla → Mentioned | CORRECT | Threat actor names are used conceptually and are not directly actionable for automated detection. |
| 155 | Sandworm → Mentioned | CORRECT | As with other threat actor names, this is merely a reference and not a precise, searchable indicator. |
| 156 | NOBELIUM → Mentioned | CORRECT | The threat actor name is a generic reference and cannot be turned into a concrete detection rule. |
| 157 | steel mill incident → Mentioned | CORRECT | Incident titles are conceptual and ambiguous, lacking the specificity needed for actionable detection. |
| 158 | Palmetto Fusion campaign → Mentioned | CORRECT | Campaign names are descriptive; they do not provide unique, standalone detection indicators. |
| 159 | Triton incident → Mentioned | CORRECT | Incident references are conceptual and not structured enough to be directly actionable. |

| 160 | G0002 → Mentioned | CORRECT | Threat Group identifiers are conceptual references and not directly matchable for automated detection. |
| 161 | pr/six-russian-gru-officers-charged-connection-worldwide-deployment-destructive-malware-and → Described | CORRECT | It is a relative URL path that requires a base URL to be actionable. |
| 162 | doc/dragonfly_threat_against_western_energy_suppliers → Described | CORRECT | As a relative URL path, it lacks the complete context needed for direct detection. |
| 163 | like-a-crouching-yeti/65240/ → Described | CORRECT | This relative URL fragment requires additional contextual information, making it non‐actionable. |
| 164 | security/watering-hole-attacks-target-energy-sector → Described | CORRECT | Being a relative URL, it cannot be directly used in detection without further context. |
| 165 | blogspot.com/2013/09/unknown-ek-by-way-how-much-is-fish.html → Actionable | CORRECT | The observable is a complete URL with a domain, making it unique and directly matchable. |
| 166 | 2014/05/continued-analysis-of-lightsout-exploit.html → Described | CORRECT | It is a relative URL that requires additional context such as a base domain to be actionable. |
| 167 | 2014/03/hello-new-exploit-kit.html → Described | CORRECT | As a relative URL, it lacks complete identification for direct automated detection. |
| 168 | archives/00002718.htm → Described | CORRECT | This relative URL path is incomplete without a domain and thus is only descriptive. |
| 169 | ICS-ALERT-14-176-02A → Mentioned | CORRECT | Alert identifiers are used as conceptual references and are not unique detection tokens. |
| 170 | pdf;jsessionid=0D0C277250AB9142211BC681A76B4043.2_cid341?__blob=publicationFile&v=2 → Described | CORRECT | This URL fragment with dynamic query components requires further contextual information. |
| 171 | alerts/TA17-293A → Described | CORRECT | Although referencing an alert, its presentation as a relative URL path makes it non‑actionable. |
| 172 | TA18-074A → Mentioned | CORRECT | Standalone alert identifiers serve as reference markers rather than actionable indicators. |
| 173 | us-officials-say-russian-government-hackers-have-penetrated-energy-and-nuclear-company-businessnetworks/2017/08/bbfde9a2-638b-11e7-8adc-fea80e32bf47_story.html → Described | CORRECT | This relative URL lacks a domain, making it incomplete for direct detection. |
| 174 | html#more → Mentioned | CORRECT | A generic URL fragment like this is only conceptually referenced and non‑actionable. |
| 175 | Phishery → Described | CORRECT | As the name of a phishing tool, it is ambiguous and not unique enough for direct automated detection. |
| 176 | com/media/EB_public_FINAL_EN_20042018.pdf → Described | CORRECT | The relative file path lacks complete context, making it more descriptive than actionable. |
| 177 | TA18-106A → Mentioned | CORRECT | Standalone alert identifiers are conceptual references and are not directly used for detection. |
| 178 | com/article/russian-state-hackers-behind-san-francisco-airport-hack/ → Described | CORRECT | Being a relative URL path, it requires additional context to be actionable. |
| 179 | AA20-296A → Mentioned | CORRECT | Alert identifiers like this are references, not complete artifacts for automated matching. |
| 180 | NOBELIUM → Mentioned | CORRECT | Threat actor names are conceptually referenced and lack the specificity needed for direct detection. |
| 181 | reports/2021/01/26/sunburst-industrial-victims/ → Described | CORRECT | This relative URL needs a base domain to become actionable, so it remains descriptive. |
| 182 | INTELLIGENCE_SERVICES_1513.pdf → Described | CORRECT | File names by themselves can be ambiguous and are thus classified as descriptive. |
| 183 | analysis-of-cyberattack-on-u-s-think-tanks-non-profits-public-sector-by-unidentified-attackers/ → Described | CORRECT | The observable is a relative URL lacking the full context needed for direct, automated detection. |
| 184 | blog/threat-research/2018/11/not-so-cozy-an-uncomfortable-examination-of-a-suspected-apt29-phishing-campaign.html → Described | CORRECT | As a relative URL, it is incomplete and requires further contextual data to be actionable. |

md file name: /content/validation/VPNFilter Update - VPNFilter exploits endpoints, targets new devices.md

| 1 | VPNFilter → Mentioned | CORRECT | "VPNFilter" is merely the name of a malware family mentioned, and no unique technical artifact is provided to enable actionable detection.  |

| 2 | \VPNFilter] → Mentioned | CORRECT | The value is a malware family name with extraneous characters, making it a conceptual reference rather than a unique, actionable indicator. |
| 3 | VPNFilter → Mentioned | CORRECT | It directly names a malware family and is used conceptually, not as a concrete detection artifact. |
| 4 | ASUS → Mentioned | CORRECT | As a vendor name, it’s a generic reference not suitable for automated, low‐false‐positive detection. |
| 5 | D-Link → Mentioned | CORRECT | The vendor name is generic and serves as contextual information rather than a unique indicator. |
| 6 | Huawei → Mentioned | CORRECT | This common vendor reference is conceptual and not a unique, actionable identifier. |
| 7 | Ubiquiti → Mentioned | CORRECT | It’s a vendor reference used for context and lacks the uniqueness required for actionable detection. |
| 8 | UPVEL → Mentioned | CORRECT | As a vendor name, it’s non‐unique and only mentioned for descriptive purposes. |
| 9 | ZTE → Mentioned | CORRECT | The vendor is referenced conceptually and does not offer a unique detection signature. |
| 10 | Linksys → Mentioned | CORRECT | This is a generic vendor name used for context, not as a precise, automated indicator. |
| 11 | MikroTik → Mentioned | CORRECT | The reference is contextual and generic, making it unsuitable as a unique detection artifact. |
| 12 | Netgear → Mentioned | CORRECT | It is a vendor name that only serves to describe the affected entity rather than to act as a unique signature. |
| 13 | TP-Link → Mentioned | CORRECT | Being a common vendor reference, it’s only conceptual and not directly actionable. |
| 14 | ssler → Actionable | CORRECT | The specific malware module name is a unique indicator that can be directly matched in detection rules. |
| 15 | dstr → Actionable | CORRECT | This specific malware module indicator is unique and can be used for automated detection with low false‐positives. |

| 16 | `ssler` → `Actionable` | CORRECT | It is a specific tool name that can be directly matched in endpoint logs. |
| 17 | `iptables -I INPUT -p tcp --dport 8888 -j ACCEPT` → `Actionable` | CORRECT | It is a complete, unambiguous shell command that can be used for detection. |
| 18 | `iptables -t nat -l PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 8888` → `Actionable` | CORRECT | The full iptables command is specific and directly actionable. |
| 19 | `./ssler logs src:192.168.201.0/24 dst:10.0.0.0/16 -A PREROUTING -s 192.168.201.0/24 -d 10.0.0.0/16 -p tcp -m tcp --dport 80 -j REDIRECT --to-ports 8888` → `Actionable` | CORRECT | It is a full shell command with clear parameters, making it directly usable for detection. |
| 20 | `ip_tables.ko` → `Actionable` | CORRECT | This is a specific kernel module filename that can be precisely matched. |
| 21 | `iptable_filter.ko` → `Actionable` | CORRECT | The filename is complete and unique, allowing for actionable detection. |
| 22 | `iptable_nat.ko` → `Actionable` | CORRECT | As a distinct kernel module filename, it is suitable for direct detection. |
| 23 | `192.168.201.0/24` → `Actionable` | CORRECT | The CIDR range is fully specified and can be directly used in detection rules. |
| 24 | `10.0.0.0/16` → `Actionable` | CORRECT | It is a complete IPv4 CIDR range which is clear and actionable. |
| 25 | `accounts.google.com` → `Actionable` | CORRECT | The domain is fully qualified and can be exactly matched in DNS logs. |
| 26 | `www.google.com` → `Actionable` | CORRECT | It is a complete, unambiguous domain name usable for detection. |
| 27 | `twitter.com` → `Actionable` | CORRECT | The full domain name is clearly defined and actionable. |
| 28 | `www.facebook.com` → `Actionable` | CORRECT | It is a fully specified domain suitable for direct matching. |
| 29 | `www.youtube.com` → `Actionable` | CORRECT | The domain is complete and can be directly used in detection rules. |
| 30 | `google` → `Described` | CORRECT | As a domain fragment, it is ambiguous and requires additional context before automated detection. |
| 31 | `assword=` → `Described` | CORRECT | This is a partial substring used for detecting credentials, making it ambiguous rather than unique. |
| 32 | `ass=` → `Described` | CORRECT | It is an incomplete substring indicator and thus appropriately classified as described. |
| 33 | `sername=` → `Described` | CORRECT | As a fragment of a term (e.g., username), it is ambiguous and requires further context. |
| 34 | `ser= 0` → `Described` | CORRECT | Despite being an exact string, it is an incomplete substring for credential detection and hence described. |
| 35 | `ame=` → `Described` | CORRECT | This partial substring lacks uniqueness and is best treated as a non‑actionable indicator. |
| 36 | `oqin=` → `Described` | CORRECT | It is an ambiguous substring indicator that does not uniquely identify an artifact. |
| 37 | `ail=` → `Described` | CORRECT | As a partial fragment used for credential detection, it is appropriately classified as described. |
| 38 | `hone=` → `Described` | CORRECT | This incomplete substring is ambiguous and fits the described category. |
| 39 | `session%5Busername` → `Described` | CORRECT | The URL-encoded substring is ambiguous and requires additional context for actionable detection. |
| 40 | `session%5Bpassword` → `Described` | CORRECT | It is a URL-encoded partial string used to detect credentials and is suitably described. |
| 41 | `session[password` → `Described` | CORRECT | This is an ambiguous substring indicator lacking full specificity, making it described. |
| 42 | `signin` → `Described` | CORRECT | The generic term is ambiguous and likely to produce false positives, so it is best classified as described. |
| 43 | `reps_*.bin` → `Described` | CORRECT | The inclusion of a wildcard makes it a filename pattern rather than a unique identifier, justifying the described rank. |

| 44 | dstr → Described | CORRECT | "dstr" is a short malware module identifier that is ambiguous and requires contextual enrichment rather than direct matching. |
| 45 | vpnfilter → Described | INCORRECT — should be "Actionable" because it is a complete process name that can be directly matched in detection rules. | A complete indicator like a unique process name (Rule 2) is actionable. |
| 46 | security → Described | CORRECT | "security" is overly generic and can trigger false positives, so it is appropriately described. |
| 47 | tor → Described | CORRECT | "tor" is ambiguous—it could refer to either the Tor process or network service—making it non‐unique. |
| 48 | /var/tmp/client_ca.crt → Actionable | CORRECT | A full file path is a concrete and unique indicator that can be directly acted upon. |
| 49 | /var/tmp/client.key → Actionable | CORRECT | The complete file path is unambiguous and directly matchable. |
| 50 | /var/tmp/client.crt → Actionable | CORRECT | A full file path that serves as a unique indicator. |
| 51 | /var/run/vpnfilterm/htpx → Actionable | CORRECT | The exact file path provided is concrete and can be directly used in detection. |
| 52 | /var/run/vpnfilter → Actionable | CORRECT | A complete file path that is specific and directly matchable. |
| 53 | /var/run/vpn.tmp → Actionable | CORRECT | The unique file path string makes it actionable. |
| 54 | /var/run/vpn.pid → Actionable | CORRECT | An exact file path string that is clearly detectable. |
| 55 | /var/run/torrc → Actionable | CORRECT | As a full file path indicator, it is concrete and actionable. |
| 56 | /var/run/tord/hidden_ssh/private_key → Actionable | CORRECT | The detailed file path (including a sensitive key reference) is specific and matchable. |
| 57 | /var/run/tord/hidden ssh/hostname → Actionable | CORRECT | Despite the space in the path, it’s a complete and unique file path. |
| 58 | /var/run/tor → Actionable | CORRECT | The fully specified file path makes it directly actionable. |
| 59 | /var/run/msvf.pid → Actionable | CORRECT | A unique and concrete file path serves as a direct indicator. |
| 60 | /var/run/client_ca.crt → Actionable | CORRECT | The exact file path is unambiguous and matchable. |
| 61 | /var/run/client.key → Actionable | CORRECT | The complete file path is clear and can be directly used for detection. |
| 62 | /var/run/client.crt → Actionable | CORRECT | A full and exact file path indicator qualifies as actionable. |
| 63 | /var/pckg/.mikrotik. → Actionable | CORRECT | Even with a trailing dot, this full file path is unique and matchable. |
| 64 | /var/msvf.pid 0 → Actionable | CORRECT | The string, though including a trailing '0', is a complete file path indicator. |
| 65 | /var/client_ca.crt → Actionable | CORRECT | A fully specified file path makes it a direct indicator. |
| 66 | /var/client.key → Actionable | CORRECT | The complete file path is clear and actionable. |
| 67 | /var/client.crt 0 → Actionable | CORRECT | Despite the trailing digit, the full file path is specific and matchable. |
| 68 | /tmp/client_ca.crt o → Actionable | CORRECT | The file path (including an extra trailing character) is an exact string indicator. |
| 69 | /tmp/client.key → Actionable | CORRECT | A complete file path that is uniquely defined and directly matchable. |
| 70 | 0 /tmp/client.crt → Actionable | CORRECT | Even with a leading '0', the full file path is explicit and actionable. |
| 71 | /flash/nova/etc/loader/init.x3 → Actionable | CORRECT | The complete file path is a concrete indicator for detection. |
| 72 | /flash/nova/etc/init/security → Actionable | CORRECT | A full file path that is sufficiently specific for automated matching. |
| 73 | /flash/nova/etc/devel-login → Actionable | CORRECT | The exact file path acts as a unique indicator. |
| 74 | /flash/.mikrotik. → Actionable | CORRECT | Despite being noted as a duplicate, the exact path is complete and matchable. |
| 75 | /var/run/vpnfilterw/ → Actionable | CORRECT | The fully defined directory path is uniquely actionable. |
| 76 | /var/run/tord/hidden_ssh/ → Actionable | CORRECT | A complete directory path that serves as a concrete indicator. |
| 77 | /var/run/tord/ → Actionable | CORRECT | The directory path is fully specified and directly matchable. |
| 78 | /flash/nova/etc/loader/ → Actionable | CORRECT | A complete directory path clearly qualifies as an actionable observable. |
| 79 | /flash/nova/etc/init/ → Actionable | CORRECT | The full path is specific and can be directly used for detection. |
| 80 | /dev/mtdX → Actionable | CORRECT | A device file path is a complete and unique indicator. |
| 81 | rm -rf /* → Actionable | CORRECT | The full shell command is concrete and can be matched exactly. |
| 82 | ps → Described | CORRECT | "ps" is a generic command and is too common to serve as a unique detection indicator. |
| 83 | R600VPN → Described | CORRECT | As a malware sample name, it isn’t unique enough for direct automated detection. |
| 84 | TP-LINK R600-VPN → Described | CORRECT | Product names typically require further context, so being described is appropriate. |
| 85 | </ and > 0 → Mentioned | CORRECT | The HTML fragment pattern is generic and only serves as a conceptual reference. |
| 86 | <?xml → Mentioned | CORRECT | A common XML snippet that isn’t uniquely actionable is rightly mentioned. |
| 87 | Basic Og== 0 → Mentioned | CORRECT | This partial Base64 snippet is ambiguous and only conceptually referenced. |
| 88 | /tmUnblock.cgi → Actionable | CORRECT | The complete URL path is a specific and directly matchable indicator. |
| 89 | Password Required 0 → Mentioned | CORRECT | A generic phrase within HTTP traffic that does not serve as a unique indicator. |
| 90 | <div 0 → Mentioned | CORRECT | An incomplete HTML fragment that is only conceptually referenced. |
| 91 | <form → Mentioned | CORRECT | A partial HTML tag that isn’t unique enough for direct detection. |
| 92 | <input → Mentioned | CORRECT | As a fragment of HTML, it is generic and only mentioned conceptually. |
| 93 | this. and .get → Mentioned | CORRECT | A non-specific code snippet that lacks the uniqueness required for actionable detection. |
| 94 | { → Mentioned | CORRECT | A single literal brace is too generic to be used as a unique detection indicator. |
| 95 | } → Mentioned | CORRECT | Like the opening brace, this literal character is non-unique and conceptually referenced. |
| 96 | 200 OK → Mentioned | CORRECT | A common HTTP response phrase that is not uniquely detectable is appropriately mentioned. |
| 97 | <span → Mentioned | CORRECT | A common HTML snippet that is too generic for direct detection. |
| 98 | <SPAN → Mentioned | CORRECT | The uppercase HTML tag variant remains generic and is rightly only mentioned. |
| 99 | <DIV → Mentioned | CORRECT | An incomplete HTML tag that is used only conceptually, not for direct detection. |
| 100 | Authorization: Basic → Mentioned | CORRECT | This generic HTTP header fragment is only conceptually referenced and not directly actionable. |
| 101 | User → Mentioned | CORRECT | A very generic credential field that cannot serve as a unique detection indicator. |
| 102 | User= → Mentioned | CORRECT | The generic assignment string for credentials is appropriately non-actionable. |
| 103 | user= → Mentioned | CORRECT | A lowercase generic credential field fragment that is only conceptually referenced. |
| 104 | Name= → Mentioned | CORRECT | A common token from credential fields that lacks the uniqueness for direct matching. |
| 105 | name= → Mentioned | CORRECT | This generic credential field element is too ambiguous to be actionable. |
| 106 | Usr= → Mentioned | CORRECT | A non-unique variation of a credential field that requires context before acting. |
| 107 | usr= → Mentioned | CORRECT | Too generic to serve as a reliable indicator, so its mention is appropriate. |
| 108 | Login= → Mentioned | CORRECT | A generic login field indicator that does not provide a unique detection signature. |
| 109 | login= → Mentioned | CORRECT | This ambiguous credential field string is only conceptually referenced. |
| 110 | 0 Pass → Mentioned | CORRECT | A non-specific credential token that is not unique enough for actionable detection. |
| 111 | Pass= → Mentioned | CORRECT | A generic credential field fragment that remains non-actionable by itself. |
| 112 | pass= → Mentioned | CORRECT | The common lowercase variant is too ambiguous for unique detection. |
| 113 | Password= → Mentioned | CORRECT | A generic credential field expression that is only conceptually useful. |
| 114 | password= o → Mentioned | CORRECT | Even with the extra character, it remains a non-unique credential field fragment. |
| 115 | Passwd= → Mentioned | CORRECT | A variant of a generic credential field that doesn’t offer unique detection value. |
| 116 | passwd= o → Mentioned | CORRECT | Despite the extra character, this field remains overly generic and non-actionable. |
| 117 | *modbus* → Mentioned | CORRECT | The wildcard pattern is generic and serves only as a conceptual indicator of Modbus traffic. |

| 118 | VPNFilter → Described | CORRECT | The observable is a malware family name used to describe a broader threat rather than a unique technical indicator. |

| 119 | "photobucket].]com/user/nikkireed11/library" → Actionable | CORRECT | The URL is fully unique after minor normalization, making it directly targetable in detection. |
| 120 | "photobucket[.]com/user/kmila302/library" → Actionable | CORRECT | The obfuscated URL clearly maps to a unique full URL, suitable for actionable detection. |
| 121 | "photobucket[.]com/user/lisabraun87/library" → Actionable | CORRECT | This is a complete URL that becomes actionable once normalized. |
| 122 | "photobucket[.]com/user/eva\\_green1/library" → Actionable | CORRECT | Despite the escaped underscore and obfuscation, it is a full URL that can be uniquely detected. |
| 123 | "photobucket[.]com/user/monicabelci4/library" → Actionable | CORRECT | The observable is a unique obfuscated URL that is directly actionable after normalization. |
| 124 | "photobucket[.]com/user/katyperry45/library" → Actionable | CORRECT | The URL is complete and uniquely identifiable once the obfuscation is resolved. |
| 125 | "photobucket[.]com/user/saraqray1/library" → Actionable | CORRECT | This full obfuscated URL is directly actionable for detection with minor normalization. |
| 126 | "photobucket[.]com/user/millerfred/library" → Actionable | CORRECT | The string is a fully detailed URL that remains actionable after deobfuscation. |
| 127 | "photobucket[.]com/user/jeniferaniston1/library" → Actionable | CORRECT | The observable is a complete URL that, once normalized, can be exactly matched in detection rules. |
| 128 | "photobucket[.]com/user/amandaseyfried1/library" → Actionable | CORRECT | The URL is fully specified and unique, making it actionable after standard deobfuscation. |
| 129 | "photobucket[.]com/user/suwe8/library" → Actionable | CORRECT | This is a complete obfuscated URL and is directly actionable given proper normalization. |
| 130 | "photobucket[.]com/user/bob7301/library" → Actionable | CORRECT | The observable represents a fully unique URL that can be detected after normalizing the obfuscation. |
| 131 | "toknowall[.]com" → Actionable | CORRECT | The obfuscated domain is complete and actionable as a detection indicator once deobfuscated. |

| 132 | 91.121.109[.]209 → Actionable | CORRECT | The observable is a full IP address with only a trivial obfuscation that can be normalized for matching. |
| 133 | 217.12.202[.]40 → Actionable | CORRECT | The observable is a complete, obfuscated IP address which is actionable after a trivial transform. |
| 134 | 94.242.222[.]68 → Actionable | CORRECT | This IP address is identifiable after trivial deobfuscation, making it actionable. |
| 135 | 82.118.242[.]124 → Actionable | CORRECT | The observable is a complete IP address that can be normalized for detection, thus actionable. |
| 136 | 46.151.209[.|33 → Actionable | CORRECT | Despite the anomaly in obfuscation, it clearly represents a complete IP address after minor correction. |
| 137 | 217.79.179[.]14 → Actionable | CORRECT | The observable is a full, obfuscated IP address that is actionable with a trivial transform. |
| 138 | 91.214.203[.]144 → Actionable | CORRECT | This is a complete obfuscated IP address suitable for direct matching after normalization. |
| 139 | 95.211.198[.]231 → Actionable | CORRECT | The observable provides a complete IP address indicator, actionable after trivial obfuscation reversal. |
| 140 | 195.154.180[.]60 → Actionable | CORRECT | The value is a full IP address with minor obfuscation that can be easily reversed, making it actionable. |
| 141 | 5.149.250[.]54 → Actionable | CORRECT | The observable is a complete IP address with simple obfuscation, thus actionable. |
| 142 | 94.185.80 []82 → Actionable | CORRECT | Despite the unusual obfuscation, it clearly represents an IP address after a trivial transform, making it actionable. |
| 143 | 62.210.180[.]229 → Actionable | CORRECT | The observable is a full IP address indicator with trivial obfuscation, rendering it actionable. |
| 144 | 91.200.13 [.]76 → Actionable | CORRECT | Extra whitespace aside, the observable is a complete IP address after minor normalization, and is actionable. |
| 145 | 23.111.177[.]114 → Actionable | CORRECT | This is a complete, obfuscated IP address that can be made searchable with a simple transformation. |
| 146 | 6b57dcnonk2edf5a[.]onion/bin32/update.php → Actionable | CORRECT | The observable represents a full URL with trivial obfuscation, thus it is actionable. |
| 147 | tIjmmy4vmkqbdof4[.]onion/bin32/update.php → Actionable | CORRECT | This URL is complete after a trivial transformation, making it an actionable observable. |
| 148 | zuh3vcyskd4gipkm[.]onion/bin32/update.php → Actionable | CORRECT | The URL, although obfuscated, is complete and can be directly used for detection after normalization. |
| 149 | 4seiwn2ur4f65zo4.onion/bin256/update.php → Actionable | CORRECT | The observable is a full URL without obfuscation issues, making it actionable for detection. |
| 150 | zm3lznxn27wtzkwa.onion/bin16/update.php → Actionable | CORRECT | This complete URL is actionable as it uniquely identifies an indicator for detection. |

| 151 | 50ac4fcd3fbc8abcaa766449841b3a0a684b3e217fc40935f1ac22c34c58a9ec → Actionable | CORRECT | The value is a complete SHA256 hash, a unique identifier that can be directly used for detection. |
| 152 | 0e0094d9bd396a6594da8e21911a3982cd737b445f591581560d766755097d92 → Actionable | CORRECT | The SHA256 hash is complete and unique, making it actionable based on the rules. |
| 153 | b9770ec366271dacdae8f5088218f65a6c0dd82553dd93f41ede586353986124 → Actionable | CORRECT | As a full SHA256 hash, this observable is a complete identifier and directly actionable. |
| 154 | 51e92ba8dac0f93fc755cb98979d066234260eafc7654088c5be320f431a34fa → Actionable | CORRECT | The complete SHA256 hash provides a unique and directly actionable indicator. |
| 155 | 6a76e3e98775b1d86b037b5ee291ccfcffb5a98f66319175f4b54b6c36d2f2bf → Actionable | CORRECT | This SHA256 hash is a unique, complete value that qualifies as actionable. |
| 156 | 313d29f490619e796057d50ba8f1d4b0b73d4d4c6391cf35baaaace71ea9ac37 → Actionable | CORRECT | The observable is a full SHA256 hash, making it a complete and actionable identifier. |

| 157 | `9683b04123d7e9fe4c8c26c69b09c2233f7e1440f828837422ce330040782d17 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 158 | `d6097e942dd0fdc1fb28ec1814780e6ecc169ec6d24f9954e71954eedbc4c70e → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 159 | `4b03288e9e44d214426a02327223b5e516b1ea29ce72fa25a2fcef9aa65c4b0b → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 160 | `9eb6c779dbad1b717caa462d8e040852759436ed79cc2172692339bc62432387 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 161 | `37e29b0ea7a9b97597385a12f525e13c3a7d02ba4161a6946f2a7d978cc045b4 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 162 | `776cb9a7a9f5afbaffdd4dbd052c6420030b2c7c3058c1455e0a79df0e6f7a1d → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 163 | `8a20dc9538d639623878a3d3d18d88da8b635ea52e5e2d0c2cce4a8c5a703db1 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 164 | `0649fda8888d701eb2f91e6e0a05a2e2be714f564497c44a3813082ef8ff250b → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 165 | `2ffbe27983bc5c6178b2d447d8121cefaa5ffa87fe7b9e4f68272ce54787492f → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 166 | `1e741ec9452aab85a2f7d8682ef4e553cd74892e629012d903b521b21e3a15bf → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 167 | `90efcaeac13ef87620bcaaf2260a12895675c74d0820000b3cd152057125d802 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 168 | `eaf879370387a99e6339377a6149e289655236acc8de88324462dcd0f22383ff → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 169 | `081e72d96b750a38ef45e74d0176beb982905af4df6b8654ea81768be2f84497 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 170 | `24b3931e7d0f65f60bbb49e639b2a4c77de83648ff08e097ff0fa6a53f5c7102 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 171 | `4497af1407d33faa7b41de0c4d0741df439d2e44df1437d8e583737a07ec04a1 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 172 | `579b2e6290c1f7340795e42d57ba300f96aef035886e80f80cd5d0bb4626b5fc → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 173 | `eeb3981771e448b7b9536ba5d7cd70330402328a884443a899696a661e4e64e5 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 174 | `952f46c5618bf53305d22e0eae4be1be79329a78ad7ec34232f2708209b2517c → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 175 | `e70a8e8b0cd3c59cca8a886caa8b60efb652058f50cc9ff73a90bc55c0dc0866 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 176 | `5be57b589e5601683218bb89787463ca47ce3b283d8751820d30eee5e231678c → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 177 | `fe46a19803108381d2e8b5653cc5dce1581a234f91c555bbfff63b289b81a3dc → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 178 | `ae1353e8efe25b277f52decfab2d656541ffdf7fd10466d3a734658f1bc1187a → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 179 | `2ef0e5c66f6d46ddef62015ea786b2e2f5a96d94ab9350dd1073d746b6922859 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 180 | `181408e6ce1a215577c1daa195e0e7dea1fe9b785f9908b4d8e923a2a831fce8 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 181 | `2aa7bc9961b0478c552daa91976227cfa60c3d4bd8f051e3ca7415ceaeb604ca → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 182 | `375ededc5c20af22bdc381115d6a8ce2f80db88a5a92ebaa43c723a3d27fb0d6 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 183 | `0424167da27214cf2be0b04c8855b4cdb969f67998c6b8e719dd45b377e70353 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 184 | `7e5dca90985a9fac8f115eaacd8e198d1b06367e929597a3decd452aaa99864b → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 185 | `8de0f244d507b25370394ba158bd4c03a7f24c6627e42d9418fb992a06eb29d8 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 186 | `7ee215469a7886486a62fea8fa62d3907f59cf9bf5486a5fe3a0da96dabea3f9 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 187 | `ff70462cb3fc6ddd061fbd775bbc824569f1c09425877174d43f08be360b2b58 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 188 | `f5d06c52fe4ddca0ebc35fddbbc1f3a406bdaa5527ca831153b74f51c9f9d1b0 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 189 | `bc51836048158373e2b2f3cdb98dc3028290e8180a4e460129fef0d96133ea2e → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 190 | `d9a60a47e142ddd61ff6c3324f302b35feeca684a71c09657ddb4901a715bd4c5 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 191 | `95840bd9a508ce6889d29b61084ec00649c9a19d44a29aedc86e2c34f30c8baf → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 192 | `3bbdf7019ed35412ce4b10b7621faf42acf604f91e5ee8a903eb58bde15688ff → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 193 | `9b455619b4cbfeb6496c1246ba9ce0e4ffa6736fd536a0f99686c7e185eb2e22 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 194 | `bfd028f78b546eda12c0d5d13f70ab27dff32b04df3291fd46814f486ba13693 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 195 | `a15b871fcb31c032b0e0661a2d3dd39664fa2d7982ff0dbc0796f3e9893aed9a → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 196 | `d1bc07b962ccc6e3596aa238bb7eda13003ea3ca95be27e8244e485165642548 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 197 | `eec5cd045f26a7b5d158e8289838b82e4af7cf4fc4b9048eaf185b5186f760db → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 198 | `29ae3431908c99b0fff70300127f1db635af119ee55cd8854f6d3270b2e3032e → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 199 | `ca0bb6a819506801fa4805d07ee2ebaa5c29e6f5973148fc25ed6d75089c06a7 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 200 | `6d8877b17795bb0c69352da59ce8a6bfd7257da30bd0370eed8428fad54f3128 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 201 | `5cf43c433fa1e253e937224254a63dc7e5ad6c4b3ab7a66ec9db76a268b4deeb → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 202 | `a6e3831b07ab88f45df9ffac0c34c4452c76541c2acd215de8d0109a32968ace → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 203 | `f4f0117d2784a3b8dfef4b5cb7f2583dd4100c32f9ee020f16402508e073f0a1 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 204 | `7093cc81f32c8ce5e138a4af08de6515380f4f23ed470b89e6613bee361159e1 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 205 | `350eaa2310e81220c409f95e6e1e53beadec3cffa3f119f60d0daace35d95437 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 206 | `d2de662480783072b82dd4d52ab6c57911a1e84806c229f614b26306d5981d98 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 207 | `c8a82876beed822226192ea3fe01e3bd1bb0838ab13b24c3a6926bce6d84411b → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 208 | `f30a0fe494a871bd7d117d41025e8d2e17cd545131e6f27d59b5e65e7ab50d92 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 209 | `8a20dc9538d639623878a3d3d18d88da8b635ea52e5e2d0c2cce4a8c5a703db1 → Actionable` | CORRECT | Despite being a duplicate, it remains a complete SHA256 hash and is actionable. |
| 210 | `0649fda8888d701eb2f91e6e0a05a2e2be714f564497c44a3813082ef8ff250b → Actionable` | CORRECT | Despite being a duplicate, it remains a complete SHA256 hash and is actionable. |
| 211 | `2c2412e43f3fd24d766832f0944368d4632c6aa9f5a9610ab39d23e79756e240 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 212 | `218233cc5ef659df4f5fdabe028ab43bc66451b49a6bfa85a5ed436cfb8dbc32 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 213 | `cccbf9bff47b3fd391274d322076847a3254c95f95266ef06a3ca8be75549a4b → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 214 | `ab789a5a10b4c4cd7a0eb92bbfcf2cc50cb53066838a02cfb56a76417de379c5 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 215 | `4896f0e4bc104f49901c07bc84791c04ad1003d5d265ab7d99fd5f40ec0b327f → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 216 | `5e715754e9da9ed972050513b4566fb922cd87958ecf472d1d14cd76923ae59a → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 217 | `797e31c6c34448fbecda10385e9ccfa7239bb823ac8e33a4a7fd1671a89fe0f6 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 218 | `48bfcbc3162a0b00412cba5eff6c0376e1ae4cfbd6e35c9ea92d2ab961c90342 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 219 | `7a66d65fa69b857beeeaaef67ec835900eee09a350b6f51f51c83919c9223793 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 220 | `b0edf66d4f07e5f58b082f5b8479d48fbab3dbe70eba0d7e8254c8d3a5e852ef → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 221 | `840ba484395e15782f436a7b2e1eec2d4bf5847dfd5d4787ae64f3a5f668ed4f → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 222 | `80c20db74c54554d9936a627939c3c7ea44316e7670e2f7f5231c0db23bc2114 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 223 | `5dabbce674b797aaa42052b501fb42b20be74d9ffcb0995d933fbf786c438178 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 224 | `055bbe33c12a5cdaf50c089a29eaecba2ccf312dfe5e96183b810eb6b95d6c5a → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 225 | `c084c20c94dbbffed76d911629796744eff9f96d24529b0af1e78cda54cdbf02 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 226 | `5f6ee521311e166243d3e65d0253d12d1506750c80cd21f6a195be519b5d697f → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 227 | `fcb6ff6a679ca17d9b36a543b08c42c6d06014d11002c09ba7c38b405b50debe → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 228 | `a168d561665221f992f51829e0b282eeb213b8aca3a9735dbbaecc4d699f66b9 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 229 | `98112bd4710e6ffe389a2beb13ff1162017f62a1255c492f29238626e99509f3 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 230 | `afacb38ea3a3cafe0f8dbd26dee7de3d0b24cdecae280a9b884fbad5ed195de7 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 231 | `b431aebc2783e72be84af351e9536e8110000c53ebb5db25e89021dc1a83625e → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 232 | `2b39634dce9e7bb36e338764ef56fd37be6cd0faa07ee3673c6e842115e3ceb1 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 233 | `11533eedc1143a33c1deae105e1b2b2f295c8445e1879567115adebfdda569e2 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 234 | `36e3d47f33269bef3e6dd4d497e93ece85de77258768e2fa611137fa0de9a043 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 235 | `e6c5437e8a23d50d44ee47ad6e7ce67081e7926a034d2ac4c848f98102ddb2f8 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 236 | `1cb3b3e652275656b3ae824da5fb330cccd8b27892fb29adc96e5f6132b98517 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 237 | `ec88fe46732d9aa6ba53eed99e4d116b7444afd2a52db988ea82f883f6d30268 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 238 | `99944ad90c7b35fb6721e2e249b76b3e8412e7f35f6f95d7fd3a5969eaa99f3d → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 239 | `8505ece4360faf3f454e5b47239f28c48d61c719b521e4e728bc12d951ecf315 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 240 | `dd88273437031498b485c380968f282d09c9bd2373ef569952bc7496ebadadde → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 241 | `6e7bbf25ea4e83229f6fa6b2fa0f880dde1594a7bec2aac02ff7d2d19945d036 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 242 | `f989df3aeede247a29a1f85fc478155b9613d4a416428188eda1a21bd481713a → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 243 | `4af2f66d7704de6ff017253825801c95f76c28f51f49ee70746896df307cbc29 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 244 | `ba9fee47dcc7bad8a7473405aabf587e5c8d396d5dd5f6f8f90f0ff48cc6a9ce → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 245 | `5d94d2b5f856e5a1fc3a3315d3cd03940384103481584b80e9d95e29431f5f7a → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 246 | `33d6414dcf91b9a665d38faf4ae1f63b7aa4589fe04bdd75999a5e429a53364a → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 247 | `14984efdd5343c4d51df7c79fd6a2dfd791aa611a751cc5039eb95ba65a18a54 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 248 | `879be2fa5a50b7239b398d1809e2758c727e584784ba456d8b113fc98b6315a2 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 249 | `c0cfb87a8faed76a41f39a4b0a35ac6847ffc6ae2235af998ee1b575e055fac2 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 250 | `fc9594611445de4a0ba30daf60a7e4dec442b2e5d25685e92a875aca2c0112c9 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 251 | `81cbe57cd80b752386ee707b86f075ad9ab4b3a97f951d118835f0f96b3ae79d → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 252 | `4e022e4e4ee28ae475921c49763ee620b53bf11c2ad5fffe018ad09c3cb078cc → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 253 | `a3cf96b65f624c755b46a68e8f50532571cee74b3c6f7e34eecb514a1eb400cf → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 254 | `ff471a98342bafbab0d341e0db0b3b9569f806d0988a5de0d8560b6729875b3e → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 255 | `638957e2def5a8fda7e3efefff286e1a81280d520d5f8f23e037c5d74c62553c → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 256 | `4ffe074ad2365dfb13c1c9ce14a5e635b19acb34a636bae16faf9449fb4a0687 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 257 | `4c596877fa7bb7ca49fb78036b85f92b581d8f41c5bc1fa38476da9647987416 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 258 | `49a0e5951dbb1685aaa1a6d2acf362cbf735a786334ca131f6f78a4e4c018ed9 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 259 | `0dc1e3f36dc4835db978a3175a462aa96de30df3e5031c5d0d8308cdd60cbede → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 260 | `e74ae353b68a1d0f64b9c8306b2db46dfc760c1d91bfdf05483042d422bff572 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 261 | `00c9bbc56388e3fffc6e53ef846ad269e7e31d631fe6068ff4dc6c09fb40c48b → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 262 | `c2bcde93227eb1c150e555e4590156fe59929d3b8534a0e2cc5f3b21ede02afa0 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 263 | `70c271f37dc8c3af22fdcad96d326fe3c71b911a82da31a992c05da1042ac06d → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 264 | `ffb0e244e0dabbaabf7fedd878923b9b30b487b3e60f4a2cf7c0d7509b6963ba → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 265 | `dbede977518143bcee6044ed86b8178c6fc9d454fa346c089523eedee637f3be → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 266 | `4d6cbde39a81f2c62d112118945b5eeb1d73479386c962ed3b03d775e0dccfa0 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 267 | `fa229cd78c343a7811cf8314febbc355bb9baab05b270e58a3e5d47b68a7fc7d → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 268 | `4beba775f0e0b757ff32ee86782bf42e997b11b90d5a30e5d65b45662363ece2 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 269 | `a41da0945ca5b5f56d5a868d64763b3a085b7017e3568e6d49834f11952cb927 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 270 | `f3d0759dfab3fbf8b6511a4d8b5fc087273a63cbb96517f0583c2cce3ff788b8 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 271 | `fa4b286eeaf7d74fe8f3fb36d80746e18d2a7f4c034ae6c3fa4c917646a9e147 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 272 | `be3ddd71a54ec947ba873e3e10f140f807e1ae362fd087d402eff67f6f955467 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 273 | `6449aaf6a8153a9ccbcef2e2738f1e81c0d06227f5cf4823a6d113568f305d2a → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 274 | `39dc1aded01daaf01890db56880f665d6cafab3dea0ac523a48aa6d6e6346fff → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 275 | `01d51b011937433568db646a5fa66e1d25f1321f444319a9fba78fd5efd49445 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 276 | `099a0b821f77cb4a6e6d4a641ed52ee8fea659ee23b657e6dae75bb8ca3418c3 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 277 | `4cbf9ecb6ca4f2efed86ba6ebf49436c65afe7ae523ec9dae58e432a9d9a89d0 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 278 | `66a98ad0256681313053c46375cb5c144c81bf4b206aaa57332eb5f1f7176b8c → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 279 | `97d00fc2bc5f5c9a56b498cf83b7a801e2c11c056772c5308ee7adea50556309 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 280 | `9e854d40f22675a0f1534f7c31626fd3b67d5799f8eea4bd2e2d4be187d9e1c7 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 281 | `a125b3e627ecd04d0dd8295e12405f2590144337481eb21086c4afb337c5b3f2 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 282 | `a7d154eaee39ff856792d86720a8d193da3d73bfe4ac8364da030d80539e9ac2 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |
| 283 | `b2dd77af9dd9e8d7d4ebc778f00ff01c53b860a04c4e0b497f2ae74bb8a280c0 → Actionable` | CORRECT | SHA256 hash is a complete, unique identifier that can be directly used in detection rules. |

| 284 | f8286e29faa67ec765ae0244862f6b7914fcdde10423f96595cb84ad5cc6b344 → Actionable | CORRECT | The SHA256 hash is a complete, unique identifier that is directly actionable. |
| 285 | afd281639e26a717aead65b1886f98d6d6c258736016023b4e59de30b7348719 → Actionable | CORRECT | The SHA256 hash is a complete, unique identifier that is directly actionable. |
| 286 | acf32f21ec3955d6116973b3f1a85f19f237880a80cdf584e29f08bd12666999 → Actionable | CORRECT | The SHA256 hash is a complete, unique identifier that is directly actionable. |
| 287 | 47f521bd6be19f823bfd3a72d851d6f3440a6c4cc3d940190bdc9b6dd53a83d6 → Actionable | CORRECT | The SHA256 hash is a complete, unique identifier that is directly actionable. |
| 288 | d09f88baf33b901cc8a054d86879b81a81c19be45f8e05484376c213f0eedda2 → Actionable | CORRECT | The SHA256 hash is a complete, unique identifier that is directly actionable. |
| 289 | 2af043730b632d237964dd6abd24a7f6db9dc83aab583532a1238b4d4188396b → Actionable | CORRECT | The SHA256 hash is a complete, unique identifier that is directly actionable. |
| 290 | 4bfc43761e2ddb65fedab520c6a17cc47c0a06eda33d11664f892fcf08995875 → Actionable | CORRECT | The SHA256 hash is a complete, unique identifier that is directly actionable. |
| 291 | cd8cf5e6a40c4e87f6ee40b9732b661a228d87d468a458f6de231dd5e8de3429 → Actionable | CORRECT | The SHA256 hash is a complete, unique identifier that is directly actionable. |
| 292 | bad8a5269e38a2335be0a03857e65ff91620a4d1e5211205d2503ef70017b69c → Actionable | CORRECT | The SHA256 hash is a complete, unique identifier that is directly actionable. |
| 293 | ff118edb9312c85b0b7ff4af1fc48eb1d8c7c8da3c0e1205c398d2fe4a795f4b → Actionable | CORRECT | The SHA256 hash is a complete, unique identifier that is directly actionable. |
| 294 | 6807497869d9b4101c335b1688782ab545b0f4526c1e7dd5782c9deb52ee3df4 → Actionable | CORRECT | The SHA256 hash is a complete, unique identifier that is directly actionable. |
| 295 | 3df17f01c4850b96b00e90c880fdfabbd11c64a8707d24488485dd12fae8ec85 → Actionable | CORRECT | The SHA256 hash is a complete, unique identifier that is directly actionable. |
| 296 | 1367060db50187eca00ad1eb0f4656d3734d1ccea5d2d62f31f21d4f895e0a69 → Actionable | CORRECT | The SHA256 hash is a complete, unique identifier that is directly actionable. |
| 297 | 94eefb8cf1388e431de95cab6402caa788846b523d493cf8c3a1aa025d6b4809 → Actionable | CORRECT | The SHA256 hash is a complete, unique identifier that is directly actionable. |
| 298 | 78fee8982625d125f17cf802d9b597605d02e5ea431e903f7537964883cf5714 → Actionable | CORRECT | The SHA256 hash is a complete, unique identifier that is directly actionable. |
| 299 | 3bd34426641b149c40263e94dca5610a9ecfcbce69bfdd145dff1b5008402314 → Actionable | CORRECT | The SHA256 hash is a complete, unique identifier that is directly actionable. |

| 300 | d113ce61ab1e4bfcb32fb3c53bd3cdeee81108d02d3886f6e2286e0b6a006747 → Actionable | CORRECT | The fingerprint is a complete, unique hash that can be directly matched. |
| 301 | c52b3901a26df1680acbfb9e6184b321f0b22dd6c4bb107e5e071553d375c851 → Actionable | CORRECT | The complete certificate fingerprint is actionable as a unique identifier. |
| 302 | f372ebe8277b78d50c5600d0e2af3fe29b1e04b5435a7149f04edd165743c16d → Actionable | CORRECT | The hash is a fully defined certificate fingerprint and directly usable in detection. |
| 303 | be4715b029cbd3f8e2f37bc525005b2cb9cad977117a26fac94339a721e3f2a5 → Actionable | CORRECT | Being a complete certificate fingerprint, it is sufficiently unique for automated detection. |
| 304 | 27af4b890db1a611d0054d5d4a7d9a36c9f52dffeb67a053be9ea03a495a9302 → Actionable | CORRECT | The full hash fingerprint qualifies as a unique and actionable artifact. |
| 305 | 110da84f31e7868ad741bcb0d9f7771a0bb39c44785055e6da0ecc393598adc8 → Actionable | CORRECT | The observable is a complete certificate fingerprint suitable for precise alerts. |
| 306 | fb47ba27dceea486aab7a0f8ec5674332ca1f6af962a1724df89d658d470348f → Actionable | CORRECT | This complete hash meets the criteria for actionable observables. |
| 307 | b25336c2dd388459dec37fa8d0467cf2ac3c81a272176128338a2c1d7c083c78 → Actionable | CORRECT | The provided certificate fingerprint is a unique identifier ready for detection. |
| 308 | cd75d3a70e3218688bdd23a0f618add964603736f7c899265b1d8386b9902526 → Actionable | CORRECT | The complete certificate fingerprint is actionable by matching its full hash value. |
| 309 | 909cf80d3ef4c52abc95d286df8d218462739889b6be4762a1d2fac1adb2ec2b → Actionable | CORRECT | The fingerprint is a fully formed hash value, making it uniquely actionable. |
| 310 | 044bfa11ea91b5559f7502c3a504b19ee3c555e95907a98508825b4aa56294e4 → Actionable | CORRECT | As a full certificate fingerprint, it is directly usable for detection. |
| 311 | c0f8bde03df3dec6e43b327378777ebc35d9ea8cfe39628f79f20b1c40c1b412 → Actionable | CORRECT | The complete hash fingerprint is actionable by any detection system relying on unique identifiers. |
| 312 | 8f1d0cd5dd6585c3d5d478e18a85e7109c8a88489c46987621e01d21fab5095d → Actionable | CORRECT | The full certificate fingerprint is a precise and unique value suitable for automated matching. |
| 313 | d5dec646c957305d91303a1d7931b30e7fb2f38d54a1102e14fd7a4b9f6e0806 → Actionable | CORRECT | The fingerprint is a complete, unique certificate hash that can be directly used in detection. |

| 314 | `RT-AC66U (NEW)` → `Mentioned` | CORRECT | The observable is a generic product model mentioned in the report and isn’t a unique, actionable detection artifact. |
| 315 | `RT-N10 (new)` → `Mentioned` | CORRECT | The router model is simply referenced as a product type, lacking the uniqueness needed for actionable detection. |
| 316 | `RT-N10E (new)` → `Mentioned` | CORRECT | It is a generic device model mentioned in the CTI without any unique identifier that can be directly leveraged. |
| 317 | `RT-N10U (new)` → `Mentioned` | CORRECT | The observable is a router model name mentioned in the report and does not provide actionable specifics. |
| 318 | `RT-N56U (new)` → `Mentioned` | CORRECT | As with the others, this router model is only referenced as a product descriptor without actionable detection value. |
| 319 | `RT-N66U (new)` → `Mentioned` | CORRECT | The model number is mentioned for context and does not constitute a concrete, unique indicator for automated detection. |

| 320 | DES-1210-08P → Described | CORRECT | The model number is a descriptive asset indicator from a vendor list, not an IOC used for direct automated detection. |
| 321 | DIR-300 → Described | CORRECT | This networking device model is provided as descriptive information and is not a unique, actionable detection indicator. |
| 322 | DIR-300A → Described | CORRECT | As a complete device model identifier from documentation, it remains descriptive rather than actionable. |
| 323 | DSR-250N → Described | CORRECT | The string is a vendor device model from a list, serving descriptive purposes rather than direct detection. |
| 324 | DSR-500N → Described | CORRECT | Being a product model name extracted from a device list, it is appropriately classified as descriptive. |
| 325 | DSR-1000 → Described | CORRECT | The observable is a network device model number that acts as descriptive inventory data, not a precise detection indicator. |
| 326 | DSR-1000N → Described | CORRECT | Like the others, this D-LINK device model is used for asset description and does not qualify as an actionable IOC.

| 327 | `HG8245` → `Actionable` | INCORRECT — should be "Described" because a device model identifier is generic and may produce many false positives if used directly in detection. | The observable is a product model name that lacks the uniqueness or specificity required for direct actionable use.  |

| 328 | E1200 → Described | CORRECT | The router model string is generic and descriptive, not a unique indicator for direct automated detection. |
| 329 | E2500 → Described | CORRECT | The observable is a standard product model identifier that requires additional context before use in detection. |
| 330 | E3000 → Described | CORRECT | As a device model name noted as new, it remains a descriptive rather than uniquely actionable artifact. |
| 331 | E3200 → Described | CORRECT | The string is a router model designation, serving a descriptive role without direct detection utility. |
| 332 | E4200 → Described | CORRECT | This observable is a generic product model name, appropriately classified as Described for CTI purposes. |
| 333 | RV082 → Described | CORRECT | The value is a router model identifier that is generic and descriptive rather than a unique actionable indicator. |
| 334 | WRVS4400N → Described | CORRECT | The router model string is a descriptive identifier used to classify the device and is not directly actionable. |

| 335 | CCR1009 → Actionable | Validator output CORRECT | The string is a complete, unique Mikrotik device model identifier that can be directly matched in logs. |
| 336 | CCR1016 → Actionable | Validator output CORRECT | The observable is an exact device model identifier, making it directly searchable and actionable. |
| 337 | CCR1036 → Actionable | Validator output CORRECT | The value is a full and unambiguous model name specific to Mikrotik devices, fit for direct matching. |
| 338 | CCR1072 → Actionable | Validator output CORRECT | As a complete product identifier, it is directly actionable via its exact string match in logs. |
| 339 | CRS109 → Actionable | Validator output CORRECT | This observable is a specific device model from the Mikrotik product line, making it uniquely actionable. |
| 340 | CRS112 → Actionable | Validator output CORRECT | The complete device model string is unambiguous and can be used directly in detection rules. |
| 341 | CRS125 → Actionable | Validator output CORRECT | It is a precise identifier for a Mikrotik device model and can be directly matched during searches. |
| 342 | RB411 → Actionable | Validator output CORRECT | The observable is a fully specified device model identifier, making it searchable and actionable. |
| 343 | RB450 → Actionable | Validator output CORRECT | This complete model designation allows for direct matching in system logs, confirming its actionability. |
| 344 | RB750 → Actionable | Validator output CORRECT | The string is a unique and complete identifier for a Mikrotik device, suitable for precise detection. |
| 345 | RB911 → Actionable | Validator output CORRECT | It is an exact device model name, and as such, it can be directly used in detection rules. |
| 346 | RB921 → Actionable | Validator output CORRECT | The observable is a complete Mikrotik model string that can be matched without ambiguity. |
| 347 | RB941 → Actionable | Validator output CORRECT | This model designation is precise and unique, making it actionable when searching system logs. |
| 348 | RB951 → Actionable | Validator output CORRECT | The observable provides a full model name that is distinct and directly usable in detection contexts. |
| 349 | RB952 → Actionable | Validator output CORRECT | It is a complete and explicit device model identifier, fit for direct pattern matching. |
| 350 | RB960 → Actionable | Validator output CORRECT | The string is an unambiguous and complete device model identifier that meets actionable criteria. |
| 351 | RB962 → Actionable | Validator output CORRECT | As a full and specific Mikrotik model, the observable can be directly searched and detected. |
| 352 | RB1100 → Actionable | Validator output CORRECT | The value is an exact device model name, ensuring it is actionable for detection purposes. |
| 353 | RB1200 → Actionable | Validator output CORRECT | Being a complete and distinct model designation, it qualifies as actionable for matching in logs. |
| 354 | RB2011 → Actionable | Validator output CORRECT | The observable is a specific device model string that is directly matchable, making it actionable. |
| 355 | RB3011 → Actionable | Validator output CORRECT | It is a complete and unique identifier within the Mikrotik product line, fitting the actionable criteria. |
| 356 | RB Groove → Actionable | Validator output CORRECT | Despite the space, the model name is an exact identifier that can be directly used in detection. |
| 357 | RB Omnitik → Actionable | Validator output CORRECT | The observable is a fully defined device model name, making it uniquely actionable. |
| 358 | STX5 → Actionable | Validator output CORRECT | This is a complete and exact model identifier, which can be directly matched in system logs. |

| 359 | DG834 → Described | CORRECT | The device model is a descriptive identifier extracted from a CTI report and isn’t a unique, directly matchable indicator. |
| 360 | DGN1000 → Described | CORRECT | The model name is a generic product identifier used descriptively, not as a unique actionable indicator. |
| 361 | DGN2200 → Described | CORRECT | As a NETGEAR device model, it is presented in a descriptive context rather than as a unique detection string. |
| 362 | DGN3500 → Described | CORRECT | The observable is a product model, which is used for device information and is appropriately described. |
| 363 | FVS318N → Described | CORRECT | The model identifier is a descriptive detail from the CTI report and is not a concrete indicator for automated detection. |
| 364 | MBRN3000 → Described | CORRECT | Being a NETGEAR product model, it is a descriptive identifier and fits the “Described” rank. |
| 365 | R6400 → Described | CORRECT | The observable is a model number that’s used to describe a device, making “Described” the appropriate rank. |
| 366 | R7000 → Described | CORRECT | This network device model is a descriptive identifier and not a unique or actionable detection element. |
| 367 | R8000 → Described | CORRECT | As a device model identifier, it’s meant for descriptive use rather than direct actionable detection. |
| 368 | WNR1000 → Described | CORRECT | The model code is a descriptive indicator extracted from a CTI report and is hence appropriately “Described.” |
| 369 | WNR2000 → Described | CORRECT | The observable is a product model from the report and is used for description, not for direct automated detection. |
| 370 | WNR2200 → Described | CORRECT | This NETGEAR device model serves as a descriptive indicator, fitting the “Described” classification. |
| 371 | WNR4000 → Described | CORRECT | The product model is provided as a descriptive piece of information rather than a directly actionable string. |
| 372 | WNDR3700 → Described | CORRECT | As a device model, this observable is used for identification and is appropriately classified as “Described.” |
| 373 | WNDR4000 → Described | CORRECT | The observable model number is purely descriptive, matching the intended “Described” rank. |
| 374 | WNDR4300 → Described | CORRECT | This NETGEAR model serves as a descriptive detail from the CTI report and is not directly actionable. |
| 375 | WNDR4300-TN → Described | CORRECT | The model identifier is descriptive and intended to denote the device type, hence “Described” is correct. |
| 376 | UTM50 → Described | CORRECT | As a network device model from the CTI report, it is used for description rather than as a unique, actionable indicator. |

| 377 | TS251 → Described | CORRECT | It’s a specific product model name that isn’t a unique, low–false positive detection indicator, so “Described” is appropriate. |
| 378 | TS439 Pro → Described | CORRECT | Like TS251, this specific device model is detailed enough for context but not directly actionable. |
| 379 | QNAP NAS devices → Mentioned | CORRECT | It’s a generic reference to a product line rather than a concrete, matchable artifact. |
| 380 | QTS software → Described | CORRECT | Although it names a proprietary operating system, it lacks the uniqueness needed for a direct detection indicator. |

| 381 | "R600VPN" → "Described" | CORRECT | The value is a device model identifier that is too generic for direct automated detection. |
| 382 | "TL-WR741ND (new)" → "Described" | CORRECT | As a product model string with additional version info, it remains ambiguous and thus best classified as "Described". |
| 383 | "TL-WR841N (new)" → "Described" | CORRECT | Similar to the others, this device model string is descriptive rather than a uniquely actionable indicator. |

| 384 | `NSM2 (new)` → `Described` | CORRECT | The device model string is descriptive and does not offer a unique, auto-detectable indicator. |
| 385 | `PBE M5 (new)` → `Described` | CORRECT | The product model string is similarly descriptive and not precise enough for automated detection. |

| 386 | `UPVEL DEVICES` → `Mentioned` | CORRECT | It is a section header for a group of devices, providing only a generic reference that isn’t directly actionable. |
| 387 | `Unknown Models* (new)` → `Mentioned` | CORRECT | The reference is too generic and ambiguous to serve as a concrete, actionable indicator. |

| 388 | `ZXHN H108N (new)` → `Described` | CORRECT | The observable is a device model without distinct, unique detection details, making it appropriately non-actionable.  |

md file name: /content/validation/viewdocument.md

| 1 | `Dragonfly` → `Mentioned` | CORRECT | The observable is a threat actor name, which is typically conceptual and not directly actionable in telemetry. |

| 2 | Backdoor.Oldrea → Actionable | INCORRECT — should be "Described" because a malware family label isn’t a unique, low–false positive indicator and requires contextual enrichment before automated detection. | Malware family names, while used in EDR logs, are not precise technical identifiers like hashes or IPs.
| 3 | Havex → Actionable | INCORRECT — should be "Described" because it’s an alias for a malware family rather than a complete, unique indicator. | Such names are descriptive labels that need additional context to be actionable.
| 4 | Energetic Bear RAT → Actionable | INCORRECT — should be "Described" because this malware family name is a descriptive label and lacks the uniqueness needed for direct automated detection. | Malware family names typically serve as contextual markers rather than precise matchable indicators.
| 5 | Trojan.Karagany → Actionable | INCORRECT — should be "Described" because it is a malware classification label that isn’t precise enough for automated matching. | Descriptive names require further enrichment and are not inherently low–false positive technical indicators.
| 6 | Trojan.Karagany!gen1 → Actionable | INCORRECT — should be "Described" because even vendor‐specific detection names are labels that need additional context for precise detection. | Although specific, these strings represent malware family labels rather than unique technical indicators.

| 7 | malicious PDF attachment → Mentioned | CORRECT | It is a generic, conceptually referenced descriptor without a unique indicator. |
| 8 | The account → Described | CORRECT | The subject line is provided as complete text yet is ambiguous and requires contextual enrichment for detection. |
| 9 | Settlement of delivery problem → Described | CORRECT | As an email subject line used in a campaign, it is a complete string but lacks unique properties for automated detection. |
| 10 | Lightsout exploit kit → Actionable | CORRECT | It is a specific exploit kit name that can be directly matched with low false‐positives. |
| 11 | Hello exploit kit → Actionable | CORRECT | It is a distinct exploit kit name that is unique enough to be used for precise detection. |

| 12 | `Backdoor.Oldrea` → Actionable | CORRECT | The string is a full, exact antivirus detection signature that can be matched directly. |
| 13 | `Trojan.Karagany` → Actionable | CORRECT | The observable is a precise malware detection label that is complete and unique for automated matching. |
| 14 | `Trojan.Karagany!gen1` → Actionable | CORRECT | The detection signature is fully specified and can be exactly used in detection rules.

| 15 | `Lightsout Exploit Kit` → `Described` | CORRECT | It is a descriptive name extracted from a signature rather than a complete, unique indicator for direct automated matching. |
| 16 | `Lightsout Toolkit Website 4` → `Described` | CORRECT | It serves as a descriptive label for a website association rather than a complete URL or directly actionable artifact. |

===== ranking_results/ranking_results_1.txt =====
md file name: /content/validation/asia-16-Spenneberg-PLC-Blaster-A-Worm-Living-Solely-In-The-PLC.md

| 1 | Linux Security → Mentioned | CORRECT | The term is a generic security domain reference and not actionable. |
| 2 | Pentesting Embedded Systems → Mentioned | CORRECT | It is a generic reference to a pentesting focus area and not a concrete technical indicator. |
| 3 | Pentesting RFID Systems → Mentioned | CORRECT | The term denotes a category of testing rather than a specific, actionable artifact. |
| 4 | Pentesting Industrial Control Systems → Mentioned | CORRECT | It is a general reference to pentesting in ICS environments and is not directly actionable. |

5 | S7-1211 → Actionable | CORRECT | The string is a complete, specific PLC model identifier that can be matched exactly.  
6 | 50kb RAM → Described | CORRECT | It describes a hardware specification rather than being a unique, actionable indicator.  
7 | 1MB persistent memory → Described | CORRECT | It is merely a descriptive specification of memory size and isn’t unique enough for automated detection.  
8 | Built-in Ethernet → Described | CORRECT | It simply describes a built‐in feature and does not serve as a unique, actionable indicator.  
9 | V3.0 → Described | CORRECT | This firmware version string is generic and descriptive, not unique enough for direct automated detection.  
10 | TIAv11 → Described | CORRECT | It is a software version descriptor that lacks the uniqueness required for an actionable indicator.

| 11 | OB (OrganizationBlock): → Mentioned | CORRECT | It is a generic label extracted from a bullet list, not a unique, actionable artifact. |
| 12 | FB (FunctionBlock): → Mentioned | CORRECT | It is simply a descriptive label, lacking sufficient unique attributes for automated detection. |
| 13 | SFB (SystemFunctionBlock) Library → Mentioned | CORRECT | It is an organizational descriptor rather than a concrete, actionable observable. |
| 14 | FC (Function): → Mentioned | CORRECT | It is a generic identifier from a bullet list and is not actionable for detection. |
| 15 | SFC(SystemFunction) → Mentioned | CORRECT | It is a descriptive, non-unique label unsuitable for direct detection. |
| 16 | DB (DataBlock): → Mentioned | CORRECT | It is extracted as a generic text label, not a precise indicator for automated matching. |
| 17 | Entry point Class with one method Function Library Global memory → Mentioned | CORRECT | It is a descriptive program structure detail, lacking the concrete attributes needed for actionable detection. |

| 18 | `+ T3` → `Mentioned` | CORRECT | The value is a basic sequential chart token extracted from PLC ladder logic and is too generic for actionable detection. |
| 19 | `T2 Tran2` → `Mentioned` | CORRECT | It combines an identifier and description from a PLC diagram, making it non‑unique and only conceptually referenced. |
| 20 | `T3` → `Mentioned` | CORRECT | A standalone step label from a sequential function chart that remains ambiguous and non‑actionable. |
| 21 | `ST` → `Mentioned` | CORRECT | As a generic status/state token from the chart, it lacks the specificity required for automated detection. |
| 22 | `Trans` → `Mentioned` | CORRECT | This transition indicator is a generic element from PLC logic and isn’t unique enough for actionable use. |
| 23 | `ST Start` → `Mentioned` | CORRECT | It represents a starting state within the chart and is too generic to be used directly in detection rules. |
| 24 | `S3` → `Mentioned` | CORRECT | A simple step label from the PLC diagram that is conceptually referenced, not uniquely actionable. |
| 25 | `11` → `Mentioned` | CORRECT | The numeric token is extracted from context and is too ambiguous and generic for detection purposes. |
| 26 | `12` → `Mentioned` | CORRECT | Similar to the previous numeric token, it is a generic element lacking sufficient actionable uniqueness. |

| 27 | `IN PUTTLE` → `Described` | CORRECT | The string is an ambiguous instruction extracted from a table and is not unique enough for detection. |
| 28 | `INPUT2` → `Described` | CORRECT | As a generic command term, it is insufficiently unique for automated, actionable detection. |
| 29 | `OUTPUT` → `Described` | CORRECT | The observable is a generic instruction keyword that requires additional context to be actionable. |

| 30 | TCP port 102 → Actionable | CORRECT | "TCP port 102" is a specific, complete indicator that can be directly matched in detection rules. |
| 31 | TCON → Actionable | CORRECT | "TCON" is a full, unique command string used by the worm, making it actionable for automated detection. |
| 32 | TDISCON → Actionable | CORRECT | "TDISCON" is a complete command string that can be matched exactly, thus it qualifies as actionable. |

| 33 | "data".con state → Actionable | CORRECT | This PLC tag is a complete and unique identifier that can be directly matched in detection rules. |
| 34 | ```\n"TCON DB" (REQ : = "data" . action,\n          ID:=1,\n          DONE=>"data".con_done,\n          BUSY=>"data".con busy,\n          ERROR=>"data".con error,\n          STATUS=>"data".con status,\n          CONNECT : = "data" . con param) ;\nIF "data".con done = True THEN\n  "data".con_state := 20;\n  "data".con timeout counter := 0;\nELSE\n  "data".con_timeout_counter := "data".con_timeout_counter + 1;\n  IF "data".con timeout counter > 200 THEN\n    "data".con state := 0;\n  END_IF;\nEND IF;\nGOTO CYCLE END;\n``` → Actionable | CORRECT | The code snippet is wrapped in triple backticks, making it a concrete, searchable artifact. |
| 35 | "TCON DB" → Actionable | CORRECT | As a complete PLC tag identifier, it can be directly used for detection without ambiguity. |
| 36 | "data" . action → Actionable | CORRECT | This is a complete and exact PLC tag used to denote an action, thus it is actionable. |
| 37 | "data".con_done → Actionable | CORRECT | The tag is a precise, complete identifier indicating operation completion, making it actionable. |
| 38 | "data".con busy → Actionable | CORRECT | Despite spacing in the name, it remains a unique, complete PLC tag suitable for direct matching. |
| 39 | "data".con error → Actionable | CORRECT | This observable is a fully defined PLC tag that clearly indicates an error condition and is actionable. |
| 40 | "data".con status → Actionable | CORRECT | Being a complete and unique PLC identifier for connection status, it is directly actionable. |
| 41 | "data" . con param → Actionable | CORRECT | The observable represents a complete PLC tag indicating connection parameters, making it directly actionable. |
| 42 | "data".con done → Actionable | CORRECT | This PLC tag is a precise and complete marker for completion, hence it is directly actionable. |
| 43 | "data".con_state → Actionable | CORRECT | The tag is a fully-formed PLC identifier that can be uniquely matched, making it actionable. |
| 44 | "data".con timeout counter → Actionable | CORRECT | Although it contains spaces, the identifier is complete and uniquely recognizable for detection. |
| 45 | "data".con_timeout_counter → Actionable | CORRECT | This is a concrete and complete PLC tag, thus it can be directly used in automated detection. |

| 46 | "```
"TDISCON DB" (REQ : = "data" . action,
             ID := 1 ,
             DONE=>"data".con done,
             BUSY=>"data".con busy,
             ERROR=>"data".con error,
             STATUS=>"data".con_status) ;
IF "data".con error = True OR
  "data".con done = True
THEN
  "data".con param.REM STADDR[4] := ("data".con param.REM STADDR[4] + 1) MOD 255;
  "data".con_timeout_counter := 0;
  "data".con_state := 10;
END IF;
``` → Actionable | CORRECT — The snippet is complete and wrapped in triple backticks, making it directly actionable. |
| 47 | "```
GOTO CYCLE END;
END_IF;
``` → Actionable | CORRECT — Despite being brief, the snippet is provided in a code fence, qualifying it as actionable per Rule 1. |

| 48 | Portscanner → Described | INCORRECT — should be "Mentioned" because it is a generic conceptual reference rather than a unique, matchable identifier. | It only describes the behavior without providing a concrete indicator string. |
| 49 | TCP 102 → Actionable | CORRECT | It is a specific, concrete network port value that can be directly matched in logs. |
| 50 | TCON → Actionable | CORRECT | It is a unique command string that can be directly used in detection rules. |
| 51 | DISCON → Actionable | CORRECT | It is a specific command string that can be directly matched for automated detection. |

| 52 | TSEND → Actionable | CORRECT | "TSEND" is a complete, specific ICS command that can be directly matched for detection. |
| 53 | TRCV → Actionable | CORRECT | "TRCV" is a complete, specific ICS command that can be directly matched for detection. |

| 54 | `S7CommPlus` → `Actionable` | CORRECT | The observable is a unique protocol name that can be exactly matched in detection rules. |
| 55 | `S7-300/400 protocol` → `Actionable` | CORRECT | Despite the appended word "protocol", it clearly identifies a distinct legacy ICS protocol suitable for direct matching. |
| 56 | `S7-1200v4` → `Actionable` | CORRECT | It is a distinct and complete identifier for a specific Siemens PLC model usable in automated detection. |
| 57 | `S7-1500` → `Actionable` | CORRECT | The identifier uniquely refers to a Siemens PLC model, making it directly actionable for detection purposes. |
| 58 | `Transfer of programs` → `Described` | CORRECT | The phrase describes an operational command rather than providing a unique, matchable string. |
| 59 | `Start/Stop CPU` → `Described` | CORRECT | This is a generic descriptive command that requires additional context, thus not directly matchable. |
| 60 | `Read/Write process variables` → `Described` | CORRECT | The observable conveys a conceptual operation rather than a concrete indicator for automated detection. |

| 61 | (hex dump table) → Described | CORRECT | The hex dump is a formatted network packet capture that requires non‑trivial extraction before it can be used in detection. |
| 62 | PLC-Blaster → Described | CORRECT | The tool name is a descriptive reference that isn’t a unique, directly searchable indicator.  |

| 63 | Maqıc → Mentioned | CORRECT | It is a protocol header label referenced in the capture rather than a unique, actionable indicator. |
| 64 | TPKT → Mentioned | CORRECT | As a standard protocol identifier, it’s mentioned for context rather than used for direct detection. |
| 65 | SO8073 → Actionable | CORRECT | It is a unique session identifier that can be reliably matched for detection. |
| 66 | O O OTO TOTO → Described | CORRECT | The field value is ambiguous and lacks the uniqueness needed for an actionable indicator. |
| 67 | Serve rSession → Described | CORRECT | The formatting anomaly makes it unclear and requires additional enrichment before use in detection. |
| 68 | _33234A7 → Actionable | CORRECT | It is a complete and specific identifier derived from the hex bytes, making it actionable. |
| 69 | :::6.0:: → Described | CORRECT | The unusual delimiter/version string is ambiguous and not sufficiently unique for direct matching. |
| 70 | TCP/IP → Mentioned | CORRECT | It is a standard network protocol identifier commonly referenced rather than used as a detection-specific indicator. |
| 71 | Intel( R) PRO/1 → Described | CORRECT | Being a product identifier, it describes a device but requires additional context for actionable detection. |
| 72 | MT D ( → Described | CORRECT | It is a truncated message fragment that lacks the full context needed for an actionable indicator. |
| 73 | K-PC 223 0906+ → Actionable | CORRECT | It appears to be a unique device identifier that can be directly matched in detection systems. |
| 74 | OID B BOOK → Described | CORRECT | The text is ambiguous and does not provide a unique, actionable signature on its own. |
| 75 | SubscriptionCont → Described | CORRECT | As a truncated field value, it needs further context and isn’t definitive enough for automated detection. |
| 76 | ainer r.r → Described | CORRECT | It is an ambiguous fragment not complete enough to serve as an actionable detection indicator. |
| 77 | Frame-End-Delimiter → Described | CORRECT | Although describing a frame boundary, this generic term lacks the uniqueness needed for actionable detection. |
| 78 | PLC-Blaster → Actionable | CORRECT | It is a specific tool name associated with exploitation, making it distinct enough for direct matching. |

| 79 | PLC-Blaster → Mentioned | CORRECT | The observable is a tool name with no directly actionable attributes, making it appropriately classified as Mentioned. |

| 80 | "#### Message 2: Connection setup\n\n| 00000023  03 00 00 89 02 £0 80 72  01 00 7a 32 00 00 04 ca r z2  …" → Actionable | CORRECT | The complete hex dump from a network packet is fully extractable and unique enough for direct matching. |
| 81 | "$$\\mathbf{22}\\_{\\text{(16)}} \\mathbf{+80}\\_{\\text{(16)}} = \\mathbf{A2}\\_{\\text{(16)}}$$" → Described | CORRECT | The hex arithmetic expression requires computation and is not directly usable for automated detection. |

| 82 | `| 0000010B 03 00 00 8c 02 £0 80 72 02 00 7d 31 00 00 05 42 r }1B ... 0000018B  00 04 00 00 00 00 00  72 02 00 00` → `Actionable` | CORRECT | The complete hex dump is a full, unique artifact that can be directly matched for detection. |
| 83 | `$$\mathbf{22}\_{\text{(16)}} \mathbf{+} \mathbf{80}\_{\text{(16)}} = \mathbf{A2}\_{\text{(16)}}$$` → `Mentioned` | CORRECT | The mathematical expression is conceptual rather than a concrete, unique indicator for automated detection. |

| 84 | `#### Message: Download block ...` → `Actionable` | CORRECT | The hex dump is a complete, unique artifact captured verbatim and can be directly matched.  |

| 85 | 0x9315 → Actionable | CORRECT | This is a full, unique hexadecimal identifier that can be directly used in detection rules. |
| 86 | 0x9316 → Actionable | CORRECT | This is a complete hex value extracted from the PLC transfer list, making it actionable. |
| 87 | 0x9311 → Actionable | CORRECT | The identifier is provided as an exact hexadecimal attribute, which qualifies as actionable. |
| 88 | 0×9313 → Actionable | CORRECT | Despite the non‐standard "×" character, the exact string is provided and can be matched, so it is actionable. |
| 89 | 0xa140 → Actionable | CORRECT | This full hexadecimal attribute identifier is complete and directly usable for detection. |
| 90 | 0x936f → Actionable | CORRECT | The complete hex value, as given, is unique and can be actively matched in detection systems. |
| 91 | 0x9370 → Actionable | CORRECT | Provided as a complete hexadecimal identifier, it is directly actionable. |
| 92 | 0x9372 → Actionable | CORRECT | The exact hex attribute is provided, allowing for direct matching – thus actionable. |
| 93 | 0×9359 → Actionable | CORRECT | Despite the unusual "×" symbol, the complete identifier is present and actionable. |
| 94 | 0×935b → Actionable | CORRECT | The exact hexadecimal identifier, even with the non-standard character, qualifies as actionable. |
| 95 | 0x935c → Actionable | CORRECT | This full hex code is clearly defined and can be matched directly in detections. |
| 96 | 0×935f → Actionable | CORRECT | The provided identifier is complete, making it directly actionable despite the symbol variation. |
| 97 | 0×9360 → Actionable | CORRECT | It is a complete, exact hex attribute identifier, hence actionable. |
| 98 | 0×9361 → Actionable | CORRECT | The identifier is fully specified and unique, marking it as actionable. |
| 99 | 0×9365 → Actionable | CORRECT | This hex attribute identifier is complete and directly usable for detection, so it is actionable. |
| 100 | 0x984f → Actionable | CORRECT | A complete hexadecimal transfer attribute identifier that is actionable when directly matched. |
| 101 | 0x9369 → Actionable | CORRECT | The full hex value is provided clearly enough to be used in detection rules. |
| 102 | 0x9c23 → Actionable | CORRECT | This complete hexadecimal identifier qualifies as actionable for detection purposes. |
| 103 | 0xa362 → Actionable | CORRECT | Provided as a complete and unique hexadecimal attribute, it is actionable. |
| 104 | 0x9414 → Actionable | CORRECT | The exact hex identifier is complete and unambiguous, making it directly actionable. |
| 105 | 0x9415 → Actionable | CORRECT | This fully specified hexadecimal code is actionable because it can be directly matched. |
| 106 | 0x9418 → Actionable | CORRECT | The complete hex attribute identifier is provided and can serve as a detection indicator. |
| 107 | 0x9419 → Actionable | CORRECT | A full hexadecimal identifier that can be directly used in detection systems, thus actionable. |
| 108 | 0x941a → Actionable | CORRECT | The complete and unique hex value qualifies as an actionable indicator. |
| 109 | 0x941b → Actionable | CORRECT | This is a full and specific hexadecimal identifier, making it directly actionable. |
| 110 | 0x941d → Actionable | CORRECT | The provided complete hex attribute is uniquely identifiable and actionable. |
| 111 | 0x941e → Actionable | CORRECT | Its complete, exact hexadecimal form makes this identifier actionable. |
| 112 | 0x941f → Actionable | CORRECT | This full hex identifier is unambiguous and can be matched directly, so it is actionable. |
| 113 | 0x9417 → Actionable | CORRECT | As a complete hexadecimal transfer attribute, it qualifies as an actionable indicator. |
| 114 | PLC-Blaster → Actionable | CORRECT | The tool name is a complete, specific identifier that can be directly searched in EDR logs. |

| 115 | `hidden blocks` → `Mentioned` | CORRECT | The string is generic and non‑unique, fitting the "Mentioned" rank. |
| 116 | `blocknumber` → `Mentioned` | CORRECT | "blocknumber" is a generic term without unique actionable details. |
| 117 | `TIA Portal` → `Mentioned` | CORRECT | It is a common software product name rather than a unique, actionable indicator. |
| 118 | `original block` → `Mentioned` | CORRECT | The term is generic and conceptually referenced, matching the "Mentioned" classification. |
| 119 | `data blocks` → `Mentioned` | CORRECT | It is a generic descriptor that lacks the specificity required for an actionable indicator. |

| 120 | "```
<BC>
<Fold UId=\"23\">
<NL UId=\"24\" />
<BCL TE=\" * This is a comment.\"/>
<NL UId=\"21\" />
<BCL TE=\" \" />
<BCE/>
</Fold>
</BC>
<NL UId=\"42\" />
<NL UId=\"38\" />
<Statement TE=\"IF\" UId=\"59\" SI=\"IF\">
```" → Actionable | CORRECT | Wrapped in a code fence, the complete XML source code snippet is unique and can be matched exactly.

| 121 | `02 4c 00 00 e0 02 4c 04 00 e0 02 4c 08 00 e0 02 4c Oc 00 e0 02 4c 10 00 e0 02 4c 14 00 f8 18 58 02 £8 18 58 06 18 40 01 £8 70 00 04 01 02 1a 40 6f 00 2c 7c 00 01 6c 05 01 68 00 68 01 14 40 01` → Actionable | CORRECT — The observable is a complete and unique block of hexadecimal PLC bytecode that can be directly matched in detection rules.

| 122 | TIA → Described | CORRECT | "TIA" is used to refer to Siemens TIA Portal, but by itself it isn’t a unique, searchable indicator, so "Described" is appropriate. |
| 123 | PLC → Mentioned | CORRECT | "PLC" generically refers to a Programmable Logic Controller and does not offer actionable specificity. |
| 124 | pcaps → Mentioned | CORRECT | "pcaps" is a generic term for packet capture files and does not provide a concrete, unique indicator for detection. |
| 125 | empty DBs → Mentioned | CORRECT | "empty DBs" describes a condition rather than a unique artifact, making it non‐actionable. |
| 126 | Anti-replay-protection → Mentioned | CORRECT | "Anti-replay-protection" is a conceptual reference to a security feature and isn’t specific enough to be actionable. |

| 127 | TCP 102 → Actionable | Validator output CORRECT | "TCP 102" is a complete and exact port identifier that can be directly used for detection. |
| 128 | TCON → Actionable | Validator output CORRECT | "TCON" is a specific protocol token that may be matched exactly in network traffic logs. |
| 129 | DISCON → Actionable | Validator output CORRECT | "DISCON" is a complete command token used in the protocol, making it directly actionable. |
| 130 | S7-Protocol → Actionable | Validator output CORRECT | "S7-Protocol" is a complete identifier for the protocol, allowing for precise detection. |
| 131 | TSEND → Actionable | Validator output CORRECT | "TSEND" is an exact and complete protocol command token that can be used for detection. |
| 132 | TRCV → Actionable | Validator output CORRECT | "TRCV" is a complete command token that is directly usable in detection rules. |

| 133 | int main() → Described | CORRECT | The snippet is generic and not unique enough for direct automated detection, so "Described" is appropriate. |

| 134 | `Portscanner` → `Mentioned` | CORRECT | The term is a generic reference to a tool without a unique, actionable signature. |
| 135 | `TCP 102` → `Actionable` | CORRECT | The specific TCP port number is a complete and unique indicator that can be directly used in detection. |
| 136 | `TCON` → `Described` | CORRECT | As a protocol command token, it’s provided as an exact string but lacks broader context for automated matching. |
| 137 | `DISCON` → `Described` | CORRECT | The disconnect command token is detailed but not inherently unique enough for standalone actionable detection. |
| 138 | `S7-Protocol` → `Described` | CORRECT | Although it specifies an industrial protocol, it is a generic label that requires enrichment before serving as a precise detection indicator. |
| 139 | `TSEND` → `Described` | CORRECT | The sending command token is detailed for its role in protocol communication but still needs additional context for actionable use. |
| 140 | `TRCV` → `Described` | CORRECT | The receiving command token is described appropriately as a non-unique indicator requiring further context for detection. |
| 141 | `DoS` → `Mentioned` | CORRECT | “DoS” is a conceptual reference to an attack technique and is too generic to be directly actionable. |
| 142 | `Arbitrary manipulation of outputs` → `Mentioned` | CORRECT | This phrase describes a capability rather than providing a concrete, unique string for detection. |
| 143 | `C&C-Server` → `Mentioned` | CORRECT | The reference to a command and control server is generic and conceptual, thus not directly actionable. |
| 144 | `Proxy` → `Mentioned` | CORRECT | The term “Proxy” is a generic reference lacking the specificity needed for an automated detection signature. |

| 145 | Portscanner → Described | CORRECT | Generic tool name is ambiguous and not unique enough for precise automated detection. |
| 146 | TCP 102 → Actionable | CORRECT | A complete network port indicator that can be directly used in detection rules. |
| 147 | TCON → Actionable | CORRECT | An ICS command token that is complete and directly matchable for detection. |
| 148 | DISCON → Actionable | CORRECT | An ICS command token with a complete, unique string appropriate for automated detection. |
| 149 | S7-Protocol → Actionable | INCORRECT — should be "Described" because it is a generic protocol label rather than a unique, concrete artifact for detection. | The label describes protocol usage instead of providing a specific string to key on. |
| 150 | TSEND → Actionable | CORRECT | An ICS command token provided in full, making it directly actionable for detection. |
| 151 | TRCV → Actionable | CORRECT | An ICS command token that is fully specified and suitable for automated matching. |

| 152 | PLC-Blaster → Described | CORRECT | The observable is a tool name reference that lacks the unique, low false‑positive properties needed for an “Actionable” indicator, so “Described” is appropriate. |

| 153 | OB1 → Described | CORRECT | "OB1" is a generic identifier for a PLC Organization Block that isn’t unique enough to support a low false‑positive automated match. |
| 154 | WARM RESTART → Actionable | CORRECT | "WARM RESTART" is a specific command string from system logs which can be matched directly with minimal ambiguity. |
| 155 | STOP → Described | CORRECT | "STOP" is a generic PLC command term that requires contextual filtering to avoid false positives. |
| 156 | New startup information → Described | CORRECT | The phrase is a log message fragment that describes an event but lacks a unique signature for automated detection. |

| 157 | 38,5kb RAM → Mentioned | CORRECT | Memory metric values are descriptive measurements rather than unique, actionable indicators. |
| 158 | 216,6kb persistent memory → Mentioned | CORRECT | Memory metrics depict usage data and are not unique identifiers for detection. |
| 159 | S7-1211 → Actionable | CORRECT | PLC model identifiers are complete and unique, making them directly actionable. |
| 160 | 50kb (77%) → Mentioned | CORRECT | Memory metric measurements are descriptive values and not suitable for precise automated detection. |
| 161 | 1Mb (21%) → Mentioned | CORRECT | Memory usage figures are descriptive and do not provide a unique, actionable signature. |
| 162 | S7-1212 → Actionable | CORRECT | A PLC model such as this is a complete identifier that can be used in detection rules. |
| 163 | 75kb (51%) → Mentioned | CORRECT | Memory metric values serve as descriptive measurements, not specific actionable indicators. |
| 164 | 1MB (5 %) → Mentioned | CORRECT | Despite minor case variations, memory metrics remain descriptive and non-actionable. |
| 165 | S7-1214 → Actionable | CORRECT | The PLC model is a concrete identifier and qualifies for direct matching in detection routines. |
| 166 | 100kb (38%) → Mentioned | CORRECT | A measurement reading like this is descriptive, lacking the uniqueness for actionable detection. |
| 167 | 4MB (5 %) → Mentioned | CORRECT | Memory metrics are inherently ambiguous and used only to describe the state rather than act on. |
| 168 | S7-1215 → Actionable | CORRECT | The specific PLC model identifier is complete and uniquely actionable. |
| 169 | 125kb (30%) → Mentioned | CORRECT | Memory metric readings are descriptive values and not unique enough to serve as actionable indicators. |
| 170 | S7-1217 → Actionable | CORRECT | The complete PLC model designation qualifies as an actionable observable. |
| 171 | 150kb (25%) → Mentioned | CORRECT | Similar to other memory measurements, this value is descriptive and not directly actionable. |

| 172 | PLC III → Mentioned | CORRECT | It is only a reference to a PLC device without concrete, actionable identifiers. |
| 173 | 150ms → Described | CORRECT | It is a measurement value provided as descriptive detail rather than a unique detection indicator. |
| 174 | 7ms → Described | CORRECT | It describes a cycle time value and isn't a concrete, standalone identifier for detection. |
| 175 | 4,7% → Described | CORRECT | It is a percentage measurement provided as descriptive context, not a uniquely actionable string. |

| 176 | Factory-Reset of the PLC → Described | CORRECT | The observable is a generic PLC command whose detection would require additional contextual information. |
| 177 | Override worm OB → Described | CORRECT | The vendor-specific override command is not uniquely identifiable for automated detection without extra context. |
| 178 | TIA-Portal → Described | CORRECT | As a common product name, it is too generic to serve as a unique, actionable indicator. |

| 179 | `Totally Integrated Automation` → `Described` | CORRECT | It is a product or tool name that is too generic to serve as a unique, actionable indicator. |
| 180 | `画| 六 (b) 圆 (3` → `Described` | CORRECT | The string is ambiguous and lacks a definitive, unique structure for automated detection. |
| 181 | `PORTAL` → `Described` | CORRECT | Its overly generic nature makes it non‑unique and unsuitable as an actionable detection signature. |

| 182 | S7-1200 → Described | CORRECT | The observable is a product model reference that is identifiable by context but not a unique, actionable indicator. |
| 183 | Knowhow Protection → Mentioned | CORRECT | It refers to a generic protection mechanism rather than a unique, detection-ready artifact. |
| 184 | Copy Protection → Mentioned | CORRECT | The term describes a conceptual security feature, lacking the specificity needed for actionable detection. |
| 185 | Access Protection → Mentioned | CORRECT | It is a generic reference to a protection mechanism, not a concrete, searchable indicator. |

| 186 | AES → Mentioned | CORRECT | The observable is a generic reference to an encryption algorithm and is not directly actionable. |
| 187 | SHA-1 hash of password → Described | CORRECT | The observable describes a hash type without providing a unique, searchable value, requiring additional context. |

| 188 | `0×00, 0×00` → `Described` | CORRECT | The value is an ambiguous configuration flag detail that lacks uniqueness for automated detection. |
| 189 | `AES encrypted` → `Mentioned` | CORRECT | The phrase generically describes an encryption state without providing a concrete, actionable artifact. |
| 190 | `AES-Key` → `Mentioned` | CORRECT | The term is a generic reference to an encryption key rather than a complete, matchable key value. |

| 191 | `0x28,0x6f,0x76,0x5c,0x6e,0x3b,0x1e,0x4c, 0xd0,0x8e,0x42,0x31,0x43,0x7b,0x8e,0xbf` → `Actionable` | CORRECT | The hex byte sequence is a complete, unique cryptographic key that can be directly matched in a detection rule. |
| 192 | `SSA-833048` → `Mentioned` | CORRECT | The advisory reference is a conceptual identifier used for documentation and is not directly actionable for detection. |

| 193 | "Knowhow Protection IV" → "Mentioned" | CORRECT | The observable is a generic security control header that isn’t unique or directly actionable. |
| 194 | "POUs" → "Mentioned" | CORRECT | The term refers generically to ICS Program Organization Units and lacks the uniqueness needed for direct detection. |

| 195 | `SSA-833048` → `Described` | CORRECT | The identifier refers to a documented security advisory and is not directly actionable without further context. |

| 196 | S7CommPlus → Actionable | CORRECT | The value is a unique, complete protocol identifier that can be directly matched in network traffic. |
| 197 | By Password → Mentioned | CORRECT | It is a generic phrase describing an access method rather than a unique, actionable indicator. |
| 198 | Start/Stop CPU → Mentioned | CORRECT | It’s a generic command function label that cannot be directly used for precise automated detection. |
| 199 | Transfer Program to PLC → Mentioned | CORRECT | This command function is descriptive and non‑unique, making it non‑actionable. |
| 200 | Retrieve Program from PLC → Mentioned | CORRECT | It is merely a descriptive command function that lacks the uniqueness for actionable detection. |
| 201 | Edit  Output/Input/Memory → Mentioned | CORRECT | Despite the extra whitespace, it remains a generic command function label without unique identifying properties. |
| 202 | Read Identification → Mentioned | CORRECT | It is a common descriptive command label and not a precise, unique indicator. |
| 203 | Assign IP-Adress → Mentioned | CORRECT | The command function is descriptive (and even contains a misspelling), making it unsuitable as a unique indicator. |
| 204 | Set time of day → Mentioned | CORRECT | It is a generic command function label that only conceptually describes an action, not a unique indicator. |
| 205 | Reset → Mentioned | CORRECT | The term is overly generic and cannot serve as a distinct, actionable artifact for detection. |

| 206 | `TCON` → `Described` | Validator output CORRECT | The observable is a generic protocol indicator that lacks the specificity needed for direct, automated detection. |
| 207 | `port 102` → `Actionable` | Validator output CORRECT | The port number is a concrete value that can be directly used in network detection rules. |
| 208 | `PLC` → `Mentioned` | Validator output CORRECT | The term is a generic reference to programmable logic controllers and is not unique enough for actionable detection. |

| 209 | Industrial Ethernet → Mentioned | CORRECT | This observable is a generic technology reference without a unique detection attribute. |
| 210 | Program transfer via TCP to the PLC → Mentioned | CORRECT | The phrase describes a conceptual method rather than providing a concrete, actionable indicator. |
| 211 | Programmable TCP functions → Mentioned | CORRECT | It references a generic feature without a unique identifier, making it non‑actionable. |

| 212 | Siemens → Mentioned | CORRECT | “Siemens” is a generic vendor name, referenced conceptually rather than as a unique, actionable indicator. |
| 213 | Mitsubishi Electric → Mentioned | CORRECT | “Mitsubishi Electric” is a vendor reference that cannot be uniquely or directly used for automated detection. |
| 214 | Schneider Electric → Mentioned | CORRECT | “Schneider Electric” is a generic vendor name, thus it is appropriately classified as Mentioned. |
| 215 | Rockwell Automation → Mentioned | CORRECT | “Rockwell Automation” is a vendor identifier that is conceptually referenced and not meant for direct matching. |
| 216 | S7-300 → Actionable | CORRECT | “S7-300” is a specific product model identifier that can be exactly matched, making it actionable. |
| 217 | S7-400 → Actionable | CORRECT | “S7-400” is a complete, unique product model string suitable for direct detection. |
| 218 | S7-1200 → Actionable | CORRECT | “S7-1200” is a definitive product model designation that qualifies as an actionable indicator. |
| 219 | S7-1500 → Actionable | CORRECT | “S7-1500” is a clearly defined product model that can be directly used in detection rules. |
| 220 | MELSEC iQ-R → Actionable | CORRECT | “MELSEC iQ-R” is a specific and complete product model identifier, making it actionable. |
| 221 | MELSEC iQ-F → Actionable | CORRECT | “MELSEC iQ-F” is a unique product model string that is suitable for actionable detection. |
| 222 | MELSEC-Q → Actionable | CORRECT | “MELSEC-Q” is a complete product model identifier that can be exactly matched in detection systems. |
| 223 | MELSEC-L → Actionable | CORRECT | “MELSEC-L” is a specific model name that serves as a unique and actionable indicator. |
| 224 | MELSEC-F → Actionable | CORRECT | “MELSEC-F” is a distinct product model identifier, making it appropriate for actionable detection. |
| 225 | MELSEC-QS/WS → Actionable | CORRECT | “MELSEC-QS/WS” is a complete and unique product model name that qualifies as actionable even with the slash. |
| 226 | Modicon Easy M → Actionable | CORRECT | “Modicon Easy M” is a specific product model identifier that can be directly matched, hence actionable. |
| 227 | Modicon M → Actionable | CORRECT | “Modicon M” is a precise product model name, making it a directly actionable string. |
| 228 | Modicon LM → Actionable | CORRECT | “Modicon LM” is a complete, unique product model identifier suitable for direct detection. |
| 229 | Modicon Premium → Actionable | CORRECT | “Modicon Premium” is a specific product model name that is unique enough to be actionable. |
| 230 | Modicon Quantum → Actionable | CORRECT | “Modicon Quantum” is a clear product model identifier that can be matched exactly in automated systems. |
| 231 | Preventa XPS Quantum → Actionable | CORRECT | “Preventa XPS Quantum” is a unique and complete product model name, making it actionable. |
| 232 | ControlLogix → Actionable | CORRECT | “ControlLogix” is a specific product model identifier that can be directly utilized in detection rules. |
| 233 | CompactLogix → Actionable | CORRECT | “CompactLogix” is a distinct and complete product model name, fitting the actionable category. |
| 234 | MicroLogix → Actionable | CORRECT | “MicroLogix” is a unique product model string that serves as an actionable indicator. |
| 235 | SmartGuard 600 → Actionable | CORRECT | “SmartGuard 600” is a complete and specific product model identifier, making it actionable. |
| 236 | SLC 500 → Actionable | CORRECT | “SLC 500” is a distinct product model reference that can be exactly matched, thus actionable. |
| 237 | PLC-5 → Actionable | CORRECT | “PLC-5” is a complete product model identifier and can be directly used for detection, hence actionable. |
| 238 | GuardPLC → Actionable | CORRECT | “GuardPLC” is a specific product model name that qualifies as an actionable string. |
| 239 | Micro800 → Actionable | CORRECT | “Micro800” is a unique and complete product model identifier, making it properly classified as actionable. |

| 240 | Siemens S7-300 → Described | CORRECT | The product name is a clear, complete vendor label that informs context but isn’t a unique, actionable indicator. |
| 241 | Siemens S7-400 → Described | CORRECT | The observable is a specific PLC model name from the vendor table, fitting a descriptive indicator rather than an actionable one. |
| 242 | Siemens S7-1200 → Described | CORRECT | This is a full product designation used to describe an asset, not a unique string for automated detection. |
| 243 | Siemens S7-1500 → Described | CORRECT | The observable provides a complete model name that is intended for descriptive reference, not direct automated matching. |
| 244 | Mitsubishi Electric MELSEC iQ-R → Described | CORRECT | A specific PLC product model from a vendor table; its role is descriptive and requires contextual enrichment for detection. |
| 245 | Mitsubishi Electric MELSEC iQ-F → Described | CORRECT | The model name is clearly specified as a vendor product, serving as a descriptive field rather than a standalone indicator. |
| 246 | Mitsubishi Electric MELSEC-O → Described | CORRECT | The observable is a complete product label used for identification rather than being a directly actionable detection string. |
| 247 | Mitsubishi Electric MELSEC-L → Described | CORRECT | As a distinct product name extracted from vendor data, it functions as a descriptive identifier. |
| 248 | Mitsubishi Electric MELSEC-F → Described | CORRECT | The PLC product model is clearly identified but is generic enough to require contextual information, making Described appropriate. |
| 249 | Mitsubishi Electric MELSEC-OS/WS → Described | CORRECT | The product name is specific to the vendor listing and is used for descriptive asset identification rather than actionable matching. |
| 250 | Schneider Electric Modicon Easy M → Described | CORRECT | A model designation from a vendor table that serves to describe the product, not for precise automated detection. |
| 251 | Schneider Electric Modicon M → Described | CORRECT | The observable is a concise product model name that is appropriately categorized as descriptive given its context. |
| 252 | Schneider Electric Modicon LM → Described | CORRECT | This PLC product name functions as a descriptive identifier and does not meet the criteria for direct actionable detection. |
| 253 | Schneider Electric Modicon Premium → Described | CORRECT | The observable provides a full product label that is better suited for contextual description rather than automated indicator matching. |
| 254 | Schneider Electric Modicon Quantum → Described | CORRECT | The model name is complete and clearly descriptive, aligning well with the Described ranking. |
| 255 | Schneider Electric Preventa XPS Quantum → Described | CORRECT | Although detailed, it remains a vendor product designation meant for descriptive purposes rather than direct automated detection. |
| 256 | Rockwell Automation ControlLogix → Described | CORRECT | This observable is a standard product name from an ICS vendor table, thus fitting into the Described category. |
| 257 | Rockwell Automation CompactLogix → Described | CORRECT | The product label is fully articulated and used to describe an asset, not as a unique automated detection indicator. |
| 258 | Rockwell Automation MicroLogix → Described | CORRECT | A complete model name from the vendor table that is appropriate for descriptive reference but not for automated matching. |
| 259 | Rockwell Automation SmartGuard 600 → Described | CORRECT | The observable clearly details a specific PLC product model, making the Described rank accurate given its context. |
| 260 | Rockwell Automation SLC 500 → Described | CORRECT | The product model is fully specified and serves a descriptive role in asset identification rather than as an actionable indicator. |
| 261 | Rockwell Automation PLC-5 → Described | CORRECT | This vendor product name is used for classification purposes and is not intended for direct, automated detection. |
| 262 | Rockwell Automation GuardPLC → Described | CORRECT | A complete product name from a vendor list that appropriately informs context without being directly actionable. |
| 263 | Rockwell Automation Micro800 → Described | CORRECT | The observable is a full PLC product designation that clearly falls under a descriptive context rather than an automated IOC. |

| 264 | S7-300 → Described | CORRECT | Product model name that is generic and not a unique detection indicator. |
| 265 | S7-400 → Described | CORRECT | Product model name that is generic and not a unique detection indicator. |
| 266 | S7-1200 → Described | CORRECT | Product model name that is generic and not a unique detection indicator. |
| 267 | S7-1500 → Described | CORRECT | Product model name that is generic and not a unique detection indicator. |
| 268 | MELSEC iQ-R → Described | CORRECT | Model name of a PLC product, used descriptively and not uniquely actionable. |
| 269 | MELSEC iQ-F → Described | CORRECT | Model name of a PLC product, used descriptively and not uniquely actionable. |
| 270 | MELSEC-O → Described | CORRECT | Model name of a PLC product, used descriptively and not uniquely actionable. |
| 271 | MELSEC-L → Described | CORRECT | Model name of a PLC product, used descriptively and not uniquely actionable. |
| 272 | MELSEC-F → Described | CORRECT | Model name of a PLC product, used descriptively and not uniquely actionable. |
| 273 | MELSEC-OS/WS → Described | CORRECT | Model name of a PLC product, used descriptively and not uniquely actionable. |
| 274 | Modicon Easy M → Described | CORRECT | Model name of a PLC product, used descriptively and not uniquely actionable. |
| 275 | Modicon M → Described | CORRECT | Model name of a PLC product, used descriptively and not uniquely actionable. |
| 276 | Modicon LM → Described | CORRECT | Model name of a PLC product, used descriptively and not uniquely actionable. |
| 277 | Modicon Premium → Described | CORRECT | Model name of a PLC product, used descriptively and not uniquely actionable. |
| 278 | Modicon Quantum → Described | CORRECT | Model name of a PLC product, used descriptively and not uniquely actionable. |
| 279 | Preventa XPS Quantum → Described | CORRECT | Model name of a PLC product, used descriptively and not uniquely actionable. |
| 280 | ControlLogix → Described | CORRECT | Product family name that is descriptive rather than a unique actionable indicator. |
| 281 | CompactLogix → Described | CORRECT | Product family name that is descriptive rather than a unique actionable indicator. |
| 282 | MicroLogix → Described | CORRECT | Product family name that is descriptive rather than a unique actionable indicator. |
| 283 | SmartGuard 600 → Described | CORRECT | Product model name that is generic and not uniquely actionable. |
| 284 | SLC 500 → Described | CORRECT | Product model name that is generic and not uniquely actionable. |
| 285 | PLC-5 → Described | CORRECT | Product model name that is generic and not uniquely actionable. |
| 286 | GuardPLC → Described | CORRECT | Product model name that is generic and not uniquely actionable. |
| 287 | Micro800 → Described | CORRECT | Product model name that is generic and not uniquely actionable. |
| 288 | info@os-s.de → Actionable | CORRECT | Email address is a specific, unique indicator that can be directly used in detection. |

md file name: /content/validation/cause-and-effect-sodinokibi-ransomware-analysis.md

| 1 | cloudflare.com → Actionable | CORRECT | The domain is a complete, exact identifier that can be matched directly, meeting the criteria for Actionable. |

| 2 | Cloudflare's network → Mentioned | CORRECT | The observable is a generic reference to a service rather than a precise, actionable identifier. |
| 3 | origin web server → Mentioned | CORRECT | The observable refers to a vague, generic server designation that isn’t sufficiently specific for direct detection. |

| 4 | 931c8735cc39e224 → Actionable | CORRECT | It is a unique Cloudflare Ray ID that can be matched directly in logs. |
| 5 | Error 522 → Described | CORRECT | The error code is generic and not unique enough for precise automated detection. |

md file name: /content/validation/TA17-132A.md

| 1 | "WannaCry Ransomware" → "Mentioned" | CORRECT | It's a generic reference to the ransomware family and is not directly actionable via telemetry. |
| 2 | "TA17-132A" → "Mentioned" | CORRECT | The alert code is an internal reference not directly tied to a telemetry indicator for automated detection. |

| 3 | "WannaCry" → "Mentioned" | CORRECT | It is a generic reference to a ransomware family rather than a unique, actionable indicator. |
| 4 | "WCry" → "Mentioned" | CORRECT | As an alias for WannaCry, this term is conceptual and not a concrete IOC for automated detection. |
| 5 | "Wanna Decryptor" → "Mentioned" | CORRECT | It is an alternative name for the ransomware, serving as a descriptive reference rather than a directly actionable indicator. |
| 6 | "MS17-010" → "Actionable" | CORRECT | This is a precise vulnerability identifier that can be matched exactly for detection purposes. |
| 7 | "phishing" → "Mentioned" | CORRECT | The term describes a broad attack technique and cannot be turned into a unique, actionable indicator. |

| 8 | `/sites/default/files/publications/ta17-132a_wannacry.xlsx` → Actionable | CORRECT | The file path is a complete, unique identifier that can be directly matched. |
| 9 | `/sites/default/files/publications/ta17-132a_wannacry_stix.xml` → Actionable | CORRECT | The file path is complete and unique, enabling precise detection. |
| 10 | `/sites/default/files/publications/ta17-132a_stix.xml` → Actionable | CORRECT | The complete file path makes this observable actionable for detection. |

| 11 | WannaCry → Mentioned | CORRECT | "WannaCry" is a campaign name that is used conceptually rather than as a unique, precise technical indicator. |
| 12 | WannaCrypt → Mentioned | CORRECT | It is an alias for the ransomware campaign and does not serve as a complete, matchable artifact. |
| 13 | .wnCry → Mentioned | CORRECT | As another alias for the WannaCry campaign, it remains a conceptual reference rather than an actionable IOC. |
| 14 | MS17-010 → Actionable | CORRECT | "MS17-010" is a specific vulnerability identifier that can be matched directly in detection workflows. |
| 15 | EternalBlue → Actionable | INCORRECT — should be "Mentioned" because it is a generic exploit name that lacks a unique technical signature for direct automated detection. | Although well‐known, "EternalBlue" as an exploit descriptor does not provide a precise, actionable artifact. |
| 16 | /sites/default/files/publications/ta17-132a_stix.xml → Actionable | CORRECT | The file path is a complete and specific reference that can be directly used in detection rules. |

| 17 | `4DA1F312A214C07143ABEEAFB695D904` → `Actionable` | CORRECT | MD5 hash is a complete, unique indicator that can be directly matched. |
| 18 | `410044004D0049004E0024` → `Actionable` | CORRECT | The hex pattern is specific and complete, making it directly actionable. |
| 19 | `WannaDecryptor` → `Actionable` | CORRECT | This specific malware-related string can be used for precise automated detection. |
| 20 | `WANNACRY` → `Actionable` | CORRECT | The unique ransomware family name is clear and distinct enough for direct matching. |
| 21 | `Microsoft Enhanced RSA and AES Cryptographic` → `Actionable` | INCORRECT — should be "Described" because it is a generic system string lacking unique threat specificity. | As a common cryptographic provider name used broadly in Windows, it is too generic to serve as an actionable indicator. |
| 22 | `PKS` → `Described` | CORRECT | Its brevity and ambiguity mean that additional context is needed for reliable detection. |
| 23 | `StartTask` → `Described` | CORRECT | The generic command name may lead to many false positives, hence it is best treated as described. |
| 24 | `wcry@123` → `Actionable` | CORRECT | The uncommon combination of characters makes it a specific, actionable indicator. |
| 25 | `{2F6600002F72}` → `Actionable` | CORRECT | The exact hex pattern is precise enough to be directly used in detection rules. |
| 26 | `unzip 0.15 Copyrigh` → `Actionable` | CORRECT | This exact string snippet is sufficiently unique to be matched directly despite its truncation. |
| 27 | `Global\WINDOWS TASKOSHT MUTEX` → `Actionable` | CORRECT | Mutex names are distinct identifiers that can be reliably used in automated detection. |
| 28 | `Global\WINDOWS TASKCST MUTEX` → `Actionable` | CORRECT | The unique mutex value is a specific indicator ideal for direct matching in detection systems. |
| 29 | `{7461736B736368652E65786500000005461736B5374617274000000742E776E7279000069636163}` → `Actionable` | CORRECT | This complete hex pattern is unique and can be directly tied to detection rules. |
| 30 | `{6C73202E202F6772616B742045766572796F6B653A46202F54202F51006174726962202B68` → `Actionable` | CORRECT | Even though it lacks a closing brace, it is a literal hex pattern used as a precise indicator. |
| 31 | `WNcry@2ol7` → `Actionable` | CORRECT | The distinctive string is complete and can be directly used for automated detection. |
| 32 | `Global\MsWinZonesCacheCounterMutexA` → `Actionable` | CORRECT | As a complete and unique mutex name, it is well-suited for direct matching in detection rules. |
| 33 | `PC NETWORK PROGRAM 1.0` → `Mentioned` | CORRECT | This generic product/version string is conceptually referenced and not uniquely actionable. |
| 34 | `LANMAN1.0` → `Mentioned` | CORRECT | The string is a common protocol identifier and therefore only mentioned rather than actionable. |
| 35 | `Windows for Workgroups 3.1a` → `Mentioned` | CORRECT | A well‐known system version, it is too generic to be used as a unique detection artifact. |
| 36 | `__TREEID__PLACEHOLDER__` → `Described` | CORRECT | Being a placeholder, it inherently lacks the specificity required for automated detection. |
| 37 | ` USERID PLACEHOLDER ` → `Described` | CORRECT | As a placeholder indicator, the string is ambiguous and rightly classified as described. |
| 38 | `h6agLCqPqVyXi2VSQ806Yb9ijBX54j` → `Actionable` | CORRECT | This unique token is a complete indicator that can be directly matched in detection rules. |
| 39 | `h54WfF9cGigWFEx92bzmOd0U0aZlM` → `Actionable` | CORRECT | A distinct string indicator, it is sufficiently complete and actionable for direct detection. |
| 40 | `tpGFEoLOU6+5178Toh/nHs/RAP` → `Actionable` | CORRECT | Its unique combination of characters makes it a clear, actionable indicator for automated systems. |

| 41 | 5bef35496fcbdbe841c82f4d1ab8b7c2 → Actionable | CORRECT | The MD5 hash is a complete and unique identifier that is directly actionable for detection. |

| 42 | www[.]iuqerfsodp9ifjaposdfjhgosurijfaewrwergwea.com → Actionable | CORRECT | The domain is a complete, unique indicator that can be directly used in detection (with trivial deobfuscation). |

| 43 | `-m security` → `Actionable` | CORRECT | The provided command-line parameter is a complete signature that can be directly matched in process logs, making it actionable. |

| 44 | `mssecsvc2.0` → `Actionable` | CORRECT | The Windows service name is a unique, exact identifier that can be directly matched. |
| 45 | `Microsoft Security Center (2.0) Service` → `Described` | CORRECT | The display name is generic and not sufficiently unique for automated detection. |
| 46 | `SERVICE AUTO START` → `Described` | CORRECT | This common configuration setting is too generic to be automatically actionable. |
| 47 | `%current directory85bef35496fcbdbe841c82f4d1ab8b7c2.exe -m security` → `Actionable` | CORRECT | The embedded unique executable filename makes the command line string directly matchable for detection. |

| 48 | mssecsvc2.0 → Actionable | CORRECT | The service name is a specific, full identifier that can be directly matched. |
| 49 | UDP 137 → Mentioned | CORRECT | As a generic, well‐known network port, it is only conceptually referenced rather than uniquely actionable. |
| 50 | UDP 138 → Mentioned | CORRECT | Being a standard network port, it’s non‑unique and fits a mentioned context. |
| 51 | TCP 139 → Mentioned | CORRECT | The port is a well‐known network service port, making it a generic reference. |
| 52 | TCP 445 → Mentioned | CORRECT | Although significant in context, the port is generic and not unique enough for direct matching. |
| 53 | MS17-010 → Actionable | CORRECT | The vulnerability bulletin identifier is a complete, unique string that can be exactly matched. |
| 54 | R → Described | CORRECT | The file name is overly generic, making it ambiguous for direct, automated detection. |
| 55 | C:\WINDOWS\tasksche.exe → Actionable | CORRECT | This exact file path is specific and can be reliably used in detection rules. |
| 56 | C:\WINDOWS\tasksche.exe /i → Actionable | CORRECT | The full command line is a complete, exact string that lends itself to automated detection. |
| 57 | iugerfsodp9ifjaposdfihgosurijfaewrwergwea[.]com → Actionable | CORRECT | Despite obfuscation, the domain is fully specified and can be directly matched. |
| 58 | iuqerfsodp9ifjaposdfjhgosurijfaewrwergwea.com → Actionable | CORRECT | The domain is unique and completely provided, making it actionable for detection. |
| 59 | WannaCrypt → Mentioned | CORRECT | As a malware family name, it is conceptual and not a uniquely actionable indicator. |

| 60 | `MS17-010` → `Actionable` | INCORRECT — should be "Described" because this vulnerability bulletin identifier is a reference artifact that isn’t a specific, low‑false‑positive indicator for direct detection. | Vulnerability identifiers like MS17-010 are used descriptively rather than as precise detection signatures. |
| 61 | `SPF` → `Mentioned` | CORRECT | It names a protocol conceptually, and doesn’t provide a concrete, unique indicator for detection. |
| 62 | `DMARC` → `Mentioned` | CORRECT | It names a protocol conceptually, and doesn’t provide a concrete, unique indicator for detection. |
| 63 | `DKIM` → `Mentioned` | CORRECT | It names a protocol conceptually, and doesn’t provide a concrete, unique indicator for detection. |

| 64 | "MS17-010" → "Described" | CORRECT | The patch identifier is a specific reference but not directly tied to a detection artifact. |
| 65 | "SMBv1" → "Described" | CORRECT | It denotes a protocol version, which is descriptive and not unique enough for direct automated detection. |
| 66 | "TCP port 445" → "Actionable" | CORRECT | It is a complete network port indicator that can be directly used in a detection rule. |
| 67 | "UDP ports 137-138" → "Actionable" | CORRECT | The observable specifies a concrete range of ports that can be matched in network traffic. |
| 68 | "TCP port 139" → "Actionable" | CORRECT | It is a precise network port indicator actionable in detection configurations. |
| 69 | "</ncas/alerts/ta16-250a>" → "Mentioned" | CORRECT | It is an advisory reference rather than a uniquely identifiable or directly actionable observable. |

| 70 | NCCICCustomerservice@hq.dhs.gov → Actionable | CORRECT | It's a complete, unique email address usable for automated detection. |
| 71 | 888-282-0870 → Actionable | CORRECT | It's a full, unambiguous phone number that can be matched directly. |
| 72 | CyWatch@ic.fbi.gov → Actionable | CORRECT | It's a complete email address that is actionable as is. |
| 73 | 855-292-3937 → Actionable | CORRECT | It's a complete phone number that can be directly used for detection. |

| 74 | WanaCrypt0r → Mentioned | CORRECT | Malware family names like "WanaCrypt0r" are generic identifiers that are not unique enough to act as actionable detection strings. |
| 75 | MS17-010 → Described | CORRECT | As a vulnerability bulletin identifier, it requires additional context/enrichment for direct detection, fitting the Described category. |
| 76 | WannaCry → Mentioned | CORRECT | "WannaCry" is a well-known ransomware worm name and is conceptual rather than a unique, actionable indicator. |
| 77 | WannaDecryptOr → Mentioned | CORRECT | The alternate variant name is generic and not unique enough for actionable detection, making Mentioned the correct rank. |
| 78 | KB4012598 → Described | CORRECT | This Microsoft patch identifier needs further enrichment or context to be actionable, so the Described rank is appropriate. |

| 79 | first Yara Rule → Mentioned | CORRECT | The observable only references a YARA rule without providing its content, making it non‑actionable. |
| 80 | second Yara Rule → Mentioned | CORRECT | It is merely a reference to a YARA rule with no accompanying rule content, hence not actionable. |
| 81 | Microsoft link to patches for Windows XP, Windows 8, and Windows Server 2003 → Mentioned | CORRECT | The actual URL is not provided, so it remains only a conceptual reference rather than an actionable indicator. |

md file name: /content/validation/skywiper.md

| 1 | `sKyWlper` → `Described` | CORRECT | It is a malware family name that requires additional context for actionable detection. |
| 2 | `Flame` → `Described` | CORRECT | As an alias of the malware family, it lacks the unique, concrete characteristics needed for automated detection. |
| 3 | `Flamer` → `Described` | CORRECT | Like the other aliases, it is a generic name that isn’t directly actionable without further enrichment. |

| 4 | "~KWI" → Actionable | INCORRECT — should be "Described" because the indicator is an ambiguous filename fragment that isn’t uniquely complete for direct automated matching. | Filename fragments require contextual enrichment to reliably serve as detection rules. |

| 5 | sKyWlper → Mentioned | CORRECT | The malware family name is conceptually mentioned and not directly actionable via telemetry. |
| 6 | msgsecmgr.ocx → Actionable | CORRECT | The file name is unique and can be matched directly in detection systems. |
| 7 | wavesup3.drv → Actionable | CORRECT | Despite being an alias, it is a complete file name that can be directly detected. |

| 8 | WAVESUP3.DRV → Actionable | CORRECT | The file name is a precise, complete artifact that can be directly used for detection. |

| 9 | "1,153,536 bytes" → "Mentioned" | CORRECT | The file size is a generic numeric detail not unique enough for automated detection. |
| 10 | "991,232 bytes" → "Mentioned" | CORRECT | The file size is a generic numeric detail not unique enough for automated detection. |
| 11 | "975,872 bytes" → "Mentioned" | CORRECT | The file size is a generic numeric detail not unique enough for automated detection. |

| 12 | "Unidentified build, Aug 31 2011 23:15:32    31...............................................................................................................................\n23:15:32" → "Described" | CORRECT | The build info string is descriptive and not unique enough for direct automated detection. |
| 13 | "mssecmgr.ocx" → "Actionable" | INCORRECT — should be "Described" because a bare file name is ambiguous and may lead to high false‑positive rates. | File names alone (without full path/context) are generally not unique indicators. |
| 14 | "2010-01-05 15:30:36" → "Mentioned" | CORRECT | A timestamp is generic information and not actionable for detection. |
| 15 | "28d0d7710761114a44a1a3a425a6883c661f06e7" → "Actionable" | CORRECT | A complete SHA‑1 hash is a unique, exact indicator suitable for automated matching. |
| 16 | "3.6.22" → "Mentioned" | CORRECT | A software version number provides context but is too generic for direct detection. |
| 17 | "1.2.3" → "Mentioned" | CORRECT | Version numbers are informational and do not serve as precise detection indicators. |
| 18 | "5409\n      Tue Oct 11 23:35:34 2011\n5409\n      Tue Oct 11 23:35:37 2011\n5409\n      Tue Oct 11 23:35:37 2011\n5409\n      Tue Oct 11 23:35:37 2011\nec02\n      Tue Oct 11 23:59:59 2011\n      Tue Oct 11 23:59:59 2011\nec02\n      Tue Oct 11 23:59:59 2011\nec02\nec02\n      Tue Oct 11 23:59:59 2011\nec02\n      Wed Oct 12 00:00:03 2011\nec02 \n      Wed Oct 12 10:52:33 2011\n      Wed Oct 12 10:52:33 2011\nec02 \n      Wed Oct 12 10:53:04 2011\nec02\nec02 \n     Wed Oct 12 11:09:32 2011\n     Wed Oct 12 11:09:32 2011\nec02 \n     Wed Oct 12 11:21:17 2011\nec02\nec02  Wed Oct 12 11:21:17 2011\n     Wed Oct 12 11:21:17 2011\nec02\n     Wed Oct 12 11:21:17 2011\nero\nec02 \n     Wed Oct 12 11:22:04 2011\nec02\n      Wed Oct 12 11:22:04 2011" → "Described" | CORRECT | This timestamp data dump is a composite, descriptive artifact that isn’t directly actionable as a single detector. |

| 19 | sKyWlper → Mentioned | CORRECT | Malware family names are conceptual references rather than precise, unique indicators. |
| 20 | sKyWiper → Mentioned | CORRECT | The observable is a variant of a malware family name and used only as a reference. |
| 21 | sKyWIper → Mentioned | CORRECT | It is another variation of a malware family name, referenced conceptually. |
| 22 | Duqu → Mentioned | CORRECT | The malware family name is mentioned as a conceptual reference, not as an actionable indicator. |
| 23 | Stuxnet → Mentioned | CORRECT | As with other malware family names, it is used conceptually rather than for direct detection. |
| 24 | fitmgr → Actionable | CORRECT | It is an exact process name that can be directly employed in detection rules. |
| 25 | Realtek → Mentioned | CORRECT | As a digital signature vendor name, it is used conceptually and does not offer unique detection value. |
| 26 | JMicron → Mentioned | CORRECT | The vendor name is referenced for context and is not a unique, actionable indicator. |
| 27 | C-media → Mentioned | CORRECT | It is mentioned as a digital signature vendor, serving as a conceptual reference only. |
| 28 | 0xAE → Mentioned | CORRECT | The short magic key value is too generic for direct detection and remains a conceptual reference. |
| 29 | LZO → Mentioned | CORRECT | The compression library name is a generic reference, not a unique, actionable artifact. |
| 30 | Zlib → Mentioned | CORRECT | It is a generic compression library reference and thus not uniquely actionable. |
| 31 | PPMd → Mentioned | CORRECT | The observable is a reference to a compression library, making it non‑actionable. |
| 32 | bzip2 → Mentioned | CORRECT | As with other compression libraries, it is a generic reference rather than a unique indicator. |
| 33 | SSL → Mentioned | CORRECT | Protocol names like SSL are generic and serve as conceptual references rather than detection indicators. |
| 34 | SSH → Mentioned | CORRECT | As a generic protocol reference, SSH is mentioned conceptually, not as an actionable artifact. |

| 35 | `sKyWlper` → `Mentioned` | CORRECT | The observable is simply a malware family name with no accompanying technical artifacts that would allow concrete detection.  |

| 36 | mssecmgr.ocx → Actionable | CORRECT | This file name is a complete, unique identifier that can be directly matched. |
| 37 | resource 146 → Described | CORRECT | The term “resource 146” is an ambiguous embedded resource identifier that requires additional context for detection. |
| 38 | advnetcfg.ocx → Actionable | CORRECT | As a complete file name, it is a precise identifier suitable for automated matching. |
| 39 | msglu32.ocx → Actionable | CORRECT | The observable is a full, unique file name that can be matched directly in logs. |
| 40 | nteps32.ocx → Actionable | CORRECT | This file name is exact and actionable as it uniquely identifies a module. |
| 41 | soapr32.ocx → Actionable | CORRECT | Being a complete, specific file name, it qualifies as actionable for detection. |
| 42 | mssegmgr.ocx → Actionable | CORRECT | Despite the slight spelling discrepancy, it is a complete file name used for automated detection. |
| 43 | wavesup3.drv → Actionable | CORRECT | As a distinct driver file name, it is a direct, actionable indicator suitable for detection. |

| 44 | `To691.tmp` → `Described` | CORRECT | The file name, while exact, is ambiguous on its own and lacks unique context (such as a full path or hash), making it better suited as a described observable. |

| 45 | `ccalc32.sys` → `Actionable` | CORRECT | It is a complete, exact file name that can be directly matched for detection. |
| 46 | `mssecmgr.sys` → `Actionable` | CORRECT | It is a specific file name that functions as a unique indicator, making it actionable. |
| 47 | `boot32drv.sys` → `Actionable` | CORRECT | It is an exact file name that can be used to drive detection directly. |

| 48 | "~DEB93D.tmp" → "Actionable" | CORRECT | It is an exact, unique file name indicator that can be matched directly. |
| 49 | "services.exe" → "Described" | CORRECT | It’s a common system process name, making it too generic for automated detection. |
| 50 | "~HLV084.tmp" → "Actionable" | CORRECT | It is a precise, unique temporary file name clearly tied to malicious activity. |
| 51 | "winlogon.exe" → "Described" | CORRECT | It’s a well‑known Windows system process name and not unique enough for direct detection. |
| 52 | "~HLV294.tmp" → "Actionable" | CORRECT | It is a specific file name marker indicative of malware presence. |
| 53 | "~KWI<>" → "Actionable" | CORRECT | Despite its unusual characters, it’s a complete and unique string usable for detection. |
| 54 | "°rf<number>.tmp" → "Actionable" | INCORRECT — should be "Described" because it contains a variable placeholder ("<number>") making it a pattern rather than an exact, matchable string. | The presence of a placeholder means it requires additional context or translation before it can drive automated detection. |
| 55 | "dstrlog.dat" → "Actionable" | CORRECT | It is an exact file name indicator that can be directly matched in detection systems. |
| 56 | "Imcache.dat" → "Actionable" | CORRECT | It is a complete file name that uniquely identifies an artifact associated with the threat. |
| 57 | "mscrypt.dat" → "Actionable" | CORRECT | It is a unique and exact file name indicator, making it actionable for detection. |
| 58 | "ntcache.dat" → "Actionable" | CORRECT | It is a complete and distinct file name that can be used for automated detection. |
| 59 | "rccache.dat" → "Actionable" | CORRECT | It is an exact file name artifact suitable for direct matching in detection tools. |
| 60 | "ssitable" → "Actionable" | CORRECT | It appears as a specific file name indicator likely unique to the threat, enabling an exact match. |

| 61 | audcache → Actionable | CORRECT | The file name is a complete, exact string from the logs that can be matched directly in detection rules. |
| 62 | audfilter.dat → Actionable | CORRECT | The file name is specific and complete, making it suitable for direct detection without additional enrichment. |
| 63 | dstrlog.dat → Actionable | CORRECT | As a full file name extracted from endpoint data, it can be matched exactly for low false‐positive detections. |
| 64 | lmcache.dat → Actionable | CORRECT | The observable is a precise file name from a suspicious context, enabling actionable detection. |
| 65 | ntcache.dat → Actionable | CORRECT | This complete file name is unique enough to be used directly in automated detection rules. |
| 66 | wpgfilter.dat → Actionable | CORRECT | Being a full file name obtained from logs, it qualifies as an actionable indicator that can be matched exactly. |

| 67 | bb5441af1e1741fca600e9c433cb1550 → Actionable | CORRECT | MD5 hash is a complete, unique indicator that can be matched directly. |
| 68 | d53b39fb50841ff163f6e9cfd8b52c2e → Actionable | CORRECT | MD5 hash is complete and uniquely identifiable. |
| 69 | bdc9e04388bda8527b398a8c34667e18 → Actionable | CORRECT | The full MD5 hash is a complete identifier, making it actionable. |
| 70 | c9e00c9d94d1a790d5923b050b0bd741 → Actionable | CORRECT | This MD5 hash is a complete indicator suitable for direct matching. |
| 71 | 296e04abb00ea5f18ba021c34e486746 → Actionable | CORRECT | The hash is entirely specified and thus directly actionable. |
| 72 | 5ad73d2e4e33bb84155ee4b35fbefc2b → Actionable | CORRECT | As a full MD5 hash, it is a complete and actionable indicator. |
| 73 | dcf8dab7e0fc7a3eaf6368e05b3505c5 → Actionable | CORRECT | The complete hash string makes this indicator actionable. |
| 74 | 06a84ad28bbc9365eb9e08c697555154 → Actionable | CORRECT | A fully-formed MD5 hash that can be used directly in detection. |
| 75 | ec992e35e794947a17804451f2a8857e → Actionable | CORRECT | This MD5 hash is complete and unique, thus actionable. |
| 76 | b604c68cd46f8839979da49bb2818c36 → Actionable | CORRECT | A complete MD5 hash that serves as a precise indicator. |
| 77 | c81d037b723adc43e3ee17b1eee9d6cc → Actionable | CORRECT | Fully specified MD5 hash, making it directly actionable. |
| 78 | 60d5dbddae21ecb4cfb601a2586dae776ca973ef → Actionable | CORRECT | Despite its longer length, it is a complete cryptographic hash suitable for detection. |
| 79 | 3a9ac7cd49e10a922abce365f88a6f894f7f1e9e → Actionable | CORRECT | The full hash value is unique and actionable. |
| 80 | a592d49ff32fe130591ecfde006ffa4fb34140d5 → Actionable | CORRECT | A complete hash indicator that can be directly matched. |
| 81 | 7105b17d07fd5b30d5386862a3b9cc1fff53a2398 → Actionable | CORRECT | The complete hash (despite resembling SHA‑1 length) is actionable as provided. |
| 82 | 5fdd7f613db43a5b0dbec8583d30ea7064983106 → Actionable | CORRECT | A fully formed hash that can be used as a unique detection indicator. |
| 83 | faaef4933e5f738e2abaff3089d36801dd871e89 → Actionable | CORRECT | This complete hash string qualifies as a direct, actionable indicator. |
| 84 | 8b591dd7cd44d8abae7024ca2cc26034457dd50e → Actionable | CORRECT | A full cryptographic hash that is sufficiently unique for automated use. |
| 85 | 25fc20eedd7bfca26cf5fad1fade13b05c9a2d20 → Actionable | CORRECT | The complete hash is a unique value that can be directly keyed on. |
| 86 | e608a6d9f0ab379e62119656e30eef12542f2263 → Actionable | CORRECT | A fully specified hash, making it an actionable indicator. |
| 87 | 7a1351c084a556bdceaf221a43cb69579ca7b9bb → Actionable | CORRECT | Complete hash value that is directly usable for detection. |
| 88 | d4b21620d68fdc44caa20362a417b251ff833761 → Actionable | CORRECT | The full hash string is a complete identifier, thus actionable. |
| 89 | advnetcfg.ocx → Described | CORRECT | Filenames are inherently ambiguous and require additional context for detection. |
| 90 | msglu32.ocx → Described | CORRECT | A filename without unique indicators fits the "Described" classification. |
| 91 | mssecmgr.ocx → Described | CORRECT | The filename is ambiguous and not unique enough for direct actionability. |
| 92 | nteps32.ocx → Described | CORRECT | As an isolated filename, it is best classified as described rather than actionable. |
| 93 | soapr32.ocx → Described | CORRECT | The filename is generic and suited to the "Described" rank. |
| 94 | ccalc32.sys → Described | CORRECT | File names are not unique and thus are appropriately labeled as described. |
| 95 | mscrypt.dat → Described | CORRECT | The filename lacks the uniqueness needed for actionable detection. |
| 96 | 00004069.ex → Described | CORRECT | Such filenames are ambiguous and require further context, fitting "Described". |
| 97 | 00004784.dl → Described | CORRECT | An ambiguous file name that does not allow for direct automated matching. |
| 98 | 00005729.d1 → Described | CORRECT | The filename is too generic to be actionable on its own. |
| 99 | 00006411.dl → Described | CORRECT | As a non-unique filename, it is correctly classified as described. |
| 100 | boot32drv.sys → Described | CORRECT | File names lack the specificity required for direct alerting and are thus described. |
| 101 | mssecmqr.ocx → Described | CORRECT | As a variant filename, it remains ambiguous and appropriately described. |
| 102 | 00005729.dl → Described | CORRECT | The filename’s ambiguity makes "Described" the fitting rank. |
| 103 | Figure 3 – MD5 hashes of the malware's components … → Actionable | INCORRECT — should be "Described" because the composite table requires parsing to extract individual actionable indicators. | The block text is a capture of a table rather than a singular, unique indicator, making it unsuitable for direct automated detection. |

| 104 | msgsecmgr.ocx → Actionable | CORRECT | The file name is a precise, uncommon indicator that can be directly used for detection. |
| 105 | mssecmgr.ocx → Actionable | CORRECT | This is a complete and unique file name from the malware chain, making it actionable. |
| 106 | rundl132.exe → Actionable | CORRECT | The executable’s name is exact and unusual, suitable for direct detection. |
| 107 | DDEnumCallback → Actionable | CORRECT | As a full callback function name, it is specific enough to act as a searchable indicator. |
| 108 | advnetcfg.ocx → Actionable | CORRECT | This unique OCX file name can be matched directly in detection rules. |
| 109 | nteps32.ocx → Actionable | CORRECT | The file name is a complete and uncommon indicator, appropriate for actionable detection. |
| 110 | winlogon.exe → Described | CORRECT | Being a common Windows system file, it’s referenced conceptually rather than as a unique artifact. |
| 111 | services.exe → Described | CORRECT | As a standard Windows service manager, this file is too ubiquitous for actionable detection. |
| 112 | explorer.exe → Described | CORRECT | The executable is a common system file and serves as a contextual reference rather than a unique indicator. |
| 113 | iexplore → Described | CORRECT | The indicator is generic and lacks the specificity needed for an actionable detection rule. |
| 114 | wpgfilter.dat → Actionable | CORRECT | The file name is distinct and directly linked to the malware’s behavior, making it actionable. |
| 115 | ccalc32.sys → Actionable | CORRECT | This driver file’s unique name qualifies it as an actionable artifact for detection purposes. |
| 116 | wavsup3.drv → Actionable | CORRECT | Its unusual and complete file name makes it a specific indicator suitable for detection. |
| 117 | boot32drv.sys → Actionable | CORRECT | The file name is unique and complete, fitting the criteria for an actionable artifact. |

| 118 | ccalc32.sys → Actionable | CORRECT | The file name is complete and uniquely identifiable, enabling low false‑positive detection. |
| 119 | ccalc → Described | CORRECT | The observable is an ambiguous, partial file name that requires additional context for detection. |
| 120 | mscrypt → Described | CORRECT | The tool name is mentioned without a complete unique identifier, making automated detection non‑trivial. |
| 121 | ccalc32 → Described | CORRECT | The shorthand reference lacks the full specificity (e.g., file extension) needed for direct matching. |
| 122 | mssecmgr → Described | CORRECT | The component name is generic and does not provide a unique, actionable signature for detection. |
| 123 | advnet → Described | CORRECT | The observable is an ambiguous reference to a component, requiring further enrichment for precise detection. |
| 124 | rundll → Described | CORRECT | The term refers generically to a Windows DLL execution mechanism and lacks the specificity for low false‑positive detection. |

| 125 | Nteps → Actionable | CORRECT | "Nteps" is a complete file name that can be exactly matched in detection rules. |
| 126 | soapr → Actionable | CORRECT | "soapr" is a specific file name that serves as a clear indicator and is actionable. |
| 127 | to691 → Actionable | CORRECT | "to691" appears as a complete file identifier, making it directly actionable. |
| 128 | rundll → Described | CORRECT | "rundll" is a generic process term and may lead to false positives without additional context. |
| 129 | iexplore → Described | CORRECT | "iexplore" is a common Windows process, so its detection requires more context, hence described. |
| 130 | ccalc32.sys → Actionable | CORRECT | "ccalc32.sys" is a full, unique file name that can be reliably used for detection. |
| 131 | ~HLV → Actionable | INCORRECT — should be "Described" because it represents a naming pattern rather than a complete, unique file name. | The string "~HLV" is ambiguous as it denotes a file naming pattern, not a precise indicator. |

| 132 | Rundll32 → Described | CORRECT | "Rundll32" is a common Windows process name and on its own isn’t unique enough for automated signature matching. |
| 133 | windowsupdate → Described | CORRECT | The string is generic and refers to normal Windows Update traffic, needing extra context before acting on it. |
| 134 | iexplore → Described | CORRECT | As a standard, widely installed process, "iexplore" is too common to be a direct low‑false‑positive indicator. |
| 135 | ccalc → Actionable | CORRECT | "ccalc" is an unusual process name that is complete and distinct enough to be directly matched by a detection rule. |
| 136 | ~HVL files found in windows/temp → Described | CORRECT | The observable is a descriptive pattern about file naming in a directory rather than a unique, exact artifact. |
| 137 | msglu32.ocx → Actionable | CORRECT | Although it’s just a file name, its atypical nature (combined with anomalous attributes) makes it a precise indicator for detection. |

| 138 | nteps → Actionable | CORRECT | "nteps" is a complete, unique malware process name that can be directly used for detection. |
| 139 | soapr → Actionable | CORRECT | "soapr" is an unambiguous malware process identifier suitable for exact matching. |
| 140 | to691 → Actionable | CORRECT | "to691" is a complete and unique process name that can be leveraged in detection rules. |
| 141 | msglu → Actionable | CORRECT | "msglu" is a distinct malware process name that can be used as an exact indicator. |
| 142 | msglu32 → Actionable | CORRECT | "msglu32" is a full, specific process name ideal for direct detection. |
| 143 | *HLV files → Actionable | INCORRECT — should be "Described" because the asterisk indicates a wildcard pattern rather than a precise identifier. | The use of "*" makes it an ambiguous file pattern that requires additional context before it can drive automated detection. |
| 144 | iexplore → Mentioned | CORRECT | "iexplore" is a common system process, making it too generic for automated detection. |
| 145 | windowsupdate → Mentioned | CORRECT | "windowsupdate" is a standard system process name and is only conceptually referenced. |
| 146 | ccalc32 → Actionable | CORRECT | "ccalc32" is a unique malware process name that can be used as an exact match indicator. |
| 147 | ~HLV files → Actionable | INCORRECT — should be "Described" because the tilde suggests a file pattern rather than an exact file name. | The "~" denotes a pattern, rendering it ambiguous and not sufficiently concrete for direct automated detection. |

| 148 | advnetcfg32 → Actionable | CORRECT | The binary name is unique and can be directly matched in Procmon logs. |
| 149 | winlogon.exe → Described | CORRECT | Being a common Windows process, it is too generic for direct automated detection. |
| 150 | services.exe → Described | CORRECT | Its ubiquity as a standard system process makes it appropriately descriptive. |
| 151 | explorer.exe → Described | CORRECT | As a generic Windows process, it is correctly classified as non‑actionable. |
| 152 | ZwCreateSection() → Mentioned | CORRECT | This common API function is only conceptually referenced and unsuitable for direct matching. |
| 153 | ZwMapViewOfSection() → Mentioned | CORRECT | Its status as a standard API in code injection contexts justifies a “Mentioned” rank. |
| 154 | LoadLibrary() → Mentioned | CORRECT | The generic API call does not provide a unique, concrete indicator for detection. |
| 155 | LoadLibraryEx() → Mentioned | CORRECT | Its common usage makes it only a conceptual reference rather than an actionable string. |
| 156 | VirtualAllocEx() → Mentioned | CORRECT | As a widely used API for memory allocation in injection scenarios, it is appropriately mentioned. |
| 157 | WriteProcessMemory() → Mentioned | CORRECT | Its ubiquitous presence in Windows API use renders it non‑unique and thus only mentioned. |
| 158 | shell32.dll → Described | CORRECT | As a standard Windows DLL encountered broadly, it is best kept at the descriptive level. |
| 159 | VadS → Mentioned | CORRECT | The VAD tag is a contextual marker and not a unique, actionable indicator. |
| 160 | ccalc32.sys → Actionable | CORRECT | The uncommon driver name is specific enough to be used directly in detection. |
| 161 | | 0<br>fltmgr.sys … (injection table output) → Actionable | INCORRECT — should be "Described" because the multi‑line Procmon table is a context‐rich log artifact that varies between events and isn’t a stable, unique indicator for automated matching. | The table’s detailed formatting and multiple entries make it unsuitable as a direct detection signature. |
| 162 | | Process: winlogon.exe Pid: 676 … (memory dump output) → Actionable | INCORRECT — should be "Described" because the lengthy memory dump excerpt is a volatile, context‑dependent block rather than a concrete, matchable identifier. | Its dynamic hex and address values render it non‑actionable for direct automated detection. |
| 163 | | Address … (vmmap output table) → Actionable | INCORRECT — should be "Described" because the vmmap table output is a contextual log artifact with variable formatting, which is not directly suitable for automated detection. | The detailed, multi‐line depiction is illustrative and not a precise, static signature for rule‑based matching. |

| 164 | `GMER rootkit revealer` → `Described` | CORRECT | The tool name is descriptive and not a unique string for automated detection. |
| 165 | `explorer.exe` → `Described` | CORRECT | As a common Windows executable name, it is too ambiguous for precise matching. |
| 166 | `SHGetSpecialFolderPathW()` → `Mentioned` | CORRECT | The API function call is referenced conceptually rather than serving as a unique identifier. |
| 167 | `shell32.dll` → `Described` | CORRECT | This common system DLL is ambiguous and thus appropriately classified as "Described." |
| 168 | `GMER 1.0.15.15641` → `Actionable` | CORRECT | The full version string is unique and can be directly matched in detection rules. |
| 169 | `ZwClose [0xF60028C6]` → `Actionable` | CORRECT | The complete API hook indicator with offset is specific and directly matchable. |
| 170 | `ZwCreateKey [0xF60026BC]` → `Actionable` | CORRECT | Its full hook string with a unique offset makes it suitable for automated detection. |
| 171 | `ZwDeleteKey [0xF6002564]` → `Actionable` | CORRECT | The string is complete and unique, enabling straightforward matching. |
| 172 | `ZwDeleteValueKey [0xF60025AA` → `Actionable` | CORRECT | Even with a potential truncation, the observed string is specific enough for detection. |
| 173 | `ZwEnumerateKey [0xF60024AA]` → `Actionable` | CORRECT | The indicator is complete and unique, fitting the actionable criteria. |
| 174 | `ZwEnumerateValueKey [0xF6002406]` → `Actionable` | CORRECT | It presents a full, unambiguous hook string that can be directly used in detection. |
| 175 | `ZwFlushKey [0xF60024FE]` → `Actionable` | CORRECT | The complete and unique hook indicator makes it actionable. |
| 176 | `ZwLoadKey [0xF6002A2A]` → `Actionable` | CORRECT | This full API hook string is specific and readily matchable. |
| 177 | `ZwOpenKey [0xF6002888]` → `Actionable` | CORRECT | The artifact is precise and can be directly keyed on by detection systems. |
| 178 | `ZwQueryKey [0xF60020F6]` → `Actionable` | CORRECT | Its unique API hook indicator is complete and actionable. |
| 179 | `ZwQueryValueKey [0xF600221E]` → `Actionable` | CORRECT | The full and specific hook string qualifies as a detection indicator. |
| 180 | `ZwSetValueKey [0xF6002342]` → `Actionable` | CORRECT | The observable is a complete, unique string fit for automated matching. |
| 181 | `ZwUnloadKey [0xF6002B7A]` → `Actionable` | CORRECT | This full API hook string is unambiguous and suitable for direct detection. |
| 182 | `{??\C:\WINDOWS\system32\Drivers\PROCMON20.SYS` → `Actionable` | CORRECT | Despite its unconventional prefix, the complete file path is directly matchable. |
| 183 | `\??\C:\WINDOWS\system32\Drivers\PROCMON20.SYS` → `Actionable` | CORRECT | The file path is complete and can be used directly in detection rules. |
| 184 | `\??\C:\WINDOWS\\system32\Drivers\PROCMON20.SYS` → `Actionable` | CORRECT | Extra backslashes do not impede its status as a complete, actionable file path. |
| 185 | `??\C:\WINDOWS\system32\Drivers\PROCMON20.SYS` → `Actionable` | CORRECT | Even with a missing initial backslash, the string remains specific and matchable. |
| 186 | `C:\WINDOWS\system32\Drivers\PROCMON20.SYS` → `Actionable` | CORRECT | This complete file path is unambiguous and fully actionable. |
| 187 | `C:\WINDOWS\system32\Drivers\PROCEXP113.SYS` → `Actionable` | CORRECT | The full file path is unique enough for automated detection. |
| 188 | `C:\WINDOWS\system32\Drivers\RKREVEAL150.SYS` → `Actionable` | CORRECT | The complete and specific file path qualifies as an actionable observable. |
| 189 | `C:\WINDOW'S \Explorer.EXE\1616\SHELL32.dll/SHGelSpecialFolderPathW + E0 7CSEF858 7 Byles JMP 0185041C` → `Actionable` | CORRECT | The composite string, combining a file path with hooking details, is unique and directly matchable. |
| 190 | `{FileSystem\Fastfat \Fat` → `Described` | CORRECT | The incomplete filesystem component string is ambiguous and thus appropriately classified as "Described." |
| 191 | `fitmar.sys [Microsoft Filesystem Filter | V System` → `Actionable` | CORRECT | Despite formatting quirks, the string is specific enough to serve as a direct detection indicator. |
| 192 | `C:\Python27\tcl\tk8.5\demos\anilabel.tcl` → `Actionable` | CORRECT | The complete file path is unambiguous and qualifies as an actionable observable. |

| 193 | TH POOL SHD PQOISNG #PID#SYNCMTX → Described | CORRECT | The string includes a variable placeholder (#PID#), making it ambiguous for direct automated matching. |
| 194 | c_program_files_common_files_microsoft shared_msaudio_wpgfilter.dat → Actionable | CORRECT | It is a complete, constant string that can be directly used for detection. |
| 195 | c program files common files microsoft shared msaudio audcache → Actionable | CORRECT | The artifact is a full, unique string suitable for direct matching. |
| 196 | winlogon.exe → Mentioned | CORRECT | As a common system process name, it lacks the uniqueness required for actionable detection. |
| 197 | services.exe → Mentioned | CORRECT | Being a generic system process, it is appropriately classified as mentioned rather than actionable. |
| 198 | explorer.exe → Mentioned | CORRECT | Its generic nature as a standard process makes it unsuitable for direct detection, hence mentioned is correct. |
| 199 | _KMUTANT → Mentioned | CORRECT | This generic kernel structure name is not unique enough for automated detection and is thus correctly mentioned. |
| 200 | (Disassembly Table) → Described | CORRECT | The formatted table is a contextual artifact that requires additional processing, making “Described” the appropriate rank. |

| 201 | `nteps32` → `Actionable` | Validator output CORRECT | The module’s full name is unique and can be directly matched as an identifier. |
| 202 | `SHR` → `Described` | Validator output CORRECT | As an abbreviated exported function name, it is ambiguous without additional context. |
| 203 | `ABH` → `Described` | Validator output CORRECT | Its short, abbreviated nature makes it non‐unique and thus not directly actionable. |
| 204 | `BHD` → `Described` | Validator output CORRECT | The abbreviated function name lacks sufficient uniqueness for automated detection. |
| 205 | `DLV` → `Described` | Validator output CORRECT | Being a short, abbreviated exported function, it is ambiguous without further context. |
| 206 | `SMLData` → `Described` | Validator output CORRECT | The function name, while more descriptive, remains ambiguous for standalone detection. |
| 207 | `VBinfo` → `Described` | Validator output CORRECT | As an abbreviated exported function, it does not serve as a unique, actionable string. |
| 208 | `OFR` → `Described` | Validator output CORRECT | Its brevity makes it ambiguous, requiring additional context before it can trigger a detection rule. |
| 209 | `PF` → `Described` | Validator output CORRECT | The two‐character name is too generic to be used as an actionable indicator on its own. |
| 210 | `PGHDict` → `Described` | Validator output CORRECT | Despite being part of the exported functions, it is still ambiguous and not unique enough. |
| 211 | `CreatePGHDict` → `Described` | Validator output CORRECT | Although more descriptive, as a function name it remains ambiguous without broader context. |
| 212 | `EnableSHR` → `Described` | Validator output CORRECT | It is an exported function name that, on its own, does not provide a unique actionable indicator. |
| 213 | `~DEB93D` → `Described` | Validator output CORRECT | The file identifier is incomplete/ambiguous and would require additional context for direct detection. |

| 214 | MS10-061 → Actionable | CORRECT | Exploit IDs are unique and can be matched directly for detection. |
| 215 | MS10-046 → Actionable | CORRECT | The complete exploit identifier can be used with low false‑positives in detection rules. |
| 216 | sKyWlper → Actionable | INCORRECT — should be "Described" because malware family names are conceptual labels that require additional context rather than serving as unique, directly matchable indicators. | Malware family names are ambiguous and not inherently unique for direct automated detection. |
| 217 | outpost.exe → Actionable | CORRECT | Process names like this can be exactly matched in endpoint detection systems. |
| 218 | aupdrun.exe → Actionable | CORRECT | The full process name is specific and suitable for direct matching in detection. |
| 219 | op mon.exe → Actionable | CORRECT | Despite the space, it is a complete process name that can be directly matched. |
| 220 | avp.exe → Actionable | CORRECT | The executable name is precise and can be reliably used in detection rules. |
| 221 | %SYSTEMROOT%\system32\rundl132.exe → Actionable | CORRECT | The file path is complete (with an environment variable) and uniquely matchable. |
| 222 | msdclr64.ocx → Actionable | CORRECT | As a specific file name, it is a fully actionable observable. |
| 223 | wbem\mof\good\svchostevt.mof → Actionable | CORRECT | The complete file path is specific enough for direct detection. |
| 224 | testpage → Described | CORRECT | The generic file name lacks uniqueness and is too ambiguous for automated matching. |
| 225 | am=55XXXXXXXXX55X&ef=962DXXXTEC84XXXXEC84&pr=1&ec=0&ov=66664XXXXX64174&pl=qs pndXXXXXXX | spnZXXX | nyXXX | 0nXXX | TWvXXXX | nGcXXX... → Described | CORRECT | The obfuscated URL query parameters are incomplete and require additional context before being actionable. |
| 226 | mssecmgr.sys → Actionable | CORRECT | The file name is a complete indicator suitable for direct detection. |
| 227 | : 0000000000: 20 E1 D7 50 0A 00 00 00 | C8 OF 00 00 á×P◙ Č☆ → Actionable | CORRECT | The hex dump is a complete artifact that can be used for unique pattern matching in detection. |
| 228 | $windir\softwaredistribution\selfupdate\default\wuauinfo.ocx → Actionable | CORRECT | The specific file path is fully matchable and serves as an actionable indicator. |
| 229 | 10.55.55.55 → Actionable | CORRECT | IP addresses are inherently unique and directly actionable in detection systems. |
| 230 | ?1<number removed> → Described | CORRECT | The obfuscated URL fragment is ambiguous and does not provide a concrete, matchable indicator. |
| 231 | Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; .NET CLR 1.1.2150) → Actionable | CORRECT | The complete user agent string is distinct and can be used as an actionable search indicator. |

| 232 | `| 0  | 234   | 34     | 183 | ୧୵    | 196  | …` → `Actionable` | CORRECT | The full substitution table is a complete, unique artifact that can be directly matched. |
| 233 | `4091.dll:
unsigned int   cdecl encryptor sub 4025C0(int a1)
【
return (a1 + 11) * (a1 + 17) ^ … }` → `Actionable` | CORRECT | It’s a complete disassembly code snippet that can be used for automated matching. |
| 234 | `12Windows Management Instrumentation Configurator` → `Actionable` | CORRECT | The service name is a complete, unique identifier, making it directly actionable. |
| 235 | `soapr32.dll:
keygensub_1000C0A2<eax>(int a1<eax>)
{
return (a1 + 11) * (a1 + 17) ^ … }` → `Actionable` | CORRECT | The disassembled function code is a full exact snippet that can trigger a detection rule. |
| 236 | `Figure 16 - Encryption E2B - found in soapr32.dll` → `Actionable` | INCORRECT — should be "Described" because it is a descriptive figure caption rather than a concrete, matchable indicator. | Figure captions provide context but are not unique artifacts for direct detection. |
| 237 | `unsigned int cipher(unsigned int a1)
イ
return (a1 + 5) * (a1 + 26) ^ …` → `Actionable` | CORRECT | The complete code snippet is a precise artifact that can be directly keyed on by a detection rule. |
| 238 | `6411/sub 10003463
v2 = result;
if ( a2 )
(
  v3 = 11 - result:
  do
  (
    result = dword 100420B8 + (v3 + v2) * (v3 + v2 + 12);
    *(_BYTE *)v2 == result ^ …` → `Actionable` | CORRECT | This disassembly snippet is full and unique, making it directly usable for detection. |
| 239 | `int __usercall sub_1000D9DC<eax>(int result<eax>, int a2<edx>)
{
  … 
}` → `Actionable` | CORRECT | The complete encryption algorithm code snippet is exact and matchable. |
| 240 | `4748.dll` → `Actionable` | CORRECT | The DLL filename is a complete identifier that can be directly used in detection rules. |
| 241 | `| 0000000: 4909 caa4 11f3 63f7 2a30 58d8 43eb 3d83 …` → `Actionable` | CORRECT | The full hex dump of the XOR key is a unique, complete artifact suitable for automated matching. |
| 242 | `Boot32drv.sys` → `Actionable` | CORRECT | The system file name is a complete, unique identifier, making it directly actionable. |
| 243 | `to691.tmp` → `Actionable` | CORRECT | The temporary file name is specific and can be precisely matched in detection. |
| 244 | `audcache.dat` → `Actionable` | CORRECT | The data file name is complete and unique, hence directly actionable. |
| 245 | `for i=0..15:
 take all characters from file at n*16+i
 generate statistics on characters
 key[i]=find most common character
 for i=0..filesize:
   decrypted[i]=encrypted[i] XOR key[i%16]` → `Actionable` | INCORRECT — should be "Described" because pseudocode outlining an algorithm is not a precise, matchable indicator. | Pseudocode provides an implementation outline that requires further enrichment before it can drive detection. |
| 246 | `| 0   | O    | 34    | 78   | ల్ 8  | …` → `Actionable` | CORRECT | The detailed substitution table is complete and unique, making it directly matchable. |
| 247 | `| 000000000: FF F5 FF FF FE FE 23   FC FF FF FE 6F …` → `Actionable` | CORRECT | The hex dump sample is a complete artifact, suitable for precise automated detection. |
| 248 | `Figure 24 - Sample for encryption/encoding made with encryption E1; 0xEA → 0x00` → `Actionable` | INCORRECT — should be "Described" because the figure caption is descriptive text rather than a concrete indicator. | As a caption, it explains a transformation but isn’t itself a unique artifact for matching. |
| 249 | `advnetcfg` → `Actionable` | CORRECT | The module name is a complete, unique identifier that can be directly monitored. |
| 250 | `nteps32` → `Actionable` | CORRECT | The executable/module name is exact and can be directly used in detection rules. |
| 251 | `~DEB93D` → `Actionable` | CORRECT | The encryption key identifier is a unique, complete string that qualifies as an actionable indicator. |

| 252 | HKEY LOCAL MACHINE\SYSTEM\CurrentControlSet\Control\Lsa\Autenthication Packages → Actionable | CORRECT | The full registry key string is unique and can be directly matched. |
| 253 | mssecmgr.ocx → Actionable | INCORRECT — should be "Described" because a standalone file name (without a full path) is ambiguous and can lead to false positives. | File names by themselves aren’t unique enough for precise automated detection. |
| 254 | NT\CurrentVersion\Drivers32\wave9 → Actionable | CORRECT | This specific registry key string is sufficiently unique for direct matching. |
| 255 | NT\CurrentVersion\Drivers32\wave8 → Actionable | CORRECT | It is a distinct registry key used in the malicious activity context, making it actionable. |
| 256 | rundl132.exe → Actionable | CORRECT | The unusual process name is specific and distinctive enough for automated detection. |
| 257 | wmiprvse.exe → Mentioned | CORRECT | As a common Windows process, it isn’t unique enough to serve as an actionable indicator. |
| 258 | rundll32.exe → Mentioned | CORRECT | Being a ubiquitous system binary, its mention is generic and not actionable by itself. |
| 259 | alg.exe → Mentioned | CORRECT | This common process name is generic and could trigger many false positives if used for detection. |
| 260 | services.exe → Mentioned | CORRECT | A standard system service process that is too common to serve as a unique indicator. |
| 261 | iexplore.exe → Mentioned | CORRECT | As a well‐known browser process, it is generic and only conceptually referenced. |
| 262 | c:\progra~1\common~1\micros~1\msaudio\wavesup3.drv → Actionable | CORRECT | The full (short-path) file path uniquely identifies the artifact, making it directly actionable. |
| 263 | | 23:34:34,1794024                      | rundl132.exe 2388  … (log capture table) → Described | CORRECT | The table capture log is descriptive context rather than a precise, standalone indicator. |
| 264 | 23:34:29,5181519 … (multi‐line log snippet) → Described | CORRECT | The detailed log snippet is descriptive and does not provide a unique artifact for detection. |
| 265 | | 23:36:43,0717217 … (table capture) → Described | CORRECT | The table log output is descriptive, showing event context instead of a uniquely actionable string. |
| 266 | HKLM\SOFTWARE\Microsoft\Windows → Mentioned | CORRECT | This generic registry hive is frequently queried and is too broad to be an actionable indicator. |

| 267 | ntcache.dat → Described | CORRECT | It is a common file name that by itself is ambiguous and requires further context for unique detection. |
| 268 | STORAGE.SFS.FILES.ntcache?dat.REINITIALIZE ME → Actionable | CORRECT | It is a complete, unique storage key string that can be directly matched in detection rules. |
| 269 | STORAGE.SFS.FILES.ntcache?dat.DELETE ME → Actionable | CORRECT | It is a complete storage key identifier, making it sufficiently unique for automated detection. |
| 270 | STORAGE.SFS.FILES.lmcache?dat.MAX SIZE → Actionable | CORRECT | It is a full and distinctive storage key string that can drive direct detection. |
| 271 | STORAGE.SFS.FILES.lmcache?dat.BACKUPsKyWIper → Actionable | CORRECT | It is a complete and unique storage key that is directly actionable for automated matching. |
| 272 | Winlogon.exe → Described | CORRECT | It is a common system executable name that, without additional context, is too generic for direct detection. |
| 273 | ccalc32.sys → Described | CORRECT | It is a typical driver file name that is not unique enough by itself to serve as an actionable indicator. |
| 274 | | 000000000000: | 02  | 30 30  | ... (hex dump block) → Actionable | CORRECT | It is a complete hex dump block from ntcache.dat that can be matched precisely in detection rules. |
| 275 | | 0000000EF0: 00 00 00 00 00 00 00 00 ... (hex dump block) → Actionable | CORRECT | It is a full and unique binary dump representing part of ntcache.dat, suitable for direct matching. |
| 276 | |  |  |  | 000000000: 78 DA 73 EO 67 60 EO 65 ... (hex dump block) → Actionable | CORRECT | It is a complete binary dump block of the compressed record data, making it actionable for detection. |
| 277 | ~HLV473.tmp → Described | CORRECT | It is a generic temporary file name that requires additional context to be considered unique for detection. |
| 278 | 78 DA ED → Mentioned | CORRECT | It is a short hex sequence that is generic and only conceptually referenced, not specific enough for direct detection. |
| 279 | 78 DA 73 → Mentioned | CORRECT | It is a brief hex pattern that serves only as a conceptual reference and isn’t unique enough for automated matching. |

| 280 | (hex dump block) → Actionable | CORRECT | The full hex dump is a complete, unique artifact that can be matched directly. |
| 281 | "78 DA 73" → Actionable | CORRECT | The magic number is a complete, exact signature that can drive low–false-positive detection. |
| 282 | "~HLV473.tmp" → Actionable | CORRECT | The file name is provided in full and is unique enough for exact matching in detection rules. |
| 283 | "Far.exe" → Actionable | CORRECT | The executable file name is a complete identifier that can be directly used for automated detection. |
| 284 | "ntcache.dat" → Actionable | CORRECT | The file name is a complete, exact string that allows for precise detection. |
| 285 | "8F AF AC 84" → Actionable | CORRECT | The PPMd magic number is a complete and unique identifier suitable for direct matching. |
| 286 | (hex dump block) → Actionable | CORRECT | The hex dump table is a full, unique record that can be matched exactly by detection systems. |
| 287 | (disassembled code snippet) → Actionable | CORRECT | The complete disassembled code snippet provides a unique fingerprint that is directly actionable. |
| 288 | "The ~DEB93D files contain Samba / nmb lookups in a proprietary table format" → Described | CORRECT | The text is a descriptive snippet rather than a single concrete string that can be auto‐matched. |
| 289 | (hex dump table) → Actionable | CORRECT | The hex dump table is a uniquely detailed artifact usable for precise signature matching. |
| 290 | "~DEB93D" → Actionable | CORRECT | Despite being a file prefix, the provided string is sufficiently specific to be used in detection rules. |
| 291 | "nteps32" → Mentioned | INCORRECT — should be "Actionable" because it is an exact module/export function name that can be directly matched with low false‐positives. | Decision Rule 2—complete identifiers are actionable. |
| 292 | "EnableSHR" → Mentioned | CORRECT | The configuration option is a generic concept and does not offer a unique, concrete signature for detection. |
| 293 | "7-zip" → Mentioned | CORRECT | As a common software/tool name, it is used more conceptually than as a precise detection string. |
| 294 | "winzip" → Mentioned | CORRECT | The tool name is generic and intended for contextual reference rather than direct detection. |
| 295 | "perl Compress:PPMd" → Mentioned | CORRECT | The Perl module reference is a generic software/library indicator that isn’t sufficiently unique for automated matching. |

| 296 | "HLV file format" → Mentioned | CORRECT | The observable is a generic reference to a file format without providing a unique, actionable identifier. |
| 297 | "KWI file format" → Mentioned | CORRECT | Similar to the previous item, it conceptually refers to a file format without an actionable indicator. |
| 298 | "ntcache.dat" → Actionable | CORRECT | This is a complete and exact file name that can be directly used in detection rules. |
| 299 | "HighSeverityStorageFileName - KWI989.tmp\nLowSeverityStorageFileName - KWI988.tmp" → Actionable | CORRECT | The observable includes complete file names (KWI989.tmp and KWI988.tmp) that are precise and actionable indicators. |
| 300 | "ccalc32drv.sys" → Actionable | CORRECT | It is a complete file name, making it directly searchable and actionable in endpoint logs. |
| 301 | "%CommonProgramFiles%\Microsoft Shared\MSAudio\
%CommonProgramFiles%\Microsoft Shared\MSSecurityMgr\
%CommonProgramFiles%Microsoft Shared\MSAPackages\" → Actionable | CORRECT | The observable is a complete file path (with environment variables) that can be exactly matched by detection systems. |

| 302 | `~rf<number>` → `Described` | CORRECT | The pattern includes a placeholder (“<number>”) making it generic and insufficient for direct matching. |
| 303 | `/windows/temp` → `Actionable` | CORRECT | This is a complete, specific directory path that can be directly used for detection. |
| 304 | `E1 encryption algorithm` → `Mentioned` | CORRECT | It only names an encryption method concept rather than providing a concrete, unique indicator. |
| 305 | `SQLite3 database` → `Mentioned` | CORRECT | The term generically describes a file format and does not offer a specific, actionable attribute. |
| 306 | `| Name     |                      | Object | Type                | Schema ...` → `Actionable` | CORRECT | The complete SQLite database schema is a detailed code snippet that can be directly matched in detection rules. |
| 307 | `|     | MediumId | FileName | Size   | LastModification Parsed ...` → `Actionable` | CORRECT | The full file system listing is a complete artifact with exact details that can be used for automated detection. |

| 308 | "SQLite databases" → "Mentioned" | CORRECT | The term is a generic reference to a file type without a unique identifier, making it unsuitable for direct automated detection. |
| 309 | "SQLite browser" → "Mentioned" | INCORRECT — should be "Described" because it names a tool in a partial and ambiguous way that requires additional context before detection. | As a tool name without file or process specifics, it isn’t a complete unique indicator and thus belongs in the "Described" category. |
| 310 | "\x00" → "Mentioned" | CORRECT | A single null byte is too generic to serve as an actionable indicator and is appropriately classified as conceptually mentioned. |

| 311 | `observable_value` → Actionable | CORRECT | The observable is provided in a complete code fence snippet that includes full registry keys and a WMI query string, making it directly actionable. |

| 312 | `GATOR.CMD.SUCCESS VALIDITY` → Actionable | CORRECT | This configuration key is complete and unique, making it directly matchable for detections. |
| 313 | `GATOR.LEAK.MIN BYTES TO LEAK` → Actionable | CORRECT | The full key string is provided and can be exactly matched in detection systems. |
| 314 | `GATOR.LEAK.SUICIDE LOG LEAK SIZE` → Actionable | CORRECT | A complete configuration key that is specific enough for automated detection. |
| 315 | `GATOR.LEAK.BANDWITH CALCULATOR.LEAK SECS` → Actionable | CORRECT | The observable is an exact and unique configuration key that detection rules can key on. |
| 316 | `GATOR.INTERNET CHECK.MIN TIME BETWEEN CHECKS` → Actionable | CORRECT | This key is fully specified, making it actionable for direct matching in logs. |
| 317 | `GATOR.INTERNET CHECK.CURRENT FAILURES COUNT` → Actionable | CORRECT | The complete configuration key is provided, allowing for precise automated detection. |
| 318 | `GATOR.INTERNET CHECK.SERVERS.size` → Actionable | CORRECT | A complete, unique key string that can be used directly in detection rules. |
| 319 | `GATOR.INTERNET CHECK.SERVERS.1.prev` → Actionable | CORRECT | The observable is fully specified and thus matchable as-is for detection purposes. |
| 320 | `GATOR.INTERNET CHECK.SERVERS.1.next` → Actionable | CORRECT | This complete key string can be directly leveraged by automated detection systems. |
| 321 | `GATOR.INTERNET CHECK.SERVERS.1.data` → Actionable | CORRECT | The configuration key is provided in full, making it actionable without further enrichment. |
| 322 | `GATOR.INTERNET CHECK.SERVERS.1.data.TIMEOUT` → Actionable | CORRECT | A complete, exact key that detection rules can use for low false‑positive matching. |
| 323 | `GATOR.INTERNET CHECK.SERVERS.1.data.URL` → Actionable | CORRECT | The observable is fully detailed, including its URL segment, and is directly matchable. |
| 324 | `GATOR.INTERNET CHECK.SERVERS.1.data.VALIDITY` → Actionable | CORRECT | This complete configuration key is specific enough for direct automated matching. |
| 325 | `GATOR.SERVERS.size` → Actionable | CORRECT | The key is fully provided and sufficiently unique to serve as an actionable indicator. |
| 326 | `GATOR.SERVERS.first` → Actionable | CORRECT | A complete and exact configuration key that can be reliably used in detections. |
| 327 | `GATOR . SERVERS . last` → Actionable | CORRECT | Despite preserved spacing, the key is complete and uniquely identifiable for match purposes. |
| 328 | `GATOR.SERVERS.free` → Actionable | CORRECT | This configuration key is fully specified and therefore actionable by detection systems. |
| 329 | `GATOR.SERVERS.1.prev` → Actionable | CORRECT | The observable is a specific, complete configuration key that can be directly matched. |
| 330 | `GATOR.SERVERS.1.next` → Actionable | CORRECT | A fully defined configuration key that is precise enough for automated detection. |
| 331 | `GATOR.SERVERS.1.data.USESSL` → Actionable | CORRECT | The complete key string is unique and directly matchable in detection use cases. |
| 332 | `GATOR. SERVERS. 1. data. PORT` → Actionable | CORRECT | Even with preserved spacing, the key is fully provided and actionable as-is. |
| 333 | `GATOR` → Actionable | INCORRECT — should be "Described" because the standalone identifier is too generic to reliably drive automated detection. | As a single, common term, "GATOR" lacks the specificity needed for low false‑positive matching. |
| 334 | `to691.tmp` → Actionable | CORRECT | The file name is explicitly provided, making it directly matchable in endpoint log scenarios. |
| 335 | "``` 
C:\Program Files\Common Files\Microsoft Shared\MSAuthCtrl\secindex.dat
...
```" → Actionable | CORRECT | The code-fenced block supplies the full configuration data capture, which is directly actionable. |
| 336 | `SINGLE_CMD_RUNNER` → Actionable | CORRECT | The distinct process name is fully provided and suitable for direct automated detection. |

| 337 | dstrlog.dat → Actionable | CORRECT | The specific file name is a unique malware artifact that can be directly matched. |
| 338 | libclandb.lua → Actionable | CORRECT | The complete script file name is unique and directly actionable for detection. |
| 339 | if userVer == 1 or userVer == 2 then 1_26_0:exec("…") → Actionable | CORRECT | The full SQL script snippet is a complete, unique code artifact suitable for direct detection. |
| 340 | Boost → Mentioned | CORRECT | “Boost” is a generic module name with insufficient unique context for automated detection. |
| 341 | Flame → Mentioned | CORRECT | As a common malware module/attack type name, “Flame” is conceptually referenced and not sufficiently unique. |
| 342 | Ef_trace.txt → Actionable | CORRECT | The file name is specific and can be directly used as an indicator in detection rules. |
| 343 | %temp%\dat3C.tmp → Actionable | CORRECT | Despite using an environment variable, the complete file path is unique enough for actionable detection. |
| 344 | %systemroot%\temp\msdclr64.ocx → Actionable | CORRECT | The full file path is specific to the malware artifact, making it directly actionable. |
| 345 | Flask → Mentioned | CORRECT | “Flask” is a generic module name that lacks the specificity required for automated detection. |
| 346 | Jimmy → Mentioned | CORRECT | As a standalone module name, “Jimmy” is ambiguous and appropriately classified as mentioned. |
| 347 | c:\Projects\Jimmy\jimmydll\_v2.0\JimmyForClan\Jimmy\bin\srelease\jimmydl\\inds vc32.pdb → Actionable | CORRECT | The full file path is detailed and unique, allowing it to be directly matched in detections. |
| 348 | Movefile → Mentioned | CORRECT | “Movefile” is a generic module reference lacking unique attributes necessary for actionable detection. |
| 349 | Munch → Mentioned | CORRECT | The term “Munch” is a generic malware module name and is therefore appropriately marked as mentioned. |
| 350 | mscrypt.dat → Actionable | CORRECT | The file name is a specific artifact of the malware attack and can be directly utilized for detection. |
| 351 | MUNCH.GENERIC BUFFERS.4.data.PATTERN … → Actionable | CORRECT | The detailed multi-line string patterns are specific and can be directly keyed on for detection. |
| 352 | ntcache.dat → Described | CORRECT | Although it is a file name, its potential ambiguity and risk of false positives justify a described rank. |
| 353 | Imcache.dat → Described | CORRECT | The file name is ambiguous enough that additional context is needed before it can be reliably used for detection. |
| 354 | Snack → Mentioned | CORRECT | “Snack” is a generic malware module reference without unique detection attributes. |
| 355 | Spotter → Mentioned | CORRECT | The module name “Spotter” lacks sufficient unique identifiers and remains conceptual. |
| 356 | Transport → Mentioned | CORRECT | As a descriptor of a propagation method, “Transport” is conceptual and not directly actionable. |
| 357 | obj.REMOTE PATH TEMPLATES = {temp = string.format("…") → Actionable | CORRECT | The configuration script snippet is complete and specific, making it suitable for direct detection. |
| 358 | Euphoria → Mentioned | CORRECT | “Euphoria” is a generic module name that does not provide enough specificity for actionable alerts. |
| 359 | EuphoriaApp → Mentioned | CORRECT | The application name lacks unique detection patterns, rendering it appropriately classified as mentioned. |
| 360 | mediald → Mentioned | CORRECT | “mediald” is a generic module reference without sufficient unique attributes for detection. |
| 361 | wpgfilter.dat → Actionable | CORRECT | The specific file name, supported by contextual details, makes it a clear, actionable indicator. |
| 362 | CONFIG_TABLE → Described | CORRECT | Being a generic configuration directive, “CONFIG_TABLE” is ambiguous and may lead to false positives. |
| 363 | Headache → Mentioned | CORRECT | The generic module name “Headache” does not offer actionable uniqueness and is correctly mentioned. |
| 364 | Gator → Mentioned | CORRECT | “Gator” is a generic malware module reference, making it only conceptually useful. |
| 365 | Goat → Mentioned | CORRECT | As a generic module name, “Goat” is insufficiently unique for automated detection and remains mentioned. |
| 366 | Frog → Mentioned | CORRECT | The module name “Frog” is generic and lacks detailed uniqueness, justifying a mentioned classification. |
| 367 | Beetlejuice → Mentioned | CORRECT | Although specific in context, “Beetlejuice” remains a generic module name and is appropriately mentioned. |
| 368 | Microbe → Mentioned | CORRECT | “Microbe” is a generic reference to a malware module, making it non-actionable on its own. |
| 369 | Infectmedia → Mentioned | CORRECT | The term is conceptual and lacks the specific, unique details needed for actionable detection. |
| 370 | autorun.inf → Described | CORRECT | The common file name “autorun.inf” may trigger numerous false positives, so it is rightly described. |
| 371 | Limbo → Mentioned | CORRECT | “Limbo” as a malware module name is generic and does not provide a unique detection signature. |
| 372 | Boot dll loader → Mentioned | CORRECT | The term is a descriptive configuration item rather than a unique artifact, so it is properly mentioned. |
| 373 | Weasel → Mentioned | CORRECT | The generic module name “Weasel” lacks distinctive attributes for direct detection. |
| 374 | Telemetry → Mentioned | CORRECT | As a logging module reference, “Telemetry” is conceptually described and not a unique indicator. |
| 375 | Security → Mentioned | CORRECT | The term “Security” is generic and does not constitute a unique, actionable indicator. |
| 376 | Bunny → Mentioned | CORRECT | “Bunny” is a generic malware module name without the specificity needed for an actionable alert. |
| 377 | Dbquery → Mentioned | CORRECT | The module name “Dbquery” is generic with no unique identifiers, making it suitable only as a mentioned reference. |
| 378 | Driller → Mentioned | CORRECT | The generic nature of “Driller” means it lacks actionable uniqueness, correctly classifying it as mentioned. |
| 379 | Gadget → Mentioned | CORRECT | “Gadget” is a generic module name without distinctive detection characteristics, justifying a mentioned rank. |

| 380 | "Lua scripts" → "Mentioned" | Validator output CORRECT | Rationale: The observable is a generic conceptual reference without unique, actionable details.  |

| 381 | CRUISE CRED.lua → Actionable | CORRECT — file name with an uncommon extension that can be exactly matched for detection. | Rule 2 applied to a unique file artifact. |
| 382 | administrator → Mentioned | CORRECT — a generic built‑in account that isn’t unique enough to detect malicious behavior on its own. | Generic term not providing unique context. |
| 383 | Administrators → Mentioned | CORRECT — a common Windows group name that is conceptually referenced and not a unique indicator. | Generic reference to a group. |
| 384 | Domain Admins → Mentioned | CORRECT — a well‐known domain group name that is too generic for automated detection. | Conceptually mentioned without unique context. |
| 385 | cruiseAttackLog → Described | CORRECT — a database table name that is complete but context‐dependent, requiring additional contextual checks. | Database table names are less universally actionable. |
| 386 | CLAN → Described | CORRECT — a short and ambiguous database name that would need extra context to serve as a reliable indicator. | Lacks uniqueness and may trigger false positives. |
| 387 | sd → Described | CORRECT — a very short, ambiguous user account name that isn’t unique enough for direct automated detection. | Too generic to be directly actionable. |
| 388 | creds → Described | CORRECT — a generic and ambiguous database table name that requires further enrichment before detection. | Lacks sufficient uniqueness for automated matching. |
| 389 | cruise attack log → Described | CORRECT — a descriptive database table name that is context‐dependent and not uniquely decisive for automated rules. | Contextual and less specific for direct detection. |

| 390 | `basic_info_app.lua` → `Actionable` | CORRECT | The file name is a complete, specific identifier that can be directly matched for detection. |
| 391 | `FLAME VERSION` → `Described` | CORRECT | As a malware parameter name, it lacks a unique value and requires contextual enrichment before detection. |
| 392 | `computer name` → `Mentioned` | CORRECT | This generic reference to a system attribute isn’t specific enough to drive an automated detection. |
| 393 | `ip address` → `Mentioned` | CORRECT | The term is used as a generic placeholder rather than a complete, actionable indicator. |
| 394 | `AVERAGE LEAK BANDWIDTH` → `Described` | CORRECT | Being a parameter name describing a leaked metric, it isn’t sufficiently unique for direct detection. |
| 395 | `LAST LEAK TO INTERNET` → `Described` | CORRECT | This observable describes a parameter (timestamp or status) that requires further context for actionable use. |
| 396 | `MEDIA LEAKS FROM THIS COMPUTER` → `Described` | CORRECT | Like other parameter fields, it provides descriptive information without a unique, directly actionable value. |

| 397 | clan_seclog.lua → Actionable | CORRECT | The file name is specific and, given its context as a Lua script for security logs, can be directly and uniquely matched in detection. |
| 398 | json.lua → Actionable | INCORRECT — should be "Described" because the file name is generic and common, making it ambiguous for automated detection. |  
| 399 | casafety.lua → Actionable | CORRECT | The file name is distinctive and directly tied to a specific malicious action, making it a unique indicator. |
| 400 | 540 → Described | CORRECT | As a Windows Event ID, it is generic and requires additional contextual enrichment for actionable detection. |
| 401 | 672 → Described | CORRECT | This Windows Security Event ID is non‑unique on its own and serves primarily as contextual information. |
| 402 | 673 → Described | CORRECT | Being just an event ID, it is insufficient to drive automated detection without further context. |
| 403 | 680 → Described | CORRECT | Event IDs like this are generic and require supplementary context to be reliably actionable. |
| 404 | %temp%\~txqvsl.tmp → Actionable | CORRECT | The file path, including the unique temporary file name, is specific to the referenced attack and is matchable directly. |
| 405 | %temp%\~mso2a2.tmp → Actionable | CORRECT | This unique temporary file indicator is clearly linked to malicious activity, making it directly actionable. |
| 406 | %temp%\~dra53.tmp → Actionable | CORRECT | The unique file path pattern provides a precise indicator that can be directly leveraged in detection rules. |
| 407 | 4784.dll → Actionable | CORRECT | The DLL name is specific and, within the provided context, is distinctive enough for low false‑positive detection. |
| 408 | ~dra52.tmp → Actionable | CORRECT | The temporary file name is unique and directly associated with the malicious DLL, making it an actionable indicator. |
| 409 | ~a29.tmp → Actionable | CORRECT | This uniquely patterned temporary file name is clearly linked to the observed malicious activity and is directly matchable. |

| 410 | `ATTACKOP JIMMY.lua` → `Actionable` | CORRECT | It is a complete, unique filename that can be exactly matched for detection. |
| 411 | `~dra52.tmp` → `Actionable` | CORRECT | It is an exact temporary file name, making it directly actionable. |
| 412 | `~dra53.tmp` → `Actionable` | CORRECT | The temporary file name is complete and unique enough for detection. |
| 413 | `LUA.CLAN.JIMMY MOF` → `Actionable` | CORRECT | It is a specific configuration identifier that can be used as a detection string. |
| 414 | `svchost1ex.mof` → `Actionable` | CORRECT | The file name is complete and unique, suitable for direct matching in detection rules. |
| 415 | `00004784.dll` → `Actionable` | CORRECT | It is a precise DLL file name that can easily be keying on for detection purposes. |
| 416 | `jimmy.dll` → `Actionable` | CORRECT | The alias DLL name provided is complete and actionable for detection workflows. |
| 417 | `00005729.dll` → `Actionable` | CORRECT | The filename is unique and specific, making it actionable for detection. |
| 418 | `00006411.dll` → `Actionable` | CORRECT | It is a complete file indicator that can be directly matched in logs and rules. |
| 419 | `00004069.exe` → `Actionable` | CORRECT | The executable's filename is fully specified, making it directly actionable. |

| 420 | "#### Figure 45 - Internal executables/DLLs found in mssecmgr (main module)
ATTACKOP FLAME.luac ... transport nu base.luac" → Actionable | INCORRECT — should be "Described" because the value is a composite figure capture with multiple file names and extra context rather than a singular, directly matchable indicator. | The observable provides a full captured listing that requires further extraction to yield exact file names for detection. |
| 421 | "Figure 46 \u00000E List of LUA scripts found in sKyWIper" → Described | CORRECT | The caption-style text merely references a list without providing discrete, actionable indicators.

| 422 | "0004784.dll" → Actionable | CORRECT | The file name is a complete and unique identifier that can be directly matched in detection rules. |
| 423 | "Jimmy.dll" → Actionable | CORRECT | This DLL file name is explicitly provided and specific enough for automated detection. |
| 424 | "c:\Projects\Jimmy\jimmydll v2.0\JimmyForClan\Jimmy\bin\srelease\jimmydll\indsvc32.pdb" → Actionable | CORRECT | The full file path is a complete, unique artifact that can be directly used for detection. |
| 425 | "jimmy.dll" → Actionable | CORRECT | The malware DLL’s name is precise and fully specified, making it actionable. |
| 426 | "QDInit" → Described | INCORRECT — should be "Actionable" because it is a complete and specific function name that can be matched directly. | As a DLL exported function name, "QDInit" is a full identifier suitable for low–false positive detection. |
| 427 | "~a29.tmp" → Actionable | CORRECT | The temporary file name provided is specific and complete, allowing for exact matching. |
| 428 | "~dra52.tmp" → Actionable | CORRECT | This unique temporary file name is a complete artifact that can be directly used in detections. |
| 429 | "rundll32" → Mentioned | CORRECT | Being a standard Windows utility, it is only conceptually referenced and not unique to malicious activity. |
| 430 | "rundl132" → Actionable | CORRECT | The obfuscated variant of rundll32 is a specific string that can be directly used for detection. |
| 431 | "~dra53.tmp" → Actionable | CORRECT | The temporary file artifact is distinct and complete, making it actionable for detection purposes. |
| 432 | "ATTACKOP JIMMY.lua:\n                           ctx.exec:exec({cmdLine =\nctx.transport:expandLocal(string.format(\"cmd /c cd \\\"%%temp%8\\\" &&(if exist \\\"%s\\\"\nstart /wait rundl132 \\\"%s\\\",%s)&move /y \\\"%% systemroot%%\\\\temp\\\\~dra52.tmp\\\"\n\\\"~dra53.tmp\\\" &del /q \\\"%s\\\"\", remoteDLLBasename, remoteDLLBasename,\ndllExportedFunction, remoteDLLBasename)), mofInfo = {confPath =\n\"LUA.CLAN.JIMMY_MOF\", fn = \"svchost1ex.mof\"}})" → Actionable | CORRECT | The complete Lua code snippet is a full, unique artifact that can be directly utilized in automated detection. |
| 433 | "LUA.CLAN.JIMMY_MOF" → Actionable | CORRECT | This configuration identifier is specific and complete, making it actionable for detection. |
| 434 | "svchost1ex.mof" → Actionable | CORRECT | The MOF file name is a complete and unique indicator that can be directly matched by detection systems. |

| 435 | `00004069.exe` → `Actionable` | CORRECT | The file name is complete and specific enough for direct matching. |
| 436 | `Windows Management Instrumentation Configurator` → `Described` | CORRECT | The alias is descriptive and lacks the uniqueness required for automated detection. |
| 437 | `%windir%\system32\rdcvlt32.exe` → `Actionable` | CORRECT | The full file path, even with an environment variable, is a complete identifier that can be reliably matched. |
| 438 | `%temp%\sl84.tmp` → `Actionable` | CORRECT | This file path is specific enough to be actionable in detection rules. |
| 439 | `WinInit.INI` → `Actionable` | INCORRECT — should be "Described" because a standalone file name without a path may lead to false positives due to its generic nature. | The file name lacks contextual specificity, making it less suitable for direct automated detection. |

| 440 | mssecmgr.dll → Actionable | CORRECT | The file name is a complete, exact string that can be directly matched in detection rules. |
| 441 | SQLite → Mentioned | CORRECT | “SQLite” is a generic reference to a common database engine and isn’t unique enough for automated detection. |
| 442 | DB2 ODBC → Mentioned | CORRECT | “DB2 ODBC” generically denotes a database connector and lacks the specificity required for actionable indicators. |
| 443 | Oracle → Mentioned | CORRECT | “Oracle” is merely a vendor name and does not represent a unique artifact for direct detection. |
| 444 | CLAN → Described | CORRECT | “CLAN” is ambiguous and requires additional enrichment, so it is appropriately classified as described. |
| 445 | "| Name                  | Object | Type                |\n|-----------------------|--------|---------------------|\n| emandes               | table  |                     |\n| entity_id             | field  | INTEGER PRIMARY KEY |\n| \"\"name                | field  | TEXT                |\n| ip                    | field  | TEXT                |\n| \"\" os ver             | field  | TEXT                |\n| smb_type              | field  | INTEGER             |\n| first update          | field  | INTEGER             |\n| \"last_update          | field  | INTEGER             |\n| \"last ip update       | field  | INTEGER             |\n| \"tool id              | field  | INTEGER             |\n| first_update_dt       | field  | DATETIME INTEGER    |\n| last_update_dt        | field  | DATETIME INTEGER    |\n| \"\"\" last_ip_update_dt | field  | DATETIME INTEGER    |\n| ·sglite_sequence      | table  |                     |\n| \"name                 | field  |                     |\n| Das                   | field  |                     |\n| attack params         | table  |                     |\n| attack queue id       | field  | INTEGER PRIMARY KEY |\n| \"name                 | field  | TEXT PRIMARY KEY    |\n| \"\" value              | field  | NUMERIC             |\n| ·metadata             | table  |                     |\n| entity id             | field  | INTEGER PRIMARY KEY |\n| name                  | field  | TEXT PRIMARY KEY    |\n| ···· value            | field  | TEXT PRIMARY KEY    |\n| count                 | field  | INTEGER             |\n| first_update          | field  | INTEGER             |\n| \"\" last update        | field  | INTEGER             |\n| first update dt       | field  | DATETIME INTEGER    |\n| \"\" last_update_dt     | field  | DATETIME INTEGER    |\n| + attack log          | table  |                     | → Described | CORRECT | The complete multi‐line table schema is provided for context and isn’t a unique, directly searchable indicator. |
| 446 | "| Name                     | Object | Type                | A |  |\n|--------------------------|--------|---------------------|---|--|\n| attack log               | table  |                     |   |  |\n| line id                  | field  | INTEGER PRIMARY KEY |   |  |\n| \" date                   | field  | INTEGER             |   |  |\n| attack queue id          | field  | INTEGER             |   |  |\n| entity id                | field  | INTEGER             |   |  |\n| entity_addr              | field  | TEXT                |   |  |\n| \"cred id                 | field  | INTEGER             |   |  |\n| \"op_type                 | field  | TEXT                |   |  |\n| success                  | field  | BOOLEAN INTEGER     |   |  |\n| extra results            | field  | TEXT                |   |  |\n| \"retries left            | field  | INTEGER             |   |  |\n| \"home id                 | field  | INTEGER             |   |  |\n| date dt                  | field  | DATETIME INTEGER    |   |  |\n| attack_providers_log     | table  |                     |   |  |\n| line id                  | field  | INTEGER PRIMARY KEY |   |  |\n| \"provider_type           | field  | TEXT PRIMARY KEY    |   |  |\n| \"provider_name           | field  | TEXT                |   |  |\n| \"\"provider_result        | field  | BOOLEAN INTEGER     |   |  |\n| \"\"provider_extra_results | field  | TEXT                |   |  |\n| attack_queue             | table  |                     |   |  |\n| attack queue id          | field  | INTEGER PRIMARY KEY |   |  |\n| priority                 | field  | INTEGER             |   |  |\n| entity id                | field  | INTEGER             |   |  |\n| cred id                  | field  | INTEGER             |   |  |\n| op type                  | field  | TEXT                |   |  |\n| retries left             | field  | INTEGER             |   |  |\n| \"last try date           | field  | INTEGER             |   |  |\n| \"successful attacks left | field  | INTEGER             |   |  |\n| min attack interval      | field  | INTEGER             |   |  |\n| \"home id                 | field  | INTEGER             |   |  |\n| \"\"last_try_date_dt       | field  | INTEGER             |   |  |\n| ignore_max               | field  | BOOLEAN INTEGER     |   |  |" → Described | CORRECT | This database schema block is a multi‐line excerpt provided for context and isn’t a unique string for detection. |
| 447 | "| Name                                           | Object | Type                | A |  |\n|------------------------------------------------|--------|---------------------|---|--|\n| =-creds                                        | table  |                     |   |  |\n| imcred id                                      | field  | INTEGER PRIMARY KEY |   |  |\n| domain name                                    | field  | TEXT                |   |  |\n| username                                       | field  | TEXT                |   |  |\n| password                                       | field  | TEXT                |   |  |\n| \"user rid                                      | field  | INTEGER             |   |  |\n| : dcname                                       | field  | TEXT                |   |  |\n| cred type                                      | field  | INTEGER             |   |  |\n| ·settings                                      | table  |                     |   |  |\n| i key                                          | field  | TEXT PRIMARY KEY    |   |  |\n| ···· value                                     | field  | INTEGER             |   |  |\n| cruise_attack_log                              | table  |                     |   |  |\n| pi bol id                                      | field  | INTEGER             |   |  |\n| \"\"user sid                                     | field  | TEXT                |   |  |\n| \"user name                                     | field  | TEXT                |   |  |\n| options_per_entity                             | table  |                     |   |  |\n| entity id                                      | field  | INTEGER             |   |  |\n| attack type                                    | field  | TEXT                |   |  |\n| cred id                                        | field  | INTEGER             |   |  |\n| \"retries left                                  | field  | INTEGER             |   |  |\n| entities idx name                              | index  |                     |   |  |\n| entities idx ip                                | index  |                     |   |  |\n| sglite autoindex metadata 1                    | index  |                     |   |  |\n| attack_log_idx_entity                          | index  |                     |   |  |\n| \"sglite_autoindex_attack_providers_log_1 index |        |                     |   |  |\n| \"sqlite autoindex settings_1                   | index  |                     |   |  |\n| \"sglite_autoindex_attack_params_1              | index  |                     |   |  |" → Described | CORRECT | The extensive schema block is descriptive and intended for contextual analysis rather than direct, automated matching. |

| 448 | `#### Figure 50 –dstrlog structure, part 3` → `Mentioned` | CORRECT | The observable is a figure title from a report and does not provide a directly actionable technical indicator. |

| 449 | ccalc32drv.sys → Actionable | CORRECT | The filename is a complete, unique artifact that can be directly matched in detection systems. |
| 450 | DangerousProcesses → Actionable | INCORRECT — should be "Described" because the table name is generic and ambiguous, requiring additional context for effective detection. | The observable lacks the inherent uniqueness of a complete identifier, making it unsuitable for direct automated detection. |

| 451 | ".ocx" → "Described" | Validator output CORRECT | The file extension is generic and ambiguous, so "Described" is appropriate. |
| 452 | ".tmp" → "Described" | Validator output CORRECT | Being a common temporary file extension, it lacks uniqueness and fits the "Described" category. |
| 453 | "mcshield.exe" → "Actionable" | Validator output CORRECT | The full executable name is precise and unique, making it directly actionable. |
| 454 | "```
Transport.getPreferredDLLExtension = function(l 10 0)
            local remoteProcs = 1 10 0.ctx.remoteSafety:procList()
            local gotMcShield = false
            for pid,exe in pairs(remoteProcs) do
              if string.lower(exe) == "mcshield.exe" then
                gotMcShield = true
            else
              end
            end
            if gotMcShield then
              log.writeEx(-1453109576, 189173052,
log.colons(tostring(l 10 0.ctx.tgt), "tmp"))
              return "tmp"
            else
              return "ocx"
            end
               end
```" → "Actionable" | Validator output CORRECT | The complete code snippet is wrapped in triple-backticks and can be used to create concrete detection rules. |

| 455 | `preg.exe` → `Actionable` | CORRECT | The file name is a complete, unique string that can be directly matched in detection rules. |
| 456 | `ntcache.dat` → `Actionable` | CORRECT | It is an exact file name from EDR logs that can be used for precise detection. |
| 457 | `lmcache.dat` → `Actionable` | CORRECT | The complete file name is sufficiently unique and actionable. |
| 458 | `rccache.dat` → `Actionable` | CORRECT | As a full file name string, it qualifies for direct automated matching. |
| 459 | `dcomm.dat` → `Actionable` | CORRECT | The provided string is a complete file name and can be used in detection rules. |
| 460 | `dmmsapi.dat` → `Actionable` | CORRECT | This complete file identifier is unique enough to be actionable. |
| 461 | `~dra52.tmp` → `Actionable` | CORRECT | The exact temporary file name is a specific indicator suitable for detection. |
| 462 | `commgr32` → `Actionable` | CORRECT | The observable is a complete file identifier from the logs, making it actionable. |
| 463 | `target.lnk` → `Described` | CORRECT | Its noted ambiguity (“Filename may be ambiguous”) justifies a lower, descriptive ranking. |
| 464 | `ccalc32.sys` → `Actionable` | CORRECT | The file name is complete and distinct, allowing for low false‐positive detection. |
| 465 | `authentication packages` → `Described` | CORRECT | Being a phrase rather than a uniquely identifying file name, it requires additional context. |
| 466 | `zff042` → `Actionable` | CORRECT | The exact string is sufficiently specific to serve as an actionable indicator. |
| 467 | `urpd.ocx` → `Actionable` | CORRECT | This complete file name can be directly keyed in detection rules. |
| 468 | `Pcldrvx.ocx` → `Actionable` | CORRECT | As a specific file identifier, it qualifies for automated detection. |
| 469 | `~KWI` → `Actionable` | CORRECT | Even without an extension, the exact text uniquely identifies the file for detection. |
| 470 | `guninst32` → `Actionable` | CORRECT | The full string is unique enough to be used as an actionable indicator. |
| 471 | `~HLV` → `Actionable` | CORRECT | It is a complete and distinct file identifier from the endpoint logs. |
| 472 | `~DEB93D.tmp` → `Actionable` | CORRECT | The temporary file name is exact and specific, making it directly actionable. |
| 473 | `lib.ocx` → `Described` | CORRECT | Its generic nature (as noted “Generic library file name”) warrants a less precise, descriptive ranking. |
| 474 | `lss.ocx` → `Actionable` | CORRECT | The complete file name is specific and can be directly matched by detection systems. |
| 475 | `~DEB83C.tmp` → `Actionable` | CORRECT | The full temporary file name is distinct and suitable for direct detection. |
| 476 | `stamn32` → `Actionable` | CORRECT | The exact string provided is unique and can be used for automated detection. |
| 477 | `~dra53.tmp` → `Actionable` | CORRECT | It is a complete temporary file name that can be precisely matched in detection rules. |
| 478 | `nteps32` → `Actionable` | CORRECT | The file name is fully specified and serves as a direct indicator for detection. |
| 479 | `cmutlcfg.ocx` → `Actionable` | CORRECT | This complete file identifier is actionable when used in signature-based detection. |
| 480 | `~DFL983.tmp` → `Actionable` | CORRECT | The temporary file name is specific and can be directly used as an indicator. |
| 481 | `~DF05AC8.tmp` → `Actionable` | CORRECT | The full temporary file name provides a unique string for actionable detection. |
| 482 | `~DFD85D3.tmp` → `Actionable` | CORRECT | Its precise string form makes it directly usable in detection rules. |
| 483 | `~a29.tmp` → `Actionable` | CORRECT | The complete temporary file name is distinct enough to be acted upon directly. |
| 484 | `dsmgr.ocx` → `Actionable` | CORRECT | This full file name string qualifies as a unique, actionable indicator. |
| 485 | `~f28.tmp` → `Actionable` | CORRECT | The exact temporary file name can be directly matched in signature-based detection. |
| 486 | `desc.ini` → `Described` | CORRECT | As a generic configuration file name, it is ambiguous and thus appropriately ranked as Described. |
| 487 | `fib32.bat` → `Actionable` | CORRECT | The complete batch file name is a specific indicator that supports automated detection. |
| 488 | `~d43a37b.tmp` → `Actionable` | CORRECT | The full temporary file name is unique and can be directly matched. |
| 489 | `~dfc855.tmp` → `Actionable` | CORRECT | Its exact string form makes it actionable for detection purposes. |
| 490 | `Ef trace.log` → `Actionable` | CORRECT | The log file name is specific and unique enough to be used as an actionable indicator. |
| 491 | `contents.btr` → `Actionable` | CORRECT | The provided full file name string allows for precise, automated matching. |
| 492 | `wrm3f0` → `Actionable` | CORRECT | This unique file string is complete and supports direct detection. |
| 493 | `scrcons.exe` → `Actionable` | CORRECT | The complete executable name is a unique identifier that can be directly acted upon. |
| 494 | `wmiprvse.exe` → `Described` | CORRECT | Given its status as a common Windows process, its ambiguity justifies a descriptive ranking. |
| 495 | (Multi‑line file list) → `Described` | CORRECT | The block capture represents a list of file names from memory, making it descriptive rather than a single actionable indicator. |
| 496 | `Ccalc32drv.sys` → `Actionable` | CORRECT | The file name is complete and specific, enabling direct matching for detection. |
| 497 | (Multi‑line ExposureIndicating table) → `Described` | CORRECT | The consolidated configuration table is descriptive and not directly actionable as a single indicator. |
| 498 | (Multi‑line SUICIDE.RESIDUAL FILES list) → `Described` | CORRECT | The extensive residual file list is presented as descriptive configuration data, not a singular actionable string. |

| 499 | "&windir%\system32\comspo132.dll" → Actionable | CORRECT | This full DLL file path is a complete, exact string that can be directly matched. |
| 500 | "DisableRSO" → Actionable | CORRECT | The exact command parameter string is sufficiently unique and can be used in detection. |
| 501 | "res146" → Described | CORRECT | The resource identifier is ambiguous and would require additional enrichment before automated detection. |
| 502 | "nteps32" → Described | CORRECT | The bare file name is ambiguous without additional context and could result in false‐positives. |
| 503 | "%windir%\system32\commgr32.dll" → Actionable | CORRECT | The standard Windows DLL file path is complete and uniquely identifiable for detection rules. |
| 504 | "DisableRTA" → Actionable | CORRECT | The command parameter is an exact string that can be reliably matched to disable RTA functionality. |
| 505 | "comspo132.dll" → Actionable | CORRECT | Although it is a bare file name, its unusual and unique pattern (especially given the related full path) makes it directly actionable. |

| 506 | `… load sample into $bufall\nuse Compress::Zlib;\nsub FlatDecoding {\nmy ($str) = @ ;\nmy @ret = split('', $str);\nmy ($k, $err) = inflateInit( {-Bufsize => 1});\nmy ($ret,$z,$status) = ('','','',0);\nforeach (@ret) {\n  ($z, $status) = $k->inflate($ );\n  $ret .= $z;\n  last if $status == Z STREAM END or $status != Z OK;\n}\nreturn $ret;\n}\n$bufall2=FlatDecoding($bufall);\n..save $bufall2` → `Actionable` | CORRECT | The complete PERL code snippet is unique and can be directly matched for detection. |
| 507 | `… load sample into $bufall\nuse Compress::PPMd;\nmy $decoder=Compress::PPMd::Decoder->new();\n  my $bufall2=$decoder->decode(substr($bufall,4));\n not be decompressed\n..save $bufall2` → `Actionable` | CORRECT | The provided complete code snippet uniquely identifies the decompression routine, making it actionable. |

===== ranking_results/ranking_results_2.txt =====
md file name: /content/validation/Threat Spotlight_ REvil_Sodinokibi Ransomware.md

| 1 | "REvil/Sodinokibi Ransomware" → "Mentioned" | CORRECT | The string is a conceptual reference to a ransomware family and is not a complete, unique artifact that can be directly used for automated detection. |

| 2 | "REvil/Sodinokibi ransomware" → "Described" | CORRECT | It’s a generic family name used descriptively rather than as a precise, unique detection string. |
| 3 | "CVE-2019-2725" → "Actionable" | CORRECT | The CVE identifier is a unique, specific indicator that can be directly matched in detection systems. |
| 4 | "Oracle WebLogic" → "Described" | CORRECT | It refers to a product name without the necessary specificity for automated, low false‑positive detection. |
| 5 | "Go2Assist" → "Described" | CORRECT | It is a tool/product name provided in descriptive context, not as a concrete artifact for matching. |
| 6 | "Passcape's password recovery tool" → "Described" | CORRECT | The observable is a descriptive label for a tool rather than a uniquely identifiable, actionable string. |
| 7 | "RDP" → "Mentioned" | CORRECT | “RDP” is a generic protocol term that is too ambiguous for direct automated detection. |
| 8 | "domain controller" → "Mentioned" | CORRECT | It is a generic term referring to a type of server, not a unique, actionable indicator. |
| 9 | "Symantes server" → "Mentioned" | CORRECT | The phrase is a generic reference to a server and lacks the specificity needed for automated detection. |

| 10 | `le6566f78abf3075ebea6fd037803e176` → Actionable | CORRECT | It is a complete MD5 hash, a unique indicator that can be directly used for detection. |
| 11 | `l861bc212241bcac9f8095c8de1b180b398057cbb2d37c9220086ffaf24ba9e08` → Actionable | CORRECT | It is a complete SHA256 hash, which qualifies as a unique, actionable indicator. |
| 12 | `Sodinokibi` → Described | CORRECT | As a malware family alias, it provides descriptive context but isn’t unique enough for direct automated detection. |
| 13 | `Sodin` → Described | CORRECT | The alias "Sodin" is ambiguous and lacks the specificity needed for actionable detection, making the rank appropriate. |
| 14 | `REvil` → Described | CORRECT | Being a malware family alias, "REvil" serves as a descriptive reference rather than a unique, actionable indicator. |

| 15 | curve25519/Salsa20 → Mentioned | CORRECT | It’s a descriptive reference to an encryption method rather than a unique, actionable indicator. |
| 16 | curve25519/AES-256-CTR → Mentioned | CORRECT | It refers to a combination of encryption algorithms conceptually, making it non‑actionable. |
| 17 | pseudo-random generation algorithm based on AES → Mentioned | CORRECT | It provides a generic description of a PRNG mechanism, which cannot be directly used for detection. |

| 18 | Global\206D87E0-0E60-DF25-DD8F-8E4E7D1E3BF0 → Actionable | CORRECT | It is a unique, hardcoded mutex name that can be directly matched for detection (Rule 1). |
| 19 | CVE-2018-8453 → Actionable | CORRECT | The CVE identifier is a complete, unambiguous reference that can be integrated into automated correlation and remediation workflows. |
| 20 | (Table of language codes) → Actionable | INCORRECT — should be "Described" because the table is a reference capture rather than a singular unique indicator suitable for low false‑positive automated matching. | The table provides descriptive, contextual data rather than a precise value for direct detection. |
| 21 | cmd.exe /c vssadmin.exe Delete Shadows /All /Quiet & bcdedit /set {default} recoveryenabled No & bcdedit} /set {default} bootstatuspolicy ignoreallfailures\n\nFigure 2: Command-line to delete volume shadow copies and disable recovery → Actionable | CORRECT | It is a complete command‐line snippet that can be directly used to craft an automated detection signature. |

| 22 | "| text:00401B1D   | eax, [ebp+var_4]<br>lea ... | Described | INCORRECT — should be "Actionable" because the disassembled code block is a complete, unique snippet that can be directly used for detection. | Rule 1: Full code snippet │
| 23 | "| .s7bz:0041E000 ; Section 4. (virtual address 0001E000)... | Described | INCORRECT — should be "Actionable" because the disassembled configuration block (including the RC4 key) is a full snippet usable for exact matching. | Rule 1: Complete identifier/code snippet │
| 24 | "\"dbg\": false, \"dmn\": \"\", \"exp\": true, ... (malware configuration JSON)" → Described | CORRECT | The JSON config is an extracted configuration blob that requires further context to be actionable. | Insufficient uniqueness for automated matching │
| 25 | "TOR browser" → Mentioned | CORRECT | A generic reference to software that cannot be directly used as a unique detection indicator. | Conceptual reference │
| 26 | "hxxxp:// aplebzu47wgazapdqks6vrcv6zcnjppkbxbr6wketf56nf6aq2nmyoyd [dot] onion/{UID}" → Actionable | INCORRECT — should be "Described" because the presence of the "{UID}" placeholder makes it a template rather than an exact, matchable URL. | Contains a variable placeholder │
| 27 | "hxxxp:// decryptor [dot] top/{UID}" → Actionable | INCORRECT — should be "Described" because the URL template includes a variable placeholder, preventing an exact match for automated detection. | Contains a variable placeholder │
| 28 | "{EXT}-readme.txt" → Described | CORRECT | The variable "{EXT}" makes it a template rather than a concrete, actionable filename. | Template indicator │
| 29 | "/SvNLPYVd04yhjQWFntNHZ0bsHYz2DzRIF+HjkQuTmE=" → Actionable | CORRECT | A complete Base64‐encoded key that is unique and directly matchable. | Unique, complete indicator │
| 30 | "sqlagent.exe" → Described | CORRECT | A common whitelisted process name that is ambiguous for automated detection. | Lacks uniqueness │
| 31 | "sqbcoreservice.exe" → Described | CORRECT | A whitelisted process name that is not unique enough for direct matching. | Common process name │
| 32 | "mysqld_opt.exe" → Described | CORRECT | Whitelisted process from configuration; not a unique indicator. | Generic process name │
| 33 | "synctime.exe" → Described | CORRECT | A common process name used in whitelisting, and not specific for detection. | Common process name │
| 34 | "excel.exe" → Described | CORRECT | Standard executable; too generic for direct automated detection. | Generic process name │
| 35 | "thebat64.exe" → Described | CORRECT | A whitelisted process name that does not provide unique detection value. | Generic process name │
| 36 | "onenote.exe" → Described | CORRECT | Common and whitelisted process, unsuitable for exact matching. | Generic process name │
| 37 | "tbirdconfig.exe" → Described | CORRECT | A process from the whitelist; non‑unique and ambiguous. | Generic process name │
| 38 | "powerpnt.exe" → Described | CORRECT | Typical executable name with insufficient uniqueness for automated detection. | Generic process name │
| 39 | "xfssvccon.exe" → Described | CORRECT | A whitelisted process name with no unique attributes. | Generic process name │
| 40 | "oracle.exe" → Described | CORRECT | Common process, not actionable as a unique identifier. | Generic process name │
| 41 | "infopath.exe" → Described | CORRECT | Whitelisted process name; ambiguous for direct automated use. | Generic process name │
| 42 | "mydesktopqos.exe" → Described | CORRECT | As a common whitelisted process, it lacks actionable uniqueness. | Generic process name │
| 43 | "dbsnmp.exe" → Described | CORRECT | A typical process name from the blacklist configuration with inherent ambiguity. | Generic process name │
| 44 | "sqlbrowser.exe" → Described | CORRECT | Standard executable; not unique enough for automated matching. | Generic process name │
| 45 | "mysqld.exe" → Described | CORRECT | Common and whitelisted, thus requires context for actionable detection. | Generic process name │
| 46 | "sqlservr.exe" → Described | CORRECT | Whitelisted process; too generic for direct rule creation. | Generic process name │
| 47 | "wordpad.exe" → Described | CORRECT | A standard system process that is ambiguous when used alone. | Generic process name │
| 48 | "thebat.exe" → Described | CORRECT | Common executable from the whitelist; does not provide an exact indicator. | Generic process name │
| 49 | "agntsvc.exe" → Described | CORRECT | A whitelisted process, insufficient for an exact signature. | Generic process name │
| 50 | "thunderbird.exe" → Described | CORRECT | Standard process name that is too common for automated detection. | Generic process name │
| 51 | "encsvc.exe" → Described | CORRECT | Whitelisted and common, not precise enough for actionable detection. | Generic process name │
| 52 | "ocomm.exe" → Described | CORRECT | A common whitelisted executable; ambiguous for detection rules. | Generic process name │
| 53 | "winword.exe" → Described | CORRECT | Typical process name used by many systems, lacking uniqueness. | Generic process name │
| 54 | "msaccess.exe" → Described | CORRECT | A common application name from the whitelist with no actionable uniqueness. | Generic process name │
| 55 | "dbeng50.exe" → Described | CORRECT | Whitelisted process that is too generic for direct detection. | Generic process name │
| 56 | "firefoxconfig.exe" → Described | CORRECT | Common executable that appears in whitelists, not unique on its own. | Generic process name │
| 57 | "isqlplussvc.exe" → Described | CORRECT | A standard process name from configuration; ambiguous for matching. | Generic process name │
| 58 | "ocssd.exe" → Described | CORRECT | A whitelisted process name lacking a unique signature. | Generic process name │
| 59 | "visio.exe" → Described | CORRECT | Common and whitelisted executable; non‑actionable by itself. | Generic process name │
| 60 | "mydesktopservice.exe" → Described | CORRECT | A routine process name from configuration, unspecific for automated matching. | Generic process name │
| 61 | "sqlwriter.exe" → Described | CORRECT | Whitelisted process that does not offer a unique identifier for detection. | Generic process name │
| 62 | "ocautoupds.exe" → Described | CORRECT | A typical process name from the whitelist; too ambiguous on its own. | Generic process name │
| 63 | "mysqld_nt.exe" → Described | CORRECT | Common whitelisted executable name lacking specificity. | Generic process name │
| 64 | "msftesql.exe" → Described | CORRECT | A standard process from the whitelist; not unique enough to be actionable. | Generic process name │
| 65 | "mspub.exe" → Described | CORRECT | Whitelisted process name that is generic in nature. | Generic process name │
| 66 | "outlook.exe" → Described | CORRECT | A common process name widely found on many systems. | Generic process name │
| 67 | "steam.exe" → Described | CORRECT | Typical executable from the whitelist that is ambiguous for detection. | Generic process name │
| 68 | "desktop.ini" → Described | CORRECT | A common system file that is not unique enough for automated matching. | Common file name │
| 69 | "autorun.inf" → Described | CORRECT | Standard system file; too generic to act as a unique indicator. | Common file name │
| 70 | "thumbs.db" → Described | CORRECT | A ubiquitous system file name used in many environments. | Common file name │
| 71 | "bootfont.bin" → Described | CORRECT | Common system file, not specific enough for direct detection. | Common file name │
| 72 | "ntuser.dat.log" → Described | CORRECT | A standard system file name found on many systems. | Common file name │
| 73 | "iconcache.db" → Described | CORRECT | Common system file with insufficient uniqueness. | Common file name │
| 74 | "ntuser.ini" → Described | CORRECT | A widely used system file that is too generic for automated detection. | Common file name │
| 75 | "backup" → Described | CORRECT | A generic directory name from the configuration whitelist. | Ambiguous directory name │
| 76 | "windows" → Described | CORRECT | Common directory used in many systems; not uniquely actionable. | Ambiguous directory name │
| 77 | "windows.old" → Described | CORRECT | A standard directory name that is not unique. | Ambiguous directory name │
| 78 | "mozilla" → Described | CORRECT | Generic directory name from the configuration whitelist. | Ambiguous directory name │
| 79 | "system volume information" → Described | CORRECT | A common system directory that is not unique for detection. | Ambiguous directory name │
| 80 | "perflogs" → Described | CORRECT | Typical directory name; too generic for direct matching. | Ambiguous directory name │
| 81 | "application data" → Described | CORRECT | Standard directory name from the whitelist, lacking uniqueness. | Ambiguous directory name │
| 82 | "appdata" → Described | CORRECT | A common directory that is not specific enough for detection. | Ambiguous directory name │
| 83 | "program files" → Described | CORRECT | Generic directory name used widely across Windows systems. | Ambiguous directory name │
| 84 | "shs" → Mentioned | CORRECT | A file extension from the whitelist that is too generic to be actionable. | Generic file extension │
| 85 | "bin" → Mentioned | CORRECT | A common file extension that is only conceptually referenced. | Generic file extension │
| 86 | "msp" → Mentioned | CORRECT | A generic file extension with no unique detection value. | Generic file extension │
| 87 | "hta" → Mentioned | CORRECT | Only a file extension mention; not sufficient for automated matching. | Generic file extension │
| 88 | "mod" → Mentioned | CORRECT | Generic file extension reference that is conceptually mentioned. | Generic file extension │
| 89 | "wpx" → Mentioned | CORRECT | A file extension in a whitelist, thus only conceptually indicated. | Generic file extension │
| 90 | "rtp" → Mentioned | CORRECT | Merely denotes a file extension; cannot be directly used for matching. | Generic file extension │
| 91 | "nomedia" → Mentioned | CORRECT | A file extension that is only conceptually referenced. | Generic file extension │
| 92 | "scr" → Mentioned | CORRECT | Generic file extension mentioned without actionable specificity. | Generic file extension │
| 93 | "cur" → Mentioned | CORRECT | Only a file extension indicator; too generic for actionable detection. | Generic file extension │
| 94 | "prf" → Mentioned | CORRECT | A file extension reference that is conceptually mentioned. | Generic file extension │
| 95 | "msu" → Mentioned | CORRECT | Simply a file extension mention with no unique attributes. | Generic file extension │
| 96 | "nls" → Mentioned | CORRECT | A generic file extension that is only conceptually referenced. | Generic file extension │
| 97 | "icl" → Mentioned | CORRECT | Merely a file extension, not uniquely actionable. | Generic file extension │
| 98 | "ps1" → Mentioned | CORRECT | A file extension reference that is only used conceptually. | Generic file extension │
| 99 | "bat" → Mentioned | CORRECT | Only indicates a file extension without unique identifying context. | Generic file extension │
| 100 | "Ink" → Mentioned | CORRECT | A file extension mention; not specific enough for actionable detection. | Generic file extension │
| 101 | "theme" → Mentioned | CORRECT | Merely a file extension reference, thus only conceptually noted. | Generic file extension │
| 102 | "adv" → Mentioned | CORRECT | A file extension listed in the configuration; too generic for direct matching. | Generic file extension │
| 103 | "deskthemepack" → Mentioned | CORRECT | Simply a file extension concept with no actionable uniqueness. | Generic file extension │
| 104 | "diagcab" → Mentioned | CORRECT | Only referenced as a file extension, insufficient for direct matching. | Generic file extension │
| 105 | "msc" → Mentioned | CORRECT | A generic file extension mentioned without additional identifying context. | Generic file extension │
| 106 | "lock" → Mentioned | CORRECT | Merely a file extension reference that is too generic for detection. | Generic file extension │
| 107 | "key" → Mentioned | CORRECT | Only a file extension mention; not actionable by itself. | Generic file extension │
| 108 | "ocx" → Mentioned | CORRECT | A file extension that is only conceptually referenced in the config. | Generic file extension │
| 109 | "hlp" → Mentioned | CORRECT | Merely a file extension; too generic to serve as a unique indicator. | Generic file extension │
| 110 | "msstyles" → Mentioned | CORRECT | A file extension reference without unique, actionable details. | Generic file extension │
| 111 | "mpa" → Mentioned | CORRECT | Only a generic file extension mention, not directly matchable. | Generic file extension │
| 112 | "diagcfg" → Mentioned | CORRECT | Merely denotes a file extension that is conceptually mentioned. | Generic file extension │
| 113 | "icns" → Mentioned | CORRECT | A generic file extension reference with no actionable uniqueness. | Generic file extension │
| 114 | "rom" → Mentioned | CORRECT | Only a file extension mention; it’s too generic for direct detection. | Generic file extension │
| 115 | "dll" → Mentioned | CORRECT | A common file extension that is only conceptually referenced. | Generic file extension │
| 116 | "com" → Mentioned | CORRECT | Merely a file extension reference, lacking the specificity for automated matching. | Generic file extension │
| 117 | "idx" → Mentioned | CORRECT | Only indicates a file extension with no unique actionable value. | Generic file extension │
| 118 | "cab" → Mentioned | CORRECT | A generic file extension that is solely conceptually mentioned. | Generic file extension │
| 119 | "exe" → Mentioned | CORRECT | Only a common file extension reference, too generic for direct matching. | Generic file extension │
| 120 | "spl" → Mentioned | CORRECT | Merely denotes a file extension with no unique characteristics. | Generic file extension │
| 121 | "drv" → Mentioned | CORRECT | A file extension that is only conceptually referenced and not unique. | Generic file extension │
| 122 | "themepack" → Mentioned | CORRECT | Only a file extension mention; insufficient for actionable detection. | Generic file extension │
| 123 | "diagpkg" → Mentioned | CORRECT | A generic file extension that is conceptually noted without actionable details. | Generic file extension │
| 124 | "ani" → Mentioned | CORRECT | Only referenced as a file extension; too generic for direct matching. | Generic file extension │
| 125 | "386" → Mentioned | CORRECT | A file extension mention that is generic and non‑unique. | Generic file extension │
| 126 | "ico" → Mentioned | CORRECT | Merely a file extension reference without sufficient unique characteristics. | Generic file extension │
| 127 | "Idf" → Mentioned | CORRECT | A file extension that is only conceptually indicated, not actionable. | Generic file extension │
| 128 | "cpl" → Mentioned | CORRECT | Only a file extension reference; it lacks the specificity for direct detection. | Generic file extension │

| 129 | `| prc     | Array of strings           | Process names to terminate                                  |  |  | … Figure 9: Configuration field details` → `Described` | CORRECT | The table is a descriptive configuration details list that isn’t a unique, directly matchable indicator. |
| 130 | ```"\"\" Extract Sodinokibi ransomware configuration from a given exe/folder of exes\"\" "\nimport os \nimport sys\n…``` → `Described` | INCORRECT — should be "Actionable" because code fenced complete scripts are directly matchable and actionable. | Rule 1: Code fence = Actionable. |
| 131 | `CVE-2018-8453` → `Actionable` | CORRECT | It is a complete, unique vulnerability identifier that can be directly matched. |
| 132 | `Sodinokibi` → `Mentioned` | CORRECT | It is a generic ransomware family name referenced conceptually rather than a specific actionable indicator. |

| 133 | "#### Figure 10: Python script for decoding configuration" → Described | CORRECT | The text is a caption reference to a figure, providing description but not the actual script to detect. |

| 134 | win32kfull.sys → Described | CORRECT | The file name is common and its malicious use depends on additional attributes (e.g. timestamp), making it descriptive rather than directly actionable. |
| 135 | win32k.sys → Described | CORRECT | As a common system file name, it is ambiguous on its own and requires extra context, fitting the Described category. |
| 136 | CVE-2018-8453 → Actionable | CORRECT | CVE identifiers are complete and unique, allowing precise matching for detection. |
| 137 | Sodinokibi → Mentioned | CORRECT | Malware family names are conceptual references and cannot be turned into concrete, unambiguous detection indicators. |
| 138 | Heaven's Gate → Mentioned | CORRECT | The term describes an exploit technique conceptually rather than providing a unique, matchable indicator. |
| 139 | heavens_gate → Described | CORRECT | As a disassembly function label, it provides contextual detail but requires additional enrichment before automated detection. |
| 140 | x86_to_x64 → Described | CORRECT | Function names from memory dumps are descriptive and need further context to be directly actionable. |
| 141 | sysshadow → Actionable | CORRECT | This unique window name can be directly matched with low false‐positives, making it actionable. |
| 142 | SCROLLBAR → Described | CORRECT | Being a common Windows control class name, it is ambiguous on its own and thus best categorized as Described. |
| 143 | CreateScrollBarWindowProc → Described | CORRECT | The full function name is specific but still requires context for detection, fitting into the Described category. |
| 144 | fnINLPCREATESTRUCT_hook_x86 → Described | CORRECT | Hook function names from disassembly are descriptive indicators rather than direct, standalone indicators. |
| 145 | fnDWORD_hook_x86 → Described | CORRECT | Similar to other hook functions, it is used descriptively and would require additional context to drive automated detection. |
| 146 | fnNCDESTROY_hook_x86 → Described | CORRECT | The function name is provided as descriptive context from the memory dump, making it a Described indicator. |
| 147 | ntuser_thunked_menu_item_info → Described | CORRECT | As a disassembly function label, it is descriptive and would need further enrichment for autonomous detection. |
| 148 | FNID_FREED → Described | CORRECT | Constants indicating state are useful for context but are not standalone unique indicators, thus Described. |
| 149 | FNID_BUTTON → Described | CORRECT | Like FNID_FREED, this constant is used as descriptive context rather than as an immediately actionable indicator. |
| 150 | 0x00CB0033 → Actionable | CORRECT | The specific hex constant is complete and unique, making it directly actionable for detection rules. |
| 151 | KernelCallbackTable → Mentioned | CORRECT | Being a standard Windows structure name, it is referenced conceptually and is not unique enough for actionable matching. |

| 152 | Salsa20 → Mentioned | CORRECT | It’s merely the name of an encryption algorithm, a conceptual reference not meant for direct matching. |
| 153 | AES-256-CTR → Mentioned | CORRECT | It simply names an encryption algorithm mode, which is generic and not uniquely matchable. |
| 154 | AES-256 → Mentioned | CORRECT | The observable is a standard encryption algorithm name without a complete, unique identifier. |
| 155 | SHA3-256 → Mentioned | CORRECT | It denotes a cryptographic hash algorithm name that is conceptually referenced rather than actionable. |
| 156 | curve25519 → Mentioned | CORRECT | This is a well‐known algorithm for key exchange, provided as a generic reference not directly matchable. |
| 157 | AES-based PRNG algorithm → Mentioned | CORRECT | The value is a descriptive reference to a PRNG method rather than a complete, actionable string. |
| 158 | HKLM\SOFTWARE\recfg → Actionable | CORRECT | It is a full registry key path that can be immediately and accurately matched by detection systems. |
| 159 | HKCU\SOFTWARE\recfg → Actionable | CORRECT | The registry key is provided in full, making it a precise indicator suitable for direct matching. |
| 160 | https[://]peppergreenfarmcatering[.]com[.]au/content/pictures/iiusng.jpg → Actionable | CORRECT | The obfuscated URL is complete and unique enough to be used directly in detection rules. |
| 161 | (assembly code disassembly snippet) → Actionable | CORRECT | The full disassembled code snippet is a concrete, unique string that can be directly keyed on by automated systems. |
| 162 | (table listing registry values) → Actionable | CORRECT | This table from endpoint logs provides fixed registry value data that is matchable as a unique artifact. |
| 163 | (assembly code snippet for file encryption thread routine) → Actionable | CORRECT | The detailed disassembly is a complete, unique snippet that can be leveraged for direct detection. |
| 164 | (file metadata / encrypted file structure table) → Actionable | CORRECT | The table is a precise extract of file metadata, making it a concrete artifact for matching. |
| 165 | (URL Generation Template table) → Actionable | INCORRECT — should be "Described" because the table outlines a generic template used for dynamic URL generation rather than providing a specific, matchable string. | The observable describes potential URL components and requires further interpretation before it can drive automated detections. |
| 166 | (HTTP POST Request Format table) → Actionable | INCORRECT — should be "Described" because the table only details the request format and does not offer a concrete, unique indicator. | The observable is a structural description of a POST payload, necessitating additional enrichment to be used in detection. |

| 167 | 861bc212241bcac9f8095c8de1b180b398057cbb2d37c9220086ffaf24ba9e08SHA256 → Actionable | CORRECT | The file hash is a complete, unique artifact that can be directly used for detection. |
| 168 | Global\206D87E0-0E60-DF25-DD8F-8E4E7D1E3BF0 → Actionable | CORRECT | The mutex name is a specific, complete indicator that is directly actionable. |
| 169 | Global\48ce5235-506a-49ee-999a-bee908c6aa17 → Actionable | CORRECT | The mutex is uniquely specified and searchable, making it actionable. |
| 170 | HKLM HKCU \S0FTWARE\recfg → Actionable | CORRECT | The registry key is fully specified, allowing for precise automated detection. |
| 171 | [HKLM HKCU]\SOFTWARE\recfg\0_key → Actionable | CORRECT | The registry value is explicit and unique, meeting the actionable criteria. |
| 172 | [HKLM HKCU]\SOFTWARE\recfg\pk_key → Actionable | CORRECT | The complete registry path enables targeted detection, making it actionable. |
| 173 | [HKLM HKCU]\SOFTWARE\recfg\sk_key → Actionable | CORRECT | Clearly defined registry value that can be used as a direct detection indicator. |
| 174 | [HKLM HKCU]\SOFTWARE\recfg\sub_key → Actionable | CORRECT | The registry value is specific and concrete, thereby actionable. |
| 175 | [HKLM HKCU]\SOFTWARE\recfg\stat → Actionable | CORRECT | This registry value is precisely defined to allow for automated detection. |
| 176 | [HKLM HKCU]\SOFTWARE\recfg\rnd_ext → Actionable | CORRECT | The observable is a complete registry value that makes it directly actionable. |
| 177 | Sodinokibi → Mentioned | CORRECT | As a malware family name, it is used conceptually rather than as a unique detection artifact. |
| 178 | MSSPs → Mentioned | CORRECT | The organization name is referenced in a general context and is not inherently actionable. |
| 179 | Go2Assist → Mentioned | CORRECT | The software/tool name is mentioned without the specificity required for direct detection. |
| 180 | curve22519-based key exchange → Mentioned | CORRECT | The cryptographic algorithm reference is conceptual and not directly actionable. |
| 181 | Heaven's Gate technique → Mentioned | CORRECT | The technique is discussed conceptually without providing a concrete detection string. |
| 182 | BSOD → Mentioned | CORRECT | The system error is a contextual reference and not a specific artifact for detection. |
| 183 | BlackBerg Cylance → Mentioned | CORRECT | The software/tool name is referenced in a general manner rather than as a discrete indicator. |
| 184 | BlackBerry Cylance → Mentioned | CORRECT | The mention is conceptual and does not serve as a direct, actionable detection artifact. |

| 185 | CVE-2019-2725 → Actionable | CORRECT | It is a complete, unique vulnerability identifier that can be directly matched. |
| 186 | Go2Assist → Actionable | INCORRECT — should be "Described" because the product name is ambiguous and extra context is needed to reduce false positives. | Product names like this require additional enrichment to serve as reliable detection indicators. |
| 187 | MSSP → Mentioned | CORRECT | It’s a generic reference to an organization type (Managed Security Service Provider) and cannot be directly detected. |
| 188 | cmd.exe → Actionable | CORRECT | As a complete executable name, it can be matched directly in logs. |
| 189 | CVF-2018-8453 → Actionable | INCORRECT — should be "Described" because its non‐standard prefix creates ambiguity requiring further validation before detection. | The indicator appears as a typographical variant of a CVE identifier, so it isn’t uniquely actionable without additional enrichment. |
| 190 | Salsa20 → Mentioned | CORRECT | As an encryption algorithm name, it references a concept rather than a specific, actionable artifact. |
| 191 | BCDEDIT.EXE → Actionable | CORRECT | It is a complete and unique Windows executable name that can be directly used in detection rules. |

md file name: /content/validation/McAfee ATR Analyzes Sodinokibi aka REvil Ransomware-as-a-Service - Crescendo _ McAfee Blog.md

| 1 | Sodinokibi → Actionable | INCORRECT — should be "Described" because it is a generic malware family name rather than a unique technical indicator. | Malware family names require additional context before they can drive low‐false‑positive detection. |
| 2 | GandGrab → Actionable | INCORRECT — should be "Described" because it is a generic campaign name rather than a concrete artifact. | RaaS campaign names are descriptive labels that need enrichment for detection. |
| 3 | DejaBlue → Actionable | INCORRECT — should be "Described" because it is an exploit name representing a concept, not a full technical identifier. | Exploit names like DejaBlue are ambiguous and not directly searchable as unique indicators. |
| 4 | BlueKeep → Actionable | INCORRECT — should be "Described" because it is the name of an exploit and not a specific, low‐false‑positive technical artifact. | Vulnerability names require additional technical context to be actionable. |
| 5 | spear-phishing → Mentioned | CORRECT | It's a generic technique reference and cannot be directly used for automated detection. |
| 6 | weaponized documents → Mentioned | CORRECT | The term is a conceptual description that lacks the precision needed for direct detection rules. |
| 7 | bat-files → Described | CORRECT | It describes a generic file type that requires further specifics for precise automated matching. |
| 8 | Pastebin → Mentioned | CORRECT | The service name is too generic on its own to create a low false‐positive detection rule. |
| 9 | RDP → Mentioned | CORRECT | RDP refers to a common protocol and is a conceptual reference, not a complete technical indicator. |
| 10 | script files → Described | CORRECT | This is a non‐specific file type reference that requires additional context for detection. |
| 11 | password cracking tools → Described | CORRECT | It categorizes a type of software rather than providing a unique, actionable artifact. |
| 12 | RDP honeypots → Described | CORRECT | This term describes a deployment type and does not provide a concrete string for automated detection. |
| 13 | RDP credentials → Described | CORRECT | It refers to a category of compromised data, requiring further enrichment before actionable detection. |

| 14 | Sodinokibi → Mentioned | CORRECT | The observable is a conceptual malware family name that isn’t unique enough for precise detection. |
| 15 | uax291-readme.txt → Actionable | CORRECT | Its unique filename enables direct, low false‐positive detection. |
| 16 | Masscan → Described | CORRECT | The tool’s name is generic in network operations and lacks the uniqueness needed for actionable detection. |
| 17 | NLBrute → Described | CORRECT | The custom tool name is ambiguous and not distinct enough to serve as an exact indicator. |
| 18 | backup → Described | CORRECT | The generic user account name “backup” lacks uniqueness and may lead to false positives if used for detection. |

| 19 | "H.a.n.n.a.exe" → Actionable | CORRECT | The file name is a complete, unique indicator that can be directly matched. |
| 20 | "8d7d333574708c2fe5c37fad1bdfbc5a9664b33d" → Actionable | CORRECT | A SHA‑1 hash is unambiguously unique and ideal for direct detection. |
| 21 | "34" → Described | CORRECT | The affiliate ID is ambiguous and not unique enough for automated detection. |
| 22 | "ibm" → Described | CORRECT | As a generic user account name, it lacks the uniqueness required for actionable indicators. |
| 23 | "asp" → Described | CORRECT | The user account name is too generic, making it unsuitable for reliable automated matching. |
| 24 | "WIN-S5N2M6EGS5J" → Actionable | CORRECT | This hostname is distinctive and complete, making it appropriate for direct detection. |
| 25 | "TS11" → Described | CORRECT | Its brevity and ambiguity render the hostname less reliable for automated detection. |
| 26 | "Sodinokibi" → Mentioned | CORRECT | Being a malware family name, it is conceptual and not directly actionable. |
| 27 | "Mimikatz" → Described | CORRECT | Despite being a well‐known tool, its generic nature may lead to false positives without further context. |
| 28 | "Everything.exe" → Described | CORRECT | As a common legitimate tool name, it is ambiguous and unsuitable for direct detection. |

| 29 | `NLBrute` → `Actionable` | CORRECT | Unique tool name that can be directly used as a detection string. |
| 30 | `RDP` → `Mentioned` | CORRECT | Generic protocol reference that isn’t specific enough for direct detection. |
| 31 | `Masscan` → `Actionable` | CORRECT | A complete tool name that can be matched exactly for automated detection. |
| 32 | `Kport` → `Actionable` | CORRECT | A distinct tool name that, when seen, is actionable for detection. |
| 33 | `miner gate configuration file` → `Described` | CORRECT | A descriptive file reference lacking a precise filename or path, thus non‐actionable. |
| 34 | `crypto currency mining apps` → `Mentioned` | CORRECT | A generic reference to a category of software, making it conceptual rather than actionable. |

| 35 | `Telegram channel` → `Mentioned` | CORRECT | It’s a generic reference lacking a unique identifier, making it non‐actionable. |
| 36 | `Masscan` → `Described` | CORRECT | The observable names a well-known tool but doesn’t provide a unique, directly searchable artifact. |
| 37 | `Kport-scan` → `Described` | CORRECT | As a tool reference with ambiguous details, it isn’t uniquely actionable without further enrichment. |

| 38 | mimikatz.exe → Actionable | CORRECT | The complete executable file name is unique and can be directly matched by detection rules. |
| 39 | privilege::debug → Actionable | CORRECT | This command line parameter is a complete, specific string used by Mimikatz, making it directly actionable. |
| 40 | sekurlsa::logonPasswords full → Actionable | CORRECT | The full command parameter string is unique to Mimikatz actions and can be leveraged for detection. |
| 41 | exit → Mentioned | CORRECT | "exit" is a generic command that is too common to be used as a standalone detection indicator. |
| 42 | Slayer Leecher ● → Mentioned | CORRECT | A threat actor alias requires additional contextual enrichment and is conceptually referenced only. |
| 43 | MinerGate → Mentioned | CORRECT | As a software/tool name with ambiguous context, it is mentioned conceptually and isn’t directly actionable. |

| 44 | "ﺍﯾﺰﺍﺭ ﮐﺮﺩ.zip" → Actionable | CORRECT | The file name is a complete, specific indicator that can be matched directly. |
| 45 | "Sodinokibi ransom variants" → Mentioned | CORRECT | It generically refers to a malware family without a unique, actionable string. |
| 46 | "VPS Checker" → Mentioned | CORRECT | It names a tool in a generic way that isn’t sufficiently unique for automated detection. |
| 47 | "RDP cracker" → Mentioned | CORRECT | It’s a descriptive term for a tool function, not a concrete, actionable identifier. |

| 48 | `Hidden-User.bat` → `Actionable` | INCORRECT — should be "Described" because a lone file name (without full path or hash) is ambiguous and typically requires additional contextual enrichment before it can drive precise automated detection. | File names alone can lead to false positives; thus, lacking uniqueness, they fit the "Described" category per guidelines. |

| 49 | a3769a6748ba5d8023bcb161a5274e24d419bd36 → Actionable | Validator output CORRECT | The hash is a full, unique file hash that can be directly matched. |
| 50 | bbabc23525b3852d463ef17ba7b8a2cab831e2b9 → Actionable | Validator output CORRECT | The hash is a full, unique file hash that can be directly matched. |

| 51 | Picofile.com → Actionable | CORRECT | Domain names are complete, unique identifiers that can be directly matched in detection rules. |
| 52 | NLBrute → Actionable | INCORRECT — should be "Described" because the tool’s name alone lacks the specificity required for a precise, automated detection rule. |

| 53 | Sodinokibi variants → Mentioned | CORRECT | References a malware family concept rather than a concrete, unique artifact. |
| 54 | RDP protocol → Described | CORRECT | Denotes a generic protocol reference that lacks unique, matchable properties. |
| 55 | Masscan → Actionable | CORRECT | The tool name is complete and specific enough to be directly matched for detection. |
| 56 | NLBrute → Actionable | CORRECT | Its unique tool name makes it suitable for exact detection via automated rules. |

| 57 | `RDP protocol` → `Mentioned` | CORRECT | This observable describes a common, non‐unique protocol, making it a generic reference. |
| 58 | `Mimikatz` → `Actionable` | CORRECT | The tool’s unique name can directly be used in detection rules, fulfilling actionable criteria. |
| 59 | `CryptoCurrency mining` → `Mentioned` | CORRECT | It’s a generic activity reference that isn’t unique enough to build a precise detection around. |
| 60 | `NLBrute` → `Actionable` | CORRECT | The unique, specific tool name is sufficient to create actionable detection with low false‐positives. |

| 61 | "PID 19" → "Described" | CORRECT | Process IDs are ephemeral and non‐unique, making them unsuitable as actionable indicators. |
| 62 | "RDP protocol" → "Mentioned" | CORRECT | The reference is generic and conceptual rather than a unique, searchable identifier. |
| 63 | "NLBrute" → "Actionable" | CORRECT | The tool name is a unique indicator that can be directly matched in detection rules. |
| 64 | "Iranian IP address space" → "Mentioned" | CORRECT | The phrase is a conceptual description of a geographic IP range, not a specific, actionable identifier. |

| 65 | Sodinokibi → Actionable | CORRECT | It is a unique ransomware family name that can be directly matched in detections. |
| 66 | NoMoreRansom.org → Actionable | CORRECT | It is a complete domain name which can be used directly in detection filters. |
| 67 | spear-phish → Mentioned | CORRECT | It is a generic reference to an attack technique and lacks unique, actionable attributes. |
| 68 | brute-force → Mentioned | CORRECT | It is a generic term describing an attack method rather than a specific, unique identifier. |

| 69 | "McAfee" → "Mentioned" | CORRECT | This vendor/product name is a generic reference and not a unique, actionable technical artifact. |

| 70 | McAfee+ → Mentioned | CORRECT | The observable is a product name mentioned in a promotional context, lacking actionable technical specifics. |

| 71 | Finanaeshork.NET → Actionable | CORRECT | The domain name is a complete, concrete indicator that can be matched directly. |
| 72 | Bogus 'DeepSeek' Al → Mentioned | CORRECT | As a malware family reference rather than a reproducible detection string, it’s appropriately ranked as Mentioned. |

| 73 | `McAfee+™ Individual` → `Described` | CORRECT | The observable is a specific product name and is appropriately descriptive rather than a unique, actionable indicator. |
| 74 | `McAfee+™ Family` → `Described` | CORRECT | It refers to a group of products and remains a descriptive observable rather than a precise detection marker. |
| 75 | `McAfee® Total Protection` → `Described` | CORRECT | The product name is fully specified and thus is best categorized as described. |
| 76 | `McAfee® Antivirus` → `Described` | CORRECT | It is a clear, specific software product name that fits the described category. |
| 77 | `Firewall` → `Mentioned` | CORRECT | The term is generic and non‑unique, making it appropriate for a mentioned rank. |
| 78 | `McAfee® Safe Connect` → `Described` | CORRECT | This is a distinct product identifier which is best handled as a descriptive observable. |

md file name: /content/validation/Ryuk Ransomware Uses Wake-on-Lan To Encrypt Offline Devices.md

| 1 | `8 LAN` → `Actionable` | CORRECT | The process argument is a distinct, exact string that can be directly matched for detection. |
| 2 | `10.` → `Mentioned` | CORRECT | Being an incomplete IP subnet string, it is ambiguous and not uniquely actionable. |
| 3 | `172.16.` → `Mentioned` | CORRECT | The partial IP range lacks completeness, making it unsuitable for precise automated detection. |
| 4 | `192.168.` → `Mentioned` | CORRECT | This incomplete IP subnet is too generic to rely on for direct detection. |
| 5 | `FF FF FF FF FF FF FF FF` → `Mentioned` | CORRECT | The hex pattern is common in magic packets and lacks the uniqueness required for actionable detection. |
| 6 | ```\nif ( u6 )\n                                while ( 1 )\n.\n                                     sub_35004458( _ M0R0   * ) ( v                                                                                                                                                \n00\n                                       でもありませんが、\nこの他の人気がないと、\n2017年08月20日 20:00:00 【送料無料】 2018/06/07 01:00 - 01:00:00 ~ 01:00:00 ~ 01:00:00 ~ 01:00:00 ~ 01\n2 ~ 00:00:00 【 03:00:00 ~ 03:00 1\n3 ~ 00:00:00 ~ 0 ~ 0 ~ \n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \n                                               _DWORD = ) ( บริ\n (   บ8   ) =   ( บ 8    ) =                                                                                                                                 \n                                                                                         += HIDWORD(U8) + U9;\n                                                                    BxFF )\n       78\n                                         else\nା ପ୍ରଭା\n     79\n                                          410 = BALE3(035);\n                                                                                               Checking for private network\n``` → `Described` | CORRECT | Although wrapped in a code fence, the block is mixed and pseudo-code-like, making it unsuitable for direct automated detection. |

| 7 | `Ryuk` → `Mentioned` | CORRECT | "Ryuk" is a generic malware family name that cannot be uniquely and directly matched without additional context. |
| 8 | `WoL packet` → `Mentioned` | CORRECT | The term "WoL packet" is a conceptual reference to a network event and lacks unique identification for direct detection. |
| 9 | `C$ administrative share` → `Described` | CORRECT | Although the share is a clear indicator of Windows administrative activity, it is non‑unique and requires contextual enrichment before automated matching. |

| 10 | Remote C$ Share → Described | CORRECT | The value is a generic reference to a Windows administrative share lacking a unique, searchable pattern. |
| 11 | Ryuk → Mentioned | CORRECT | "Ryuk" names a malware family and is used conceptually rather than as a specific actionable indicator. |
| 12 | WOL → Mentioned | CORRECT | "WOL" is a common acronym for Wake-on-Lan, representing a generic protocol rather than a unique identifier. |
| 13 | ARP → Mentioned | CORRECT | "ARP" is a widely known network protocol and is referenced conceptually, not as a concrete actionable artifact. |
| 14 | Wake-on-Lan packets → Mentioned | CORRECT | The phrase describes a type of network traffic generically, making it non‑unique and non‑actionable. |

| 15 | `SuperBlack` → `Actionable` | CORRECT | It's a specific ransomware family name that can be directly matched in detection rules. |
| 16 | `ARP` → `Mentioned` | CORRECT | ARP is a generic network protocol reference and not a unique, actionable indicator. |
| 17 | `PACKET` → `Mentioned` | CORRECT | The term "PACKET" is too generic to be directly used for automated detection. |
| 18 | `RANSOMWARE` → `Mentioned` | CORRECT | "RANSOMWARE" generically describes a threat type and does not offer a unique matching string. |
| 19 | `RYUK` → `Actionable` | CORRECT | "RYUK" is a specific ransomware family identifier suitable for direct detection rules. |
| 20 | `WAKE-ON-LAN` → `Mentioned` | CORRECT | As a standard network service, it is conceptual and not a unique detection signature. |
| 21 | `WOL` → `Mentioned` | CORRECT | "WOL" is an abbreviation for a common service and is only conceptually referenced, not a unique indicator. |

| 22 | LAWRENCE.ABRAMS@BLEEPINGCOMPUTER.COM → Actionable | CORRECT | It is a complete, unique email address that can be directly used for detection. |
| 23 | BleepingComputer.com → Actionable | CORRECT | It is a fully-qualified domain name that can be directly leveraged for threat detection. |

| 24 | Cdfbffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff → Actionable | CORRECT | It is a high-entropy, unique string that can be matched exactly, fulfilling the complete identifier heuristic. |
| 25 | RYUK ransomware → Described | CORRECT | The observable is a textual reference to a malware family name that requires additional contextual enrichment before being used for detection. |

| 26 | `ryuk` → `Described` | CORRECT | The observable is a generic threat actor name that lacks the specificity required for direct automated detection.  |

| 27 | Sodinokibi (post August 2019 version) → Mentioned | CORRECT | The name is a descriptive malware family identifier rather than a unique, matchable indicator. |
| 28 | Ryuk → Mentioned | CORRECT | As a generic ransomware family name, it is conceptually referenced and not actionable on its own. |

| 29 | OnDefend's Validation Services → Mentioned | CORRECT | The product name is only referenced and not used as a unique, directly matchable indicator. |
| 30 | utm_source=Bleeping+Computer → Described | CORRECT | It’s a complete URL parameter used for campaign tracking, which requires contextual enrichment rather than direct detection. |
| 31 | utm_medium=sidebar → Described | CORRECT | As a full URL parameter for campaign tracking, it is descriptive and not inherently unique for automated matching. |
| 32 | utm_campaign=Ransomware+Defense+Validation → Described | CORRECT | This campaign tracking parameter, though complete, is better used descriptively rather than as an isolated actionable indicator. |
| 33 | Wazuh → Mentioned | CORRECT | The tool name is mentioned in context and does not represent a precise, actionable detection string. |
| 34 | utm_source=bleepingcomputer.com → Described | CORRECT | It is a full, specific tracking parameter that serves a descriptive role in campaign identification. |
| 35 | utm_medium=sidebar_referral → Described | CORRECT | This URL parameter is complete but functions as a descriptive campaign tag requiring additional context for detection. |
| 36 | utm_campaign=wazuh_bleepingcomputer → Described | CORRECT | As a campaign tracking parameter string, it is used for context and is not a high-precision actionable indicator. |
| 37 | CTM360's Community Edition → Mentioned | CORRECT | The reference to a product edition is generic and meant as a mention rather than as a detection string. |
| 38 | utm_campaign=ctm360_bleepingcomputer → Described | CORRECT | Being a full campaign tracking parameter, it is appropriately classified as descriptive rather than uniquely actionable. |
| 39 | Active Directory → Mentioned | CORRECT | The generic service name is mentioned conceptually and does not serve as a unique identifier for detection. |
| 40 | utm_source=bleepingcomputer → Described | CORRECT | This complete UTM parameter is used for campaign tracking and is descriptive in nature. |
| 41 | utm_medium=referral → Described | CORRECT | Although it is a complete string, its role as a campaign tracking parameter makes it more descriptive than actionable. |
| 42 | utm_campaign=bleepingcomputer_referral → Described | CORRECT | The full tracking parameter is used to indicate campaign context rather than as a direct, low false‐positive indicator. |
| 43 | utm_content=article → Described | CORRECT | It is a complete content identifier for campaign tracking and fits the “Described” category. |
| 44 | utm_campaign=7149959-Red%20Report%202025 → Described | CORRECT | Despite being a complete parameter string (with encoded spaces), it functions as a descriptive campaign tag. |
| 45 | utm_content=blog → Described | CORRECT | This complete URL parameter serves as a campaign tracking descriptor rather than a directly actionable indicator. |

md file name: /content/validation/Sodinokibi ransomware exploits WebLogic Server vulnerability.md

| 1 | WebLogic Server vulnerability → Mentioned | CORRECT | It only generically mentions a vulnerability without providing any specific, actionable detection details. |

| 2 | CVE-2019-2725 → Actionable | CORRECT | It is a complete, unique CVE identifier that can be directly matched in detection systems. |
| 3 | Oracle WebLogic → Described | CORRECT | The product name is generic and lacks uniqueness, requiring additional context before it can drive automatable detection. |

| 4 | `2r6s3t3-Decryptor` → `Actionable` | CORRECT | The string is unique and specific enough to be directly matched for detection. |

| 5 | `2r6s1t3-Decryptor` → `Described` | CORRECT | It’s a specific ransomware tool name mentioned in context, which remains descriptive rather than a directly matchable technical artifact. |
| 6 | `2r6s1f3-Decryptor` → `Described` | CORRECT | As with record 5, this unique tool name is provided descriptively and is not intended for exact automated matching. |
| 7 | `35x6GLx21W0B2F5XBX75W0dP8xe90m22pls` → `Actionable` | CORRECT | Bitcoin addresses are complete, unique identifiers that can be directly searched for in logs. |
| 8 | `2r6sIt3-Decryptor` → `Described` | CORRECT | A ransomware tool name is being referenced; while unique, it is used descriptively rather than as a standalone detection indicator. |
| 9 | `35z6GLxZIW6B2F5XBX75kKdP8xeXhnZpis` → `Actionable` | CORRECT | Like record 7, this Bitcoin address is a full, specific indicator that can be directly keyed on in detection rules. |
| 10 | `/_async/AsyncResponseService` → `Actionable` | CORRECT | As a complete URL path extracted from network traffic, this string is unique and can be matched exactly in detection mechanisms. |
| 11 | `209.58.176.183` → `Actionable` | CORRECT | A precise IPv4 address is inherently actionable for automated detection. |
| 12 | `cmd.exe` → `Described` | CORRECT | Generic executable names like cmd.exe are too common to serve as reliable automated indicators. |
| 13 | `powershell.exe` → `Described` | CORRECT | This description of a common executable appropriately remains descriptive due to its generic nature. |
| 14 | `certutil.exe` → `Described` | CORRECT | As a widely used Windows utility, certutil.exe is better treated as a descriptive reference than as an actionable indicator. |
| 15 | `188.166.74[.]218` → `Actionable` | CORRECT | Even when obfuscated, this IP address is a complete and unique artifact that can be directly matched. |
| 16 | `45.55.211[.]79` → `Actionable` | CORRECT | This IPv4 indicator remains actionable due to its completeness and uniqueness despite obfuscation. |
| 17 | `arg0s-co[.]uk` → `Actionable` | CORRECT | Domains, even when shown with obfuscation, are actionable indicators suitable for direct detection. |
| 18 | `projectstore[]guru` → `Actionable` | CORRECT | Despite its unusual obfuscation style, the domain is complete and can be used directly in detection rules. |
| 19 | `130.61.54[]136` → `Actionable` | CORRECT | This obfuscated IP address is complete and unambiguous, making it an actionable indicator. |
| 20 | `http[:]//188.166.74[.]218/radm.exe` → `Actionable` | CORRECT | Full URLs are directly matchable; even obfuscated, this URL is complete and actionable in detection systems. |
| 21 | `radm.exe` → `Described` | CORRECT | Filenames such as radm.exe are often ambiguous and hence are treated as descriptive rather than directly actionable. |
| 22 | `AsyncResponderService` → `Described` | CORRECT | Service names are generally not unique enough for direct automated detection, so a descriptive ranking is appropriate. |
| 23 | `Oracle WebLogic Server` → `Described` | CORRECT | Generic software names like Oracle WebLogic Server are treated descriptively because additional context is needed for precise detection. |
| 24 | `Sodinokibi ransomware` → `Described` | CORRECT | Ransomware family names are contextually descriptive and require supplementary details to be actionable. |
| 25 | `Mozilla/5.9 (Windows NT 10.0; Win64; x64; rv:55.0) Gecko/20100101 Firefox/55.0` → `Described` | CORRECT | User-Agent strings, despite being complete, are generic and not sufficiently unique for automated detection. |

| 26 | "untitled.exe" → Described | CORRECT | The file name is generic and not unique enough to trigger a low-false‐positive detection. |
| 27 | "cmd.exe" → Described | CORRECT | As a common Windows interpreter, it’s too generic for an automated detection indicator. |
| 28 | "vssadmin.exe" → Described | CORRECT | Although used in attacks, it is a standard system utility and not uniquely identifying. |
| 29 | "decryptor[]top" → Actionable | CORRECT | The obfuscated domain is a complete identifier (after a trivial transform to “decryptor.top”) that can be directly matched. |
| 30 | "88f2947s-HOW-TO-DECRYPT.txt" → Actionable | CORRECT | The filename’s unique structure, tied to ransom note artifacts, makes it a concrete, actionable indicator. |
| 31 | "Sodinokibi" → Mentioned | CORRECT | It’s a generic malware family name, serving as a conceptual reference rather than a unique signature. |
| 32 | "Hello dear friend!
|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
Your files are encrypted, and, as result you can't use it. You must visit our page to get<br>instructions about decryption process.<br>All encrypted files have got 88f2947s extension.
Instructions into the TOR network
Install TOR browser from
Visit the following link:
 
Instructions into WWW (The following link can not be in work state, if true, use TOR above):
Visit the following link:
 
15 Page will ask you for the key, here it is:
16 wDpD5d0Ed05S3tJC45jDH5YY9gTEyUKGmuj8JSDQyJf5ehKRPxphiaiG/wXkuY5B
zz1X3sgIZdwL0gQD78qXmFf16BMjsqG9078EXVLkp70bDXCCJ7587L50Da3PqLWu
eiDLg4vIJ02bAnIqSayLU5Hw1LHwlRSJ0grE038kD7Xk7C6I0WU7rF3+hB1yGRHK
wIXSiN6432ozEI/3g0tne5spubhFyzLm+4TYcMtXZVS3sBj9ZZ8vpEBRrI/pGsdy
NjFE6kB1Idvi6Yt70u978XA/pB+CyJlDfngeFq91UvQSwNmaimXL+lvvm5dzNZcE
c7sVTjFNWqYGnqEIxy6mXra7iaEzZ10Q0IK1xAihK3ZuiGB144MQvc6h8fLqTY4i
zXym2win1VUVkeC2HFkslkTsMHX7rccL5421/LTvoyrJqCaUV/svH9s6TIeAuddo
xbfQTN+RLOOoWINOU+giuiNSoh0Yuz3CazCjjg3VZCrFQ816dDS2x52lK6q4nQqr
2qBgjdKRrkA5uiDctpG2nR1fq8V7zcg5Ss6akGsd+zapviqSfJgPp\ZQVZtsZwEM
1TpeL3b+r7fR1IAYzkYV9krubZc9Qk0nYGv/uAUKobFi00qHImLB18sLr071X+mr
8FHVqnTBcfvE0le9Z3SF5ti8BkMQysYDi3dU7bx1evbhhYAt9dK0P11PhsAMydLm
HUxRwJ/ntUeJlEtocFKnULP7R1sr82omd2hwFTp8fbVU4CjaZto3Md1bZVAcLZa/
K8ScaaMDcUDNpx33lV56ICxqpfH5j1M37f1pDIWqYhrxf7ExQd+dATPc/zA0Wt7L
PJLVpDUwCtlk/LZgiO+e53SYL/zn75zSHm9RXYKNw/YNDSvt2iwgocPqiONJu1tn
rAWN5NnXf/jvto1Wsrt5gyyqThFMQ88J679U9h33R3LbNQp0gnfd8s33B2LIAoIn
 tC4IAubYn00LPUFTCQ1DIEoHQapGNNpuUI4bhFy0VPeFQthG8GND1KoSTbbJ6bjH
rxII9snbRasI/f0WlZabXfItdW2UhTPSJriQdIIQuaFWZ0njdjjncETsI1Jw7x3j
klIsbrDQ00eCL7dmo5NWg6nZtaf40JyYxUkBDudtdVwVRYZAEmk3hqHtExWYQYdz
7jDGhMyW8BNmJ0/2qyyqBXf6MuEQgblxFvyQthN9DMyTHQ==" → Described | CORRECT | While the ransom note text contains unique elements like a decryption key, its overall verbose and variable nature makes it more suitable as a descriptive indicator than a directly actionable one. |

| 33 | CVE-2019-2725 → Actionable | CORRECT | CVE identifiers are unique and can be matched exactly, making them actionable. |
| 34 | Sodinokibi ransomware → Mentioned | CORRECT | The malware family name is a conceptual reference not directly tied to a unique, actionable signature. |
| 35 | Gandcrab v5.2 → Mentioned | CORRECT | As with other malware family names, it’s a descriptive reference that lacks the specificity required for actionable detection. |

| 36 | `zero-day exploit` → `Mentioned` | CORRECT | The term is a generic reference to an exploit technique rather than a unique, matchable artifact. |
| 37 | `CVE-2019-2725` → `Actionable` | CORRECT | The CVE identifier is a unique vulnerability reference that can be directly used in detection. |
| 38 | `/_async/*` → `Actionable` | CORRECT | The URL path pattern is specific enough to be turned into a detection rule despite using a wildcard. |
| 39 | `/wls-wsat/*` → `Actionable` | CORRECT | The observable is a concrete URL path pattern that can be used directly in detection mechanisms. |
| 40 | `External HTTP POSTs to new URIs` → `Mentioned` | CORRECT | This is a generic description of network activity without a concrete indicator for automated detection. |
| 41 | `Ransomware "Canary" files` → `Mentioned` | CORRECT | The phrasing is generic, referring to indicator files conceptually rather than specifying a unique file name. |
| 42 | `Web shells` → `Mentioned` | CORRECT | The term is used conceptually to reference a category of malicious artifacts, not a unique identifier. |
| 43 | `WebLogic user` → `Mentioned` | CORRECT | The reference to a user account is generic and does not provide a specific, actionable indicator. |

| 44 | 0fa207940ea53e2b54a2b769d8ab033a6b2c5e08c78bf4d7dade79849960b54d → Actionable | CORRECT | The SHA-256 hash is a complete, unique identifier that is directly actionable for detection. |
| 45 | 34dffdb04ca07b014cdaee857690f86e490050335291ccc84c94994fa91e0160 → Actionable | CORRECT | The SHA-256 hash is a complete, unique identifier that is directly actionable for detection. |
| 46 | 74bc2f9a81ad2cc609b7730dbabb146506f58244e5e655cbb42044913384a6ac → Actionable | CORRECT | The SHA-256 hash is a complete, unique identifier that is directly actionable for detection. |
| 47 | 95ac3903127b74f8e4d73d987f5e3736f5bdd909ba756260e187b6bf53fb1a05 → Actionable | CORRECT | The SHA-256 hash is a complete, unique identifier that is directly actionable for detection. |
| 48 | fa2bccdb9db2583c2f9ff6a536e824f4311c9a8a9842505a0323f027b8b51451 → Actionable | CORRECT | The SHA-256 hash is a complete, unique identifier that is directly actionable for detection. |

| 49 | hxxp://188.166.74[.]218/office.exe → Actionable | CORRECT | It is a complete, unique URL (despite obfuscation) that can be directly matched by detection rules. |
| 50 | hxxp://188.166.74[.]218/radm.exe → Actionable | CORRECT | It is a fully specified URL that allows for exact matching in detection systems. |
| 51 | hxxp://188.166.74[.]218/untitled.exe → Actionable | CORRECT | The URL is complete and unique enough for automated detection despite the generic file name. |
| 52 | hxxp://45.55.211[.]79/.cache/untitled.exe → Actionable | CORRECT | It is a fully detailed URL with a specific path that supports actionable detection. |
| 53 | 130.61.54[.]136 → Actionable | CORRECT | The obfuscated IP address is complete and specific, making it directly usable in detection rules. |
| 54 | decryptor[.]top → Actionable | CORRECT | The domain name, although obfuscated, is complete and unique enough to be actionable for detections. |

| 55 | `CVE-2023-20198` → `Actionable` | CORRECT | The CVE identifier is a complete, unique vulnerability reference that can be directly matched. |
| 56 | `CVE-2023-20273` → `Actionable` | CORRECT | The CVE identifier is a complete, unique vulnerability reference that can be directly matched. |

===== ranking_results/ranking_results_3.txt =====
md file name: /content/validation/More than 150 countries affected by massive cyberattack, Europol says - The Washington Post.md

| 1 | @MalwareTechBlog → Actionable | CORRECT | The Twitter handle is a unique and complete identifier that can be directly matched for detection. |

| 2 | WanaCryptor 2.0 → Actionable | INCORRECT — should be "Described" because malware family names are ambiguous and require additional context for reliable automated detection. | Malware family names like "WanaCryptor 2.0" aren’t unique identifiers (unlike hashes or IPs) and can lead to false positives. |
| 3 | WannaCry → Actionable | INCORRECT — should be "Described" because generic malware names lack the specificity needed for precise automated detection. | As an alternate malware family name, "WannaCry" requires enrichment to be actionable rather than being directly matched. |
| 4 | Windows XP → Mentioned | CORRECT | "Windows XP" is referenced conceptually as an outdated platform and isn’t a unique, actionable detection artifact. |

md file name: /content/validation/Pick-Six_ Intercepting a FIN6 Intrusion, an Actor Recently Tied to Ryuk and LockerGoga Ransomware _ Google Cloud Blog.md

| 1 | FIN6 → Mentioned | CORRECT | "FIN6" is a threat actor group name referenced conceptually and not directly actionable. |
| 2 | Ryuk → Mentioned | CORRECT | "Ryuk" is a ransomware family name used descriptively, making it a conceptual reference rather than a detection indicator. |
| 3 | LockerGoga Ransomware → Mentioned | CORRECT | "LockerGoga Ransomware" is a descriptive label for a ransomware group, not a uniquely actionable technical indicator. |

| 4 | FIN6 → Mentioned | CORRECT | The threat actor group name "FIN6" is generic and not directly actionable via telemetry. |
| 5 | LockerGoga → Mentioned | CORRECT | The ransomware family name "LockerGoga" is a contextual reference and not a unique, actionable artifact. |
| 6 | Ryuk → Mentioned | CORRECT | The ransomware family name "Ryuk" serves as a context indicator rather than a direct detection artifact. |

| 7 | FIN6 → Mentioned | CORRECT | Threat actor aliases are referenced conceptually and are not directly actionable. |
| 8 | Cobalt Strike → Described | CORRECT | The tool’s name is generic and requires additional context for actionable detection. |
| 9 | Metasploit → Described | CORRECT | As a reference to a tool, it is described rather than a unique, directly matchable indicator. |
| 10 | Adfind → Described | CORRECT | A publicly available reconnaissance tool name that is too generic to be actionable on its own. |
| 11 | 7-Zip → Described | CORRECT | The reference to the compression tool is generic and needs more details for a detection rule. |
| 12 | FireEye Endpoint Security → Described | CORRECT | A commercial security product name is descriptive and not directly usable in automated detections. |
| 13 | Windows Registry artifacts → Described | CORRECT | This generic phrase refers to a broad category of artifacts and isn’t a specific indicator. |
| 14 | suspicious SMB connections → Described | CORRECT | The phrase is a generic behavioral description that requires additional enrichment to detect. |
| 15 | malicious Windows services → Described | CORRECT | The term is a general description of unauthorized services rather than a specific matchable string. |
| 16 | PowerShell commands → Described | CORRECT | A broad reference to commands that is too ambiguous for direct, automated detection. |
| 17 | Windows Event Log entries → Described | CORRECT | The description is generic, covering a wide range of log events and not a unique indicator. |
| 18 | Windows Registry Shellbag entries → Described | CORRECT | As a forensic artifact category, it is descriptive and requires additional context for detection. |

| 19 | hxxps://176.126.85[.]207:443/7sJh → Actionable | CORRECT | The URL is a complete, unique indicator that can be directly matched in detection systems. |
| 20 | hxxps://176.126.85[.]207/ca → Actionable | CORRECT | It is a fully specified download URL that can be used verbatim in detection rules. |
| 21 | 176.126.85[.]207 → Actionable | CORRECT | The IP address is a complete identifier that can be directly applied in automated detection. |
| 22 | IXiCDtPbtGWnrAGQ → Actionable | CORRECT | The Windows service name is provided in full, making it a unique indicator suitable for direct matching. |
| 23 | /ilX9zObq6LleAF8BBdsdHwRjapd8 1Tl4Y-9Rc6hMbPXHPgVTWTtb0xfb7BplyC1Lia31F5gCN btvkad7aR2JF5ySRLZmTtY → Actionable | CORRECT | The exact, uniquely randomized URL path can be leveraged directly in detection rules. |
| 24 | 443 → Mentioned | CORRECT | A common network port number is too generic and typically only noted conceptually rather than used for direct detection. |

| 25 | `adfind.exe` → `Described` | CORRECT | The executable’s name is generic and non‐unique, making it appropriate for a Described rank. |
| 26 | `ad users.txt` → `Described` | CORRECT | The output file’s name is generic and context‐dependent, hence not directly actionable. |
| 27 | `ad computers.txt` → `Described` | CORRECT | The file name is descriptive but generic, aligning with the Described rank. |
| 28 | `ad ous.txt` → `Described` | CORRECT | The file is a generic output file from adfind.exe, fitting the Described classification. |
| 29 | `ad subnets.txt` → `Described` | CORRECT | The name is a generic output file description and doesn’t uniquely identify a threat. |
| 30 | `ad group.txt` → `Described` | CORRECT | The file name is generic and only descriptive of its intended content. |
| 31 | `ad trustdmp.txt` → `Described` | CORRECT | The file is a generic output artifact that does not serve as a unique indicator. |
| 32 | `7.exe` → `Described` | CORRECT | The executable’s name is common and generic, making it suitable for a Described rank. |
| 33 | `ad.7z` → `Described` | CORRECT | The compressed archive filename is generic and only descriptive of its contents. |
| 34 | `ad` → `Described` | CORRECT | The directory name is ambiguous and generic, appropriately classified as Described. |

| 35 | FIN6 → Mentioned | CORRECT | Threat actor names are generic and not directly actionable via telemetry. |
| 36 | Ryuk → Mentioned | CORRECT | A ransomware family name is conceptual and not unique enough for direct automated detection. |
| 37 | LockerGoga ransomware → Mentioned | CORRECT | The ransomware variant reference is generic and cannot be directly used in detection rules. |

| 38 | encoded PowerShell commands → Described | CORRECT | It’s a generic description without a specific encoded string, so it isn’t precise enough for automated detection. |
| 39 | Cobalt Strike → Actionable | INCORRECT — should be "Described" because the tool’s name is generic and can lead to high false‑positive rates without unique identifiers. | As a common commercial tool, "Cobalt Strike" requires additional contextual nuance to drive actionable detection. |
| 40 | psexec → Described | CORRECT | It’s a well-known command that is used both maliciously and legitimately, indicating the need for further enrichment. |
| 41 | hxxps://pastebin[.]com → Actionable | INCORRECT — should be "Described" because the obfuscated URL represents a generic domain that may yield high false‑positives. | Its generic nature (a common paste site) requires additional context before it can be reliably used for detection. |

| 42 | kill.bat → Described | CORRECT | The batch file name “kill.bat” is a concrete observable but is generic enough that detection would require additional context. |
| 43 | xaa.bat → Described | CORRECT | “xaa.bat” is a complete file name that, on its own, is ambiguous and fits the “Described” classification. |
| 44 | xab.bat → Described | CORRECT | As with the other batch file names, “xab.bat” is a specific file name but too common to drive automated detection without context. |
| 45 | xac.bat → Described | CORRECT | The file “xac.bat” follows the naming convention observed in the malware distribution context, making it described rather than uniquely actionable. |
| 46 | LockerGoga ransomware → Mentioned | CORRECT | The observable names a known ransomware family conceptually, which cannot be uniquely tied to a detection rule. |
| 47 | psexec → Mentioned | CORRECT | “psexec” refers to a legitimate, widely used tool and is thus only conceptually referenced, not suitable for direct automated detection. |
| 48 | mstdc → Actionable | CORRECT | “mstdc” is an anomalous, complete service name that is specifically deployed for malicious purposes and can be directly monitored. |
| 49 | msdtc → Described | CORRECT | The legitimate Windows executable “msdtc” is too common to act as a unique indicator, aligning with the “Described” rank. |

| 50 | svchost.exe → Described | CORRECT | The file name is generic and ambiguous, requiring additional context for reliable detection. |
| 51 | \\10.1.1.1\c$\w → Actionable | CORRECT | The UNC path is complete and specific, including a precise IP address and share, making it uniquely actionable. |

| 52 | Lockersoya → Mentioned | CORRECT | It’s a family name reference without a unique, matchable detection pattern. |
| 53 | 1024-bit RSA → Mentioned | CORRECT | It describes an encryption specification rather than a concrete, actionable indicator. |
| 54 | 128-bit AES → Mentioned | CORRECT | It denotes a key length spec, which is conceptual and non‑searchable. |
| 55 | Ryuk → Mentioned | CORRECT | It is a ransomware family name used for attribution, not a unique detection string. |
| 56 | LockerGoga → Mentioned | CORRECT | It’s merely a reference to a malware family and lacks actionable uniqueness. |
| 57 | 18-00015730 → Mentioned | CORRECT | It’s a CTI report identifier used for reference and not directly matchable by detection systems. |
| 58 | 19-00002005 → Mentioned | CORRECT | It’s a report ID reference and does not translate into an automated detection indicator.

| 59 | FIN6 → Mentioned | CORRECT | "FIN6" is a threat actor group's name used conceptually, not as a unique or matchable detection string. |
| 60 | Ryuk → Mentioned | CORRECT | "Ryuk" is a ransomware family name referenced without actionable detection details. |
| 61 | LockerGoga → Mentioned | CORRECT | "LockerGoga" is simply the name of a ransomware family and not a complete unique indicator suitable for automated detection. |
| 62 | TRINITY → Mentioned | CORRECT | "TRINITY" is a malware family name mentioned in the report, lacking direct actionable attributes. |

| 63 | 31.220.45 . [151 → Actionable | CORRECT | The obfuscated IP can be normalized by removing extra spaces and brackets, making it a unique indicator. |
| 64 | 46.166.173[.]109 → Actionable | CORRECT | The indicator uses a standard [.] obfuscation that is trivial to reverse. |
| 65 | 62.210.136 . 65 → Actionable | CORRECT | Extra spaces are a trivial obfuscation allowing direct normalization to an IPv4 address. |
| 66 | 89.105.194[.]236 → Actionable | CORRECT | This obfuscated IPv4 address is complete after a trivial transform. |
| 67 | 93.115.26 .   171 → Actionable | CORRECT | Despite excess whitespace, it can be normalized to a valid IPv4 address. |
| 68 | 103.73.65[.] 116 → Actionable | CORRECT | A simple removal of the extra space makes this IPv4 indicator actionable. |
| 69 | 176.126.85 .  207 → Actionable | CORRECT | The extra spaces are trivial to remove, yielding a concrete IPv4 address. |
| 70 | 185.202.1741.131 → Actionable | INCORRECT — should be "Described" because the misformatted IP (missing a separating dot) requires non‐trivial correction before it can be reliably matched. | The formatting error prevents direct automated matching without enrichment. |
| 71 | 185.202.174[.]41 → Actionable | CORRECT | The standard [.] obfuscation makes the IPv4 address directly actionable. |
| 72 | 185.202.174[.]44 → Actionable | CORRECT | The indicator is obfuscated in a standard, reversible way for IPv4 addresses. |
| 73 | 185.202.174[.]80 → Actionable | CORRECT | This obfuscated IP follows a trivial pattern and is directly actionable. |
| 74 | 185.202.1741.184 → Actionable | INCORRECT — should be "Described" because its misformatted structure (lack of a proper dot) necessitates additional correction. | The formatting error requires further enrichment before it can be used as a detection indicator. |
| 75 | 185.202.174[.]91 → Actionable | CORRECT | Standard obfuscation is applied, making it actionable after trivial normalization. |
| 76 | 185.222.2111.J98 → Actionable | INCORRECT — should be "Described" because the indicator’s segments mix extra digits and alphabetic characters, rendering it an ambiguous and misformatted IP. | The non‐standard numeric parts and inclusion of letter “J” mean the indicator isn’t directly matchable. |
| 77 | hxxps://176.126.85[.]207:443/7sJh → Actionable | CORRECT | The obfuscated URL can be exactly mapped after trivial deobfuscation (hxxps→https, [.]→.) making it actionable. |
| 78 | hxxps://176.126.85[.]207/ca → Actionable | CORRECT | The URL uses standard obfuscation techniques that allow a detection rule to be built. |
| 79 | HXXpS://pastepin[.jcom/raw/0vorum → Actionable | CORRECT | Despite the unusual domain spelling, it is a complete, unique indicator that can be normalized. |
| 80 | hxxps://pastebin[.]com/raw/YAm4Qn → Actionable | CORRECT | This standard obfuscated pastebin URL is fully actionable. |
| 81 | hxxps://pastebin[.]com/raw/p5U9siC → Actionable | CORRECT | The URL is complete and unique after trivial deobfuscation. |
| 82 | hxxps://pastebin[.]com/raw/BKVLHW → Actionable | CORRECT | The obfuscation does not impair the uniqueness of the URL, making it actionable. |
| 83 | hxxps://pastebin[.]com/raw/HPpvY0( → Actionable | INCORRECT — should be "Described" because the trailing '(' is an unexpected character that requires normalization before it can be reliably matched. | The extra punctuation makes the URL misformatted and unsuitable for direct detection. |
| 84 | hxxps://pastebin[.]com/raw/L4LQQf> → Actionable | INCORRECT — should be "Described" because the unexpected '>' at the end necessitates additional processing prior to use in detection. | The trailing character renders the URL ambiguous without further normalization. |
| 85 | hxxps://pastebin[.jcom/raw/YAm4Qn → Actionable | CORRECT | Although the domain is unusual, it remains a unique, complete indicator suitable for detection. |
| 86 | hxxps://pastebin[.]com/raw/tDAbbY5 → Actionable | CORRECT | The pastebin URL is complete and obfuscated in a standard, actionable manner. |
| 87 | hxxps://pastebin[.]com/raw/u9yYjTr7 → Actionable | CORRECT | This indicator is fully specified after deobfuscation and is thus actionable. |
| 88 | hxxps://pastebin[.]com/raw/wrehJuG → Actionable | CORRECT | The unique token in the obfuscated URL makes it directly actionable. |
| 89 | hxxps://pastebin[.]com/raw/Bber9jae → Actionable | CORRECT | Standard obfuscation of the URL yields a unique, actionable indicator. |
| 90 | 031dd207c8276bcc5b41825f0a3e31b → Actionable | INCORRECT — should be "Described" because the hash appears truncated (missing a character) and is therefore not a complete, matchable indicator. | An incomplete hash requires additional verification before it can drive an automated detection rule. |
| 91 | 0f9931210bde86753d0f4a9abc5611f → Actionable | CORRECT | This MD5 hash has the expected length and valid hexadecimal format. |
| 92 | 12597de0e709e44442418e89721b911 → Actionable | CORRECT | The hash is complete and well‐formed for actionable use. |
| 93 | 32ea267296c8694c0b5f5baeacf34bt → Actionable | INCORRECT — should be "Described" because the inclusion of a non‐hex character (‘t’) makes the hash malformed. | The error in the hash prevents it from being directly used in an automated detection rule. |
| 94 | 395d52f738eb75852fe501df13231c8d → Actionable | CORRECT | This MD5 hash is complete and valid, making it directly actionable. |
| 95 | 39b7c130f1a02665fd72d65f4f9cb63 → Actionable | CORRECT | The hash is properly formatted and meets the criteria for direct detection. |
| 96 | 3c5575ce80e0847360cd2306c64b5 → Actionable | INCORRECT — should be "Described" because its length is shorter than expected for a full MD5 hash. | A truncated hash cannot be relied upon for exact matching without further validation. |
| 97 | 46d781620afc536afa2538150405961 → Actionable | CORRECT | The hash is fully formed with the correct number of hexadecimal characters. |
| 98 | 4ec86a35f6982e6545b771376a6f65b → Actionable | INCORRECT — should be "Described" because the hash is incomplete, missing characters required for a valid MD5 indicator. | Its truncated length renders it unreliable for exact automated matching. |
| 99 | 73e7ddd6b49cdaa982ea8cb578f3af → Actionable | INCORRECT — should be "Described" because its character count is inconsistent with a complete MD5 hash. | The insufficient length implies it may be truncated or malformed. |
| 100 | 8452d52034d3b2cb612dbc59ed609 → Actionable | INCORRECT — should be "Described" because the hash appears incomplete and does not meet the standard MD5 length. | A truncated hash requires additional enrichment prior to use in detection. |
| 101 | 8c099a15a19b6e5b29a3794abf8a58 → Actionable | INCORRECT — should be "Described" because the provided hash is missing characters, making it incomplete for automated matching. | Its incorrect length makes it ambiguous and unsuitable for direct use. |
| 102 | 9d3fdb1e370c0ee6315b4625ecf2act → Actionable | INCORRECT — should be "Described" because it contains invalid non‐hexadecimal characters, rendering the hash malformed. | The inclusion of a non‐hex character prevents reliable automated detection. |
| 103 | d2f9335a305440d91702c803b6d04 → Actionable | INCORRECT — should be "Described" because the hash is incomplete and likely truncated, failing to meet expected format. | Its shortened length precludes it from being used directly in a detection rule. |
| 104 | 34187a34d0a3c5d63016c26346371b → Actionable | INCORRECT — should be "Described" because its length is lower than that of a full MD5 hash, suggesting truncation. | The incomplete hash format makes it unsuitable for exact matching. |
| 105 | ad users.txt → Described | CORRECT | The filename is generic and ambiguous, providing insufficient context for automated detection. |
| 106 | ad_trustdmp.txt → Described | CORRECT | This generic file name is not unique enough to be directly actionable. |
| 107 | ad subnets.txt → Described | CORRECT | The filename is generic and requires additional context, so it is not actionable. |
| 108 | ad ous.txt → Described | CORRECT | A generic file name that cannot be used directly for precise detection. |
| 109 | 7.exe → Described | CORRECT | The executable name is too generic to serve as a unique, actionable indicator. |
| 110 | Kill.bat → Described | CORRECT | As a common batch file name, it is ambiguous and only described. |
| 111 | Svchost.exe → Described | CORRECT | Being a common system file name, it lacks the uniqueness needed for actionability. |
| 112 | Mstdc.exe → Described | CORRECT | Despite potential suspicions, the filename is generic and requires additional enrichment for detection. |

| 113 | `METASPLOIT A (METHODOLOGY)` → `Described` | CORRECT | It is a detection name from a CTI table that describes a methodology rather than being a unique, actionable artifact. |
| 114 | `SUSPICIOUS POWERSHELL USAGE (METHODOLOGY)` → `Described` | CORRECT | As a detection label indicating a behavior, it isn’t a unique indicator and thus fits the Described rank. |
| 115 | `BEACON A (FAMILY)` → `Described` | CORRECT | It categorizes a threat family in the CTI detection table and does not yield a concrete, actionable artifact. |
| 116 | `SYSNATIVE ALIAS RUNDLL32.EXE (METHODOLOGY)` → `Described` | CORRECT | This is a detection name detailing a method rather than a specific, unique, matchable artifact, so Described is appropriate. |
| 117 | `FE Ransomware Win64 Ryuk 1` → `Described` | CORRECT | It is a CTI detection label that requires context to be actionable, thus the Described rank fits. |
| 118 | `FE Ransomware Win LOCKERGOG` → `Described` | CORRECT | As a detection name from a CTI table, it is ambiguous without further contextual indicators, so Described is proper. |
| 119 | `FE Ransomware Win32 LOCKERGC` → `Described` | CORRECT | This label acts as a detection name rather than a precise artifact, making the Described rank suitable. |
| 120 | `FE Ransomware Win64 LOCKERGC` → `Described` | CORRECT | It designates a CTI detection name that is non‑unique by itself, hence the Described designation. |
| 121 | `CVE-2025-22457` → `Actionable` | CORRECT | A CVE identifier is a complete, standardized artifact that can be directly used in detection rules. |

md file name: /content/validation/WCry (WannaCry) Ransomware Analysis _ Secureworks.md

| 1 | "WCry" → "Mentioned" | CORRECT | The value is a malware campaign alias, a conceptual reference rather than a unique, actionable indicator. |
| 2 | "WanaCry" → "Mentioned" | CORRECT | It is an alias for the ransomware campaign, serving as a conceptual reference and not a directly actionable IOC. |
| 3 | "WanaCrypt" → "Mentioned" | CORRECT | Like the others, it’s a campaign alias and does not provide a unique string for automated detection. |
| 4 | "Wana DecryptOr" → "Mentioned" | CORRECT | As an alias for the ransomware campaign, it remains a general reference without actionable specificity. |
| 5 | "Windows Server Message Block (SMB) v1 protocol" → "Mentioned" | CORRECT | This observable refers to a standard network protocol, making it a conceptual reference rather than a unique detection string. |
| 6 | "Security Bulletin MS17-010" → "Mentioned" | CORRECT | The bulletin reference is an advisory rather than a concrete, actionable detection indicator. |

| 7 | "DoublePulsar backdoor" → Actionable | INCORRECT — should be "Described" because the string is a generic, descriptive label rather than a precise, unique indicator that can be matched directly. | It describes a known backdoor but isn’t a complete, unambiguous identifier for automated detection. |
| 8 | "Eternalblue SMBv1 exploit" → Actionable | INCORRECT — should be "Described" because it denotes a generic exploitation method rather than a concrete, uniquely matchable indicator. | It identifies an exploitation technique (Eternalblue) but lacks the specificity needed for direct detection. |
| 9 | "C:\Windows\mssecsvc.exe" → Actionable | CORRECT | It is a complete file path that can be directly matched by detection systems. |
| 10 | "C:\Windows\tasksche.exe" → Actionable | CORRECT | It is an exact file path indicator that is distinct and actionable for detection. |
| 11 | "PlayGame" → Actionable | CORRECT | As the single exported function from the malicious DLL payload, it serves as a unique and concrete indicator of compromise. |

| 12 | taskse.exe → Actionable | CORRECT | This is a complete, unique executable filename that can be directly matched. |
| 13 | WNcry@2ol7 → Actionable | CORRECT | The password is a complete string that can be used for exact matching in detection. |
| 14 | b.wnry → Actionable | CORRECT | The bitmap image filename is distinct and fully specified for detection. |
| 15 | c.wnry → Actionable | CORRECT | As a complete configuration file name, it is directly matchable. |
| 16 | r.wnry → Actionable | CORRECT | The ransom demand text file’s name is a unique artifact that can be precisely matched. |
| 17 | s.wnry → Actionable | CORRECT | This archive file name is complete and specific enough to be used in detection. |
| 18 | t.wnry → Actionable | CORRECT | The DLL filename is fully specified and serves as a unique indicator. |
| 19 | u.wnry → Actionable | CORRECT | The executable file name is a unique, exact string keying on the ransomware sample. |
| 20 | taskdl.exe → Actionable | CORRECT | It is a precise executable filename that can be directly detected. |
| 21 | msg → Actionable | INCORRECT — should be "Described" because the directory name "msg" is too generic and lacks inherent uniqueness for direct automated detection. | Generic folder names are ambiguous and may yield false positives. |
| 22 | 0000000.pky → Actionable | CORRECT | The public key file’s name is complete and specific to the malware artifact. |
| 23 | 00000000.res → Actionable | CORRECT | This file used for C2 communication is a fully specified and unique filename. |
| 24 | 0000000.eky → Actionable | CORRECT | The key file name is exact and can be directly used in detection rules. |
| 25 | 0000000.dky → Actionable | CORRECT | The decrypted RSA private key filename is a complete indicator for detection. |
| 26 | f.wnry → Actionable | CORRECT | This malware file’s name is uniquely associated with the observed ransomware campaign. |
| 27 | @WanaDecryptor@.exe → Actionable | CORRECT | The distinctive use of special characters makes this executable filename a direct detection indicator. |
| 28 | @Please_Read_Me@.txt → Actionable | CORRECT | The ransom note file’s name is specific and complete for matching purposes. |
| 29 | attrib +h . → Actionable | CORRECT | The command snippet is fully specified and can be matched directly in logs. |
| 30 | icacls . /grant Everyone:F /T /C /Q → Actionable | CORRECT | This exact shell command string to modify permissions is directly actionable. |
| 31 | cmd.exe /c vssadmin delete shadows /all /quiet &
wmic shadowcopy delete &
bcdedit /set {default} bootstatuspolicy ignoreallfailures &
bcdedit /set {default} recoveryenabled no &
wbadmin delete catalog -quiet → Actionable | CORRECT | The complete block of commands is fully specified and can be directly used as a detection indicator. |
| 32 | 4663149485937.bat → Actionable | CORRECT | The batch file’s uniquely randomized name makes it a complete, matchable indicator. |
| 33 | @echo off
echo SET ow = WScript.CreateObject ("WScript.Shell")> m.vbs
echo SET on = ow.CreateShortcut("C:\Users\Stephen\AppData\Local\Temp\(ManaDecryptore.exe.lnk")>> m.vbs
echo om.TargetPath = "C:\Users\Stephen\AppData\Local\Temp\@WanaDecryptor0.exe">> m.vbs
echo om. Save>> m.vbs
cscript.exe / / nologo m.vbs
del m.vbs
del /a %0 → Actionable | CORRECT | This full batch script is a concrete code snippet that can be directly matched by detection systems. |
| 34 | taskkill.exe /f /im mysqld.exe → Actionable | CORRECT | The shell command to terminate mysqld.exe is fully specified and uniquely matchable. |
| 35 | taskkill.exe /f /im sqlwriter.exe → Actionable | CORRECT | This command is complete and can be exactly used for detection purposes. |
| 36 | taskkill.exe /f /im sqlserver.exe → Actionable | CORRECT | The command is fully specified, making it a unique and actionable indicator. |
| 37 | taskkill.exe /f /im MSExchange* → Actionable | CORRECT | Even with the wildcard, the command is specific enough to be used for detection in its context. |
| 38 | taskkill.exe /f /im Microsoft.Exchange.* → Actionable | CORRECT | Despite the regex element, this shell command is a complete indicator for actionable detection. |
| 39 | 12t9YDPgwueZ9NyMgw519p7AA8isjr6SMw → Actionable | CORRECT | The Bitcoin address is a unique, complete string that can be directly matched. |
| 40 | | Wana DecryptOr 2.0                               | … (ransom note interface text capturing the WCry demand) → Described | CORRECT | The ransom note interface is a comprehensive capture and serves as a descriptive artifact rather than a directly actionable string. |
| 41 | C:\Users\Stephen\AppData\Local\Temp\(ManaDecryptore.exe.lnk → Actionable | CORRECT | The shortcut file path is a fully specified file artifact suitable for direct matching. |
| 42 | C:\Users\Stephen\AppData\Local\Temp\@WanaDecryptor0.exe → Actionable | CORRECT | The explicit executable file path is an exact indicator that can be readily detected. |
| 43 | m.vbs → Actionable | INCORRECT — should be "Described" because the filename "m.vbs" is too short and generic, making it ambiguous for direct automated detection. | As a single-letter filename, it lacks uniqueness and may produce false positives in detection rules. |

| 44 | fwd'' → Actionable | CORRECT | The registry value is a unique, complete string used to store WCry's working directory. |
| 45 | \SOFTWARE\WanaCryptOr → Actionable | CORRECT | The registry key string is complete and specific enough to be directly matched. |
| 46 | HKLM → Mentioned | CORRECT | HKLM is a generic registry hive and not unique enough for automated detection. |
| 47 | HKCU → Mentioned | CORRECT | HKCU is a common registry hive identifier, making it only conceptually useful. |
| 48 | Computer\HKEY_LOCAL_MACHINE\SOFTWARE\WanaCrypt0r → Actionable | CORRECT | This full registry key is specific and unique, suitable for direct detection. |
| 49 | Computer\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run → Mentioned | CORRECT | Although fully specified, the Run registry key is generic and common to most systems. |
| 50 | C:\Users\Stephen\AppData\Local\Temp → Described | CORRECT | The file path is complete but refers to a common Temp directory, requiring additional context for detection. |
| 51 | ab"  lamqlvksrbhpas380 → Actionable | CORRECT | The randomized registry value is distinct and can be matched directly. |
| 52 | C:\Users\Stephen\AppData\Local\Temp\tasksche.exe → Actionable | CORRECT | The file path is a precise indicator of the executable associated with WCry persistence. |

| 53 | RSA → Mentioned | CORRECT | “RSA” is a generic reference to a cryptographic algorithm and isn’t a unique, directly matchable string. |
| 54 | AES → Mentioned | CORRECT | “AES” is a common cryptographic algorithm name and is used only conceptually rather than as a unique indicator. |
| 55 | Windows Crypto AP → Mentioned | CORRECT | The term refers to a Windows API used in cryptography and is a conceptual reference rather than a uniquely actionable string. |
| 56 | Global\MsWinZonesCacheCounterMutexA → Actionable | CORRECT | The mutex string is a complete, unique identifier that can be directly used in detection rules. |
| 57 | .der → Described | CORRECT | The .der extension is generic and described in context; additional enrichment is needed before it can drive detection. |
| 58 | .pfx → Described | CORRECT | This is a common file extension for certificate files and is appropriately marked as described. |
| 59 | .key → Described | CORRECT | The .key extension is generic and referenced in context, so it is not directly actionable. |
| 60 | .crt → Described | CORRECT | The .crt extension is a standard certificate file format and is correctly described rather than uniquely actionable. |
| 61 | .csr → Described | CORRECT | As a common certificate signing request extension, it is described with context and not meant for direct matching. |
| 62 | .p12 → Described | CORRECT | The .p12 extension is generic and is described as one of the targeted file types by WCry. |
| 63 | .pem → Described | CORRECT | This generic cryptographic file extension is given context but isn’t unique enough for automated detection. |
| 64 | .odt → Described | CORRECT | The .odt extension is a standard document file extension targeted by WCry and is appropriately described. |
| 65 | .ott → Described | CORRECT | The .ott extension is a common template format and is noted in context, requiring further enrichment to act upon. |
| 66 | .sxw → Described | CORRECT | .sxw is a generic file extension mentioned in the context of WCry targeting and is not uniquely actionable. |
| 67 | .stw → Described | CORRECT | The .stw extension is described as a targeted file type and is not unique enough to be actionable on its own. |
| 68 | .uot → Described | CORRECT | Although noted in the WCry context, .uot is a generic file extension that needs further contextual enrichment. |
| 69 | .3ds → Described | CORRECT | A common file extension for 3D models, it is described with context rather than used directly for detection. |
| 70 | .max → Described | CORRECT | The .max extension is generic and is described in the report as being targeted by WCry ransomware. |
| 71 | .3dm → Described | CORRECT | The .3dm extension is a common format noted in context, so it is marked as described. |
| 72 | .ods → Described | CORRECT | As a standard spreadsheet file extension, .ods is described with context and isn’t a unique indicator. |
| 73 | .ots → Described | CORRECT | The .ots extension is a generic file type mentioned as targeted, thus correctly rated as described. |
| 74 | .sxc → Described | CORRECT | The .sxc file extension is generic and is only provided with contextual description. |
| 75 | .stc → Described | CORRECT | The .stc extension is described in context and is not uniquely actionable. |
| 76 | .dif → Described | CORRECT | A generic file extension for data interchange formats, .dif is described with additional context. |
| 77 | .slk → Described | CORRECT | The .slk extension is a common spreadsheet link format that is appropriately described. |
| 78 | .wb2 → Described | CORRECT | .wb2 is a generic file extension noted in the context of WCry targeting, making it descriptive. |
| 79 | .odp → Described | CORRECT | The .odp extension, common for presentation files, is described rather than being a unique indicator. |
| 80 | .otp → Described | CORRECT | .otp is a generic file extension provided with context and thus is marked as described. |
| 81 | .sxd → Described | CORRECT | The .sxd extension is noted as targeted by WCry but is generic enough to require enrichment. |
| 82 | .std → Described | CORRECT | As a common file extension, .std is described with sufficient context for WCry but is not directly matchable. |
| 83 | .uop → Described | CORRECT | The .uop extension is a generic file extension described in relation to WCry ransomware targeting. |
| 84 | .odg → Described | CORRECT | .odg is a standard graphics file extension that is described in the WCry context. |
| 85 | .sxm → Described | CORRECT | This generic file extension is provided with context and is correctly marked as described. |
| 86 | .mml → Described | CORRECT | The .mml extension is generic and described as one of the targeted file types by WCry. |
| 87 | .lay → Described | CORRECT | .lay is a common file extension for layout files and is appropriately described with contextual usage. |
| 88 | .lay6 → Described | CORRECT | The .lay6 extension is treated generically and is described in the context of WCry targeting. |
| 89 | .asc → Described | CORRECT | Although .asc often indicates an armored file, here it is simply described as a targeted extension by WCry. |
| 90 | .sqlite3 → Described | CORRECT | The .sqlite3 extension is generic and is described with context about WCry’s targeting. |
| 91 | .sqlitedb → Described | CORRECT | A generic database file extension, it’s described in context and is not uniquely actionable. |
| 92 | .sql → Described | CORRECT | The .sql extension is generic and is appropriately described in the WCry targeting documentation. |
| 93 | .accdb → Described | CORRECT | .accdb is a common database file extension and is described with sufficient context. |
| 94 | .mdb → Described | CORRECT | The .mdb extension is generic to Microsoft Access databases and is correctly marked as described. |
| 95 | .dbf → Described | CORRECT | .dbf is a generic database file extension noted in the WCry context, so it is described. |
| 96 | .odb → Described | CORRECT | The .odb extension is generic and is only given descriptive context regarding WCry targeting. |
| 97 | .frm → Described | CORRECT | A common file extension for forms, .frm is described with WCry context and is not actionable on its own. |
| 98 | .myd → Described | CORRECT | The .myd extension is generic and is appropriately described in relation to WCry ransomware. |
| 99 | .myi → Described | CORRECT | As a common file extension for MySQL index files, .myi is described rather than directly actionable. |
| 100 | .ibd → Described | CORRECT | The .ibd extension is generic and provided with contextual information, so it is described. |
| 101 | .mdf → Described | CORRECT | .mdf is a common database file extension that is described, not serving as a unique indicator. |
| 102 | .ldf → Described | CORRECT | The .ldf extension is generic and is appropriately described with context about WCry targeting. |
| 103 | .sln → Described | CORRECT | .sln is a common solution file extension and is described in the context of WCry ransomware. |
| 104 | .suo → Described | CORRECT | The .suo extension is generic and is given descriptive context regarding WCry targeting. |
| 105 | .cpp → Described | CORRECT | .cpp is a common source code file extension and is described as one of the targeted types by WCry. |
| 106 | .pas → Described | CORRECT | The .pas extension is generic and described with context, making it appropriately non‐actionable on its own. |
| 107 | .asm → Described | CORRECT | .asm is a generic file extension for assembly code and is correctly listed as described. |
| 108 | .cmd → Described | CORRECT | The .cmd extension, common for command scripts, is described with contextual targeting and is non‐unique. |
| 109 | .bat → Described | CORRECT | .bat is a generic batch file extension and is described in context rather than as a unique indicator. |
| 110 | .ps1 → Described | CORRECT | The .ps1 extension for PowerShell scripts is generic and described with additional context. |
| 111 | .vbs → Described | CORRECT | .vbs is a common script file extension that is described in relation to WCry ransomware targeting. |
| 112 | .dip → Described | CORRECT | The .dip extension is generic and is appropriately described with contextual detail about targeting. |
| 113 | .dch → Described | CORRECT | Although non‐standard, .dch is treated as a generic file extension described in the WCry context. |
| 114 | .jsp → Described | CORRECT | The .jsp extension is generic, and its inclusion as a targeted file type is adequately descriptive. |
| 115 | .php → Described | CORRECT | .php is a common web‐file extension and is described in the context of WCry ransomware targeting. |
| 116 | .asp → Described | CORRECT | The .asp extension is generic and provided with context, so it’s appropriately marked as described. |
| 117 | .java → Described | CORRECT | .java is a common source file extension described with context and is not uniquely actionable. |
| 118 | .jar → Described | CORRECT | The .jar extension is generic and is described as part of WCry’s targeting, requiring enrichment for detection. |
| 119 | .class → Described | CORRECT | .class is a standard file extension for Java bytecode and is described rather than being a unique identifier. |
| 120 | .mp3 → Described | CORRECT | The .mp3 extension is generic and described with reference to WCry ransomware targeting. |
| 121 | .wav → Described | CORRECT | .wav is a common audio file extension and is appropriately described in this context. |
| 122 | .swf → Described | CORRECT | The .swf extension is generic and is described with context about WCry ransomware targeting flash files. |
| 123 | .fla → Described | CORRECT | .fla is a common flash source file extension and is described rather than used as a unique indicator. |
| 124 | .wmv → Described | CORRECT | The .wmv extension is generic and is described as a targeted file type by WCry ransomware. |
| 125 | .mpg → Described | CORRECT | .mpg is a generic video file extension and is described with contextual targeting by WCry. |
| 126 | .vob → Described | CORRECT | The .vob extension is a standard video file extension and is correctly marked as described. |
| 127 | .mpeg → Described | CORRECT | .mpeg is a generic video file extension, described in the context of WCry ransomware targeting. |
| 128 | .asf → Described | CORRECT | The .asf file extension is generic and is described with sufficient context regarding WCry targeting. |
| 129 | .avi → Described | CORRECT | .avi is a common video file extension and is described rather than being directly actionable. |
| 130 | .mov → Described | CORRECT | The .mov extension is generic and is correctly described in the WCry ransomware context. |
| 131 | .mp4 → Described | CORRECT | .mp4 is a widely used video file extension and is described with additional context. |
| 132 | .3gp → Described | CORRECT | The .3gp extension is generic and is described as one of the file types targeted by WCry. |
| 133 | .mkv → Described | CORRECT | .mkv is a common video file extension and is appropriately described in context. |
| 134 | .3g2 → Described | CORRECT | The .3g2 extension is generic and is described with respect to WCry ransomware targeting. |
| 135 | .flv → Described | CORRECT | .flv is a generic flash video file extension and is correctly described as targeted by WCry. |
| 136 | .wma → Described | CORRECT | The .wma extension is common and is described as one of the file types affected by WCry ransomware. |
| 137 | .mid → Described | CORRECT | .mid is a generic music file extension and is described with context rather than as a unique indicator. |
| 138 | .m3u → Described | CORRECT | The .m3u extension is generic and is appropriately described in the WCry ransomware targeting context. |
| 139 | .m4u → Described | CORRECT | .m4u is a generic file extension that is described as being targeted by WCry. |
| 140 | .djvu → Described | CORRECT | The .djvu extension is generic and is described as a targeted file type by WCry ransomware. |
| 141 | .svg → Described | CORRECT | .svg is a common vector image file extension and is described in the context of WCry targeting. |
| 142 | .psd → Described | CORRECT | The .psd extension is generic for Photoshop files and is correctly described with context. |
| 143 | .nef → Described | CORRECT | .nef is a generic raw image file extension and is described as targeted by WCry ransomware. |
| 144 | .tiff → Described | CORRECT | The .tiff extension is generic and is properly described in the WCry targeting documentation. |
| 145 | .cgm → Described | CORRECT | .cgm is a generic file extension for vector graphics and is described with context about targeting. |
| 146 | .raw → Described | CORRECT | The .raw extension is generic and is described as being targeted by WCry ransomware. |
| 147 | .gif → Described | CORRECT | .gif is a common image file extension and is appropriately described in the context provided. |
| 148 | .png → Described | CORRECT | The .png extension is generic and is correctly described as a targeted file type by WCry. |
| 149 | .bmp → Described | CORRECT | .bmp is a standard image file extension and is described with sufficient context regarding targeting. |
| 150 | .jpg → Described | CORRECT | The .jpg extension is generic and is described as targeted by WCry ransomware. |
| 151 | .jpeg → Described | CORRECT | .jpeg is a common image file extension and is appropriately described in this context. |
| 152 | .vcd → Described | CORRECT | The .vcd extension is generic and is correctly described as one of the file types targeted by WCry. |
| 153 | .iso → Described | CORRECT | .iso is a standard disk image file extension and is described with context regarding WCry ransomware. |
| 154 | .backup → Described | CORRECT | The .backup extension is generic and is described as being among the targeted file types by WCry. |
| 155 | .zip → Described | CORRECT | .zip is a common compression file extension and is appropriately described in the WCry context. |
| 156 | .rar → Described | CORRECT | The .rar extension is generic and is described as targeted by WCry ransomware. |
| 157 | .tgz → Described | CORRECT | .tgz is a generic compressed file extension that is described with contextual targeting information. |
| 158 | .tar → Described | CORRECT | The .tar extension is generic and is appropriately described as one of the file types affected by WCry. |
| 159 | .bak → Described | CORRECT | .bak is a common backup file extension and is described with context regarding WCry ransomware. |
| 160 | .tbk → Described | CORRECT | The .tbk extension is generic and is described as being targeted by WCry ransomware. |
| 161 | .bz2 → Described | CORRECT | .bz2 is a common compression file extension and is described with appropriate context. |
| 162 | .PAQ → Described | CORRECT | The .PAQ extension, while less common, is described as a targeted file extension by WCry. |
| 163 | .ARC → Described | CORRECT | .ARC is a generic archive file extension and is described in the context of WCry ransomware targeting. |
| 164 | .aes → Described | CORRECT | Although “aes” suggests encryption, as a file extension it is generic and is described rather than actionable. |
| 165 | .gpg → Described | CORRECT | The .gpg extension is generic and is described with reference to WCry ransomware targeting. |
| 166 | .vmx → Described | CORRECT | .vmx is the standard extension for a VM configuration file and is described in the WCry context. |
| 167 | .vmdk → Described | CORRECT | The .vmdk extension is generic for virtual machine disks and is correctly described as targeted by WCry. |
| 168 | .vdi → Described | CORRECT | .vdi is a generic virtual disk image extension and is described with sufficient WCry context. |
| 169 | .sldm → Described | CORRECT | The .sldm extension is generic and is described as one of the file types targeted by WCry ransomware. |
| 170 | .sldx → Described | CORRECT | .sldx is a standard file extension for slide presentations and is appropriately described. |
| 171 | .sti → Described | CORRECT | The .sti extension is generic and is described with context regarding WCry ransomware targeting. |
| 172 | .602 → Described | CORRECT | Even though .602 is unusual, it is treated as a generic file extension described in the WCry context. |
| 173 | .hwp → Described | CORRECT | The .hwp extension is common for certain document types and is described as being targeted by WCry. |
| 174 | .snt → Described | CORRECT | .snt is a generic file extension and is described with sufficient WCry ransomware context. |
| 175 | .onetoc2 → Described | CORRECT | The .onetoc2 extension is generic and is described as one of the WCry-targeted file types. |
| 176 | .dwg → Described | CORRECT | .dwg is a common design file extension and is described in the context of WCry ransomware targeting. |
| 177 | .pdf → Described | CORRECT | The .pdf extension is generic and is correctly described as being among the targeted file types by WCry. |
| 178 | .wk1 → Described | CORRECT | .wk1 is a generic spreadsheet file extension and is described with contextual information regarding targeting. |
| 179 | .wks → Described | CORRECT | The .wks extension is generic and is described as targeted by WCry ransomware, requiring further context for detection. |
| 180 | .123 → Described | CORRECT | .123 is a generic file extension and is described in the context of WCry ransomware targeting. |
| 181 | .rtf → Described | CORRECT | The .rtf extension is generic and is appropriately described as one of the targeted file types. |
| 182 | .csv → Described | CORRECT | .csv is a common file extension for data files and is described with additional WCry context. |
| 183 | .txt → Described | CORRECT | The .txt extension is generic and is described as being targeted by WCry ransomware. |
| 184 | .vsdx → Described | CORRECT | .vsdx is a generic file extension for Visio diagrams and is described with contextual WCry targeting. |
| 185 | .vsd → Described | CORRECT | The .vsd extension is generic and is accurately described in the context of WCry ransomware targeting. |
| 186 | .edb → Described | CORRECT | .edb is a common database file extension and is described as one of the file types targeted by WCry. |
| 187 | .eml → Described | CORRECT | The .eml extension, common for email files, is described with WCry ransomware context. |
| 188 | .msg → Described | CORRECT | .msg is a generic email file extension and is appropriately described in the provided context. |
| 189 | .ost → Described | CORRECT | The .ost extension is generic for Outlook data files and is described as targeted by WCry ransomware. |
| 190 | .pst → Described | CORRECT | .pst is a common file extension for Outlook databases and is correctly marked as described. |
| 191 | .ppam → Described | CORRECT | The .ppam extension is generic and is described with context relating to WCry ransomware targeting. |
| 192 | .ppsx → Described | CORRECT | .ppsx is a standard presentation file extension and is appropriately described. |
| 193 | .ppsm → Described | CORRECT | The .ppsm extension is generic and is described in the context of WCry ransomware targeting. |
| 194 | .pps → Described | CORRECT | .pps is a common presentation file extension and is described with the additional context provided. |
| 195 | .pot → Described | CORRECT | The .pot extension, used for presentation templates, is generic and correctly described. |
| 196 | .pptm → Described | CORRECT | .pptm is a generic macro‐enabled presentation file extension and is described with WCry context. |
| 197 | .pptx → Described | CORRECT | The .pptx extension is common and is described as one of the targeted file types by WCry. |
| 198 | .ppt → Described | CORRECT | .ppt is a generic presentation file extension and is appropriately described in context. |
| 199 | .xltm → Described | CORRECT | The .xltm extension is generic and is described as one of the file extensions targeted by WCry. |
| 200 | .xltx → Described | CORRECT | .xltx is a common template file extension and is correctly described in the context provided. |
| 201 | .xlc → Described | CORRECT | The .xlc extension is generic and is described with reference to WCry ransomware targeting. |
| 202 | .xlm → Described | CORRECT | .xlm is a generic file extension for Excel macro files and is appropriately described. |
| 203 | .xlt → Described | CORRECT | The .xlt extension is generic and is described as targeted by WCry ransomware. |
| 204 | .xlw → Described | CORRECT | .xlw is a generic spreadsheet file extension that is described with contextual targeting by WCry. |
| 205 | .xlsx → Described | CORRECT | The .xlsx extension is common and is described in context regarding WCry ransomware targeting. |
| 206 | .xls → Described | CORRECT | .xls is a generic spreadsheet file extension and is correctly marked as described. |
| 207 | .dotx → Described | CORRECT | The .dotx extension is generic for Word templates and is described with sufficient context. |
| 208 | .dotm → Described | CORRECT | .dotm is a generic, macro‐enabled template file extension and is appropriately described. |
| 209 | .dot → Described | CORRECT | The .dot extension is generic and is described as being targeted by WCry ransomware in context. |
| 210 | .docm → Described | CORRECT | .docm is a generic macro‐enabled document extension and is correctly described. |
| 211 | .docb → Described | CORRECT | The .docb extension is generic and is appropriately described in the WCry context. |
| 212 | .docx → Described | CORRECT | .docx is a common document file extension and is described with contextual detail on WCry targeting. |
| 213 | .doc → Described | CORRECT | The .doc extension is generic and is properly described in the report’s context. |
| 214 | | Figure 6. File extensions targeted by WCry ransomware. (Source: SecureWorks, | → Described | CORRECT | The table capture is a complete visual representation that is meant for documentation rather than direct automated matching. |
| 215 | | Content.IE5    | Temporary Internet Files | \LocalSettings\Te | ppData\Local\Te | … → Described | CORRECT | The captured table of directory name components is a descriptive artifact not intended for direct automated detection. |
| 216 | RSA-2048 → Mentioned | CORRECT | “RSA-2048” specifies a key size and is used conceptually rather than as a unique matchable string. |
| 217 | AES-128 → Mentioned | CORRECT | “AES-128” denotes a key size specification and is a conceptual reference not directly actionable in detection. |
| 218 | 0000000.eky → Actionable | CORRECT | The filename is a complete, unique identifier that can be directly matched by security tools. |
| 219 | .WNCRYT → Actionable | CORRECT | This custom file extension is unique to WCry ransomware and can be used in precise detection rules. |
| 220 | .WINCRY → Actionable | CORRECT | The final file extension is unique and specific to WCry ransomware, making it directly actionable. |
| 221 | taskdl.exe → Actionable | CORRECT | The process name is a complete identifier and can be uniquely matched in detection systems. |
| 222 | |                                  | OB    | OF          | OD    | … (hex dump of file header) → Actionable | CORRECT | The complete hex dump of the file header—including the “WANACRY!” marker—is a unique artifact that can be directly matched. |
| 223 | typedef struct _wana_hdr {
   uint8_t magic[8];
   // "WANACRY!"
   uint32_t key_len;
   // Key length 0x0100 (256) bytes
   uint8_t key[256];
   // Encrypted key
   uint32_t file_code;
   // File type code, 0x03 or 0x04
   uint64_t file_length;
   // Length of original file
   uint8_t *encrypted_data;
   // Ciphertext
  wana_hdr_t;
ﯩﺘﯩ → Actionable | CORRECT | The provided C code snippet defining the WCry file header structure is complete and unique, making it directly actionable. |

| 224 | 115p7UMMnqoi1pMvkpHijcRdfJNXj6LrLn → Actionable | CORRECT | The Bitcoin address is a complete, unique identifier that can be directly matched for detection. |
| 225 | 12t9YDPgwueZ9NyMgw519p7AA8isjr6SMw → Actionable | CORRECT | The Bitcoin address is a complete, unique identifier that can be directly matched for detection. |
| 226 | 13AM4VW2dhxYgXeQepoHkHSQuy6NgaEb94 → Actionable | CORRECT | The Bitcoin address is a complete, unique identifier that can be directly matched for detection. |

| 227 | TaskData → Described | CORRECT | "TaskData" is a generic folder name without a full path, making it ambiguous and fitting the Described category. |
| 228 | taskhshes → Actionable | CORRECT | "taskhshes" is a unique and complete file name that can be directly used in detection. |
| 229 | 127.0.0.1 → Mentioned | CORRECT | The loopback IP "127.0.0.1" is ubiquitous and not unique enough for precise detection. |
| 230 | TCP port 9050 → Mentioned | CORRECT | Specifying "TCP port 9050" is generic and insufficient for automated detection beyond contextual use. |
| 231 | gx7ekbenv2riucmf.onion → Actionable | CORRECT | This complete onion address is unique and can be directly keyed on in detection systems. |
| 232 | 57g7spgrzlojinas.onion → Actionable | CORRECT | The onion domain is a fully formed, unique indicator suitable for actionable detection. |
| 233 | xxlvbrloxvriy2c5.onion → Actionable | CORRECT | As a complete and unique onion address, it meets the criteria for being actionable. |
| 234 | 76jdd2ir2embyv47.onion → Actionable | CORRECT | The full onion domain is a distinct and searchable indicator, making it actionable. |
| 235 | cwwnhwhlz52maqm7.onion → Actionable | CORRECT | This unique onion address is a complete indicator that can be directly utilized in detection. |
| 236 | TCP port 80 → Mentioned | CORRECT | "TCP port 80" is a common port number and, by itself, is too generic for precise automated detection. |

| 237 | `WCry` → `Mentioned` | CORRECT | The ransomware family name is generic and used conceptually, not as a unique string for automated detection. |
| 238 | `MS17-010` → `Actionable` | CORRECT | MS17-010 is a precise vulnerability identifier that can be directly used in detection rules. |
| 239 | `Windows Sever 2003` → `Mentioned` | CORRECT | The legacy operating system name is generic and not unique enough for automated matching. |
| 240 | `SMBv1` → `Mentioned` | CORRECT | As a protocol version, SMBv1 is a generic descriptor and lacks the uniqueness required for actionable detection. |
| 241 | `Windows XP` → `Mentioned` | CORRECT | The operating system name is generic and serves as a conceptual reference rather than a unique indicator. |
| 242 | `Windows 2000` → `Mentioned` | CORRECT | Similar to other OS names, it is generic and not uniquely actionable. |
| 243 | `DoublePulsar` → `Actionable` | CORRECT | DoublePulsar is a well-known backdoor implant with a unique identifier suitable for automated detection. |
| 244 | `Nmap` → `Mentioned` | CORRECT | The tool name is too generic to serve as a unique, actionable indicator for detections. |

| 245 | `qx7ekbenv2riucmf.onion` → `Actionable` | CORRECT | This is a complete, unique Tor domain that can be directly used in detection. |
| 246 | `57g7spgrzlojinas.onion` → `Actionable` | CORRECT | This full Tor domain name is unique and directly actionable. |
| 247 | `xxlvbrloxvriy2c5.onion` → `Actionable` | CORRECT | A complete Tor domain indicator that is unique and can be matched exactly. |
| 248 | `76jdd2ir2embyv47.onion` → `Actionable` | CORRECT | Fully specified Tor address which is uniquely identifiable for detection. |
| 249 | `cwwnhwhlz52maqm7.onion` → `Actionable` | CORRECT | A unique, complete Tor domain that meets criteria for actionable observable. |
| 250 | `Microsoft Security Center (2.0) Service` → `Actionable` | CORRECT | A complete service display name that can be used precisely for detection. |
| 251 | `mssecsvc2.0` → `Actionable` | CORRECT | This full service name indicator is specific and actionable. |
| 252 | `C:\Windows\mssecsvc.exe` → `Actionable` | CORRECT | A complete file path that is unique and can be directly matched. |
| 253 | `C:\Windows\Tasksche.exe` → `Actionable` | CORRECT | A full file path indicator suitable for automated detection. |
| 254 | `C:\Windows\qeriuwjhrf` → `Actionable` | CORRECT | Even without an extension, it is a complete filename that is actionable. |
| 255 | `db349b97c37d22f5ea1d1841e3c89eb4` → `Actionable` | CORRECT | A complete MD5 hash that is unique and directly matchable. |
| 256 | `e889544aff85ffaf8b0d0da705105dee7c97fe26` → `Actionable` | CORRECT | A full SHA1 hash indicator that is unique and actionable. |
| 257 | `24d004a104d4d54034dbcffc2a4b19a11f39008a575aa614ea04703480b1022c` → `Actionable` | CORRECT | A complete SHA256 hash that meets the criteria for an actionable indicator. |
| 258 | `Global\MsWinZonesCacheCounterMutexW` → `Actionable` | CORRECT | A complete mutex name which is unique and can be directly used in detection. |
| 259 | `%PROGRAMDATA%\%RAND%\0000000.eky` → `Actionable` | CORRECT | Despite containing environment variables, it is provided as a complete file pattern from logs. |
| 260 | `63fb6dd827559c0ed40c4c3725f7fc0a` → `Actionable` | CORRECT | A complete MD5 hash that is unique and directly actionable. |
| 261 | `8e7211b1455dedfe1f84cc60a7ed593f78dfb6e1` → `Actionable` | CORRECT | A full SHA1 hash which is unambiguous and can be matched exactly. |
| 262 | `24076e8485c72e4f9cf997c1f3670337231e401a043505e489606fff5758150f` → `Actionable` | CORRECT | This SHA256 hash is complete and unique, making it directly actionable. |
| 263 | `00000000.pky` → `Actionable` | CORRECT | A complete filename provided for the public key, uniquely identifying the artifact. |
| 264 | `f5c0755e5f08dabf1119c193e96539a6` → `Actionable` | CORRECT | A full MD5 hash that is complete and actionable. |
| 265 | `5109c0738c126e65db8a92e1ff24f3291837f627` → `Actionable` | CORRECT | A complete SHA1 hash which is directly matchable in logs. |
| 266 | `c863b4b4780d6ce53827049d3733863283aaeb4d4ae806fc2c5cfbd9eb236ab8` → `Actionable` | CORRECT | This SHA256 hash is complete and unique, satisfying the actionable criteria. |
| 267 | `00000000.res` → `Actionable` | CORRECT | A fully specified filename that can be directly used in detection. |
| 268 | `492c258c5bcbdd812fddd99b2427da99` → `Actionable` | CORRECT | A complete MD5 hash that is unique and directly matchable. |
| 269 | `0c16196d93b076f4648a9b1b027e7735845cab20` → `Actionable` | CORRECT | A full SHA1 hash indicator that is complete and actionable. |
| 270 | `6fa17600177c2032c3c3a3c06df6cf7d8dba1d32db146d9dd87aecf3f39fb898` → `Actionable` | CORRECT | A complete SHA256 hash that meets detection requirements. |
| 271 | `b.wnry` → `Actionable` | CORRECT | A complete filename indicator, even though short, is uniquely identifiable. |
| 272 | `c17170262312f3be7027bc2ca825bf0c` → `Actionable` | CORRECT | A full MD5 hash that is complete and actionable. |
| 273 | `f19eceda82973239a1fdc5826bce7691e5dcb4fb` → `Actionable` | CORRECT | A complete SHA1 hash that is unique and directly matchable. |
| 274 | `d5e0e8694ddc0548d8e6b87c83d50f4ab85c1debadb106d6a6a794c3e746f4fa` → `Actionable` | CORRECT | This SHA256 hash is complete, unique, and actionable. |
| 275 | `c.wnry` → `Actionable` | CORRECT | A complete filename indicator that can be used directly in detection. |
| 276 | `fa44d43242f0bcc6d64569e4869e4913` → `Actionable` | CORRECT | A full MD5 hash that is unique and directly actionable. |
| 277 | `29da372c816ac0d636657a76ab7712ae8106cb45` → `Actionable` | CORRECT | A complete SHA1 hash, unambiguously actionable. |
| 278 | `3324483d27e716feb408b5d16b82540731faf435b9325497df779d72e7a6b765` → `Actionable` | CORRECT | This SHA256 hash is complete and specific enough for detection. |
| 279 | `f.wnry` → `Actionable` | CORRECT | A complete filename provided in full, making it directly actionable. |
| 280 | `@Please_Read_Me@.txt` → `Actionable` | CORRECT | The complete, unique filename makes it directly actionable. |
| 281 | `r.wnry` → `Actionable` | CORRECT | A full filename indicator that can be used for precise detection. |
| 282 | `3e0020fc529b1c2a061016dd2469ba96` → `Actionable` | CORRECT | A complete MD5 hash that is unique and immediately matchable. |
| 283 | `c3a91c22b63f6fe709e7c29cafb29a2ee83e6ade` → `Actionable` | CORRECT | A full SHA1 hash which meets the actionable criteria. |
| 284 | `402751fa49e0cb68fe052cb3db87b05e71c1d950984d339940cf6b29409f2a7c` → `Actionable` | CORRECT | A complete SHA256 hash indicator that can be directly used in detection. |
| 285 | `s.wnry` → `Actionable` | CORRECT | A full filename that is complete and uniquely identifiable for detection. |
| 286 | `ad4c9de7c8c40813f200ba1c2fa33083` → `Actionable` | CORRECT | A complete MD5 hash that is specific and actionable. |
| 287 | `d1af27518d455d432b62d73c6a1497d032f6120e` → `Actionable` | CORRECT | A complete SHA1 hash indicator that is unambiguous and directly matchable. |
| 288 | `e18fdd912dfe5b45776e68d578c3af3547886cf1353d7086c8bee037436dff4b` → `Actionable` | CORRECT | This SHA256 hash is complete and unique, making it directly actionable. |
| 289 | `taskdl.exe` → `Actionable` | CORRECT | A complete filename that is specific and can be used for detection. |
| 290 | `4fef5e34143e646dbf9907c4374276f5` → `Actionable` | CORRECT | A complete MD5 hash that is uniquely identifiable for automated detection. |
| 291 | `47a9ad4125b6bd7c55e4e7da251e23f089407b8f` → `Actionable` | CORRECT | A full SHA1 hash indicator that is complete and actionable. |
| 292 | `4a468603fdcb7a2eb5770705898cf9ef37aade532a7964642ecd705a74794b79` → `Actionable` | CORRECT | A complete SHA256 hash that meets the criteria for unique detection. |
| 293 | `tasksche.exe` → `Actionable` | CORRECT | A complete filename that is fully specified and actionable. |
| 294 | `84c82835a5d21bbcf75a61706d8ab549` → `Actionable` | CORRECT | A complete MD5 hash that is specific and directly matchable. |
| 295 | `5ff465afaabcbf0150d1a3ab2c2e74f3a4426467` → `Actionable` | CORRECT | A full SHA1 hash indicator that is complete and unique. |
| 296 | `ed01ebfbc9eb5bbea545af4d01bf5f1071661840480439c6e5babe8e080e41aa` → `Actionable` | CORRECT | A complete SHA256 hash which is unique and directly actionable. |
| 297 | `taskse.exe` → `Actionable` | CORRECT | A complete filename indicator that can be directly used for detection. |
| 298 | `8495400f199ac77853c53b5a3f278f3e` → `Actionable` | CORRECT | A complete MD5 hash that is unambiguously actionable. |
| 299 | `be5d6279874da315e3080b06083757aad9b32c23` → `Actionable` | CORRECT | A full SHA1 hash indicator, complete and unique enough for detection. |
| 300 | `2ca2d550e603d74dedda03156023135b38da3630cb014e3d00b1263358c5f00d` → `Actionable` | CORRECT | A complete SHA256 hash that meets the criteria for direct matching. |
| 301 | `t.wnry` → `Actionable` | CORRECT | A complete and specific filename indicator that is actionable. |
| 302 | `5dcaac857e695a65f5c3ef1441a73a8f` → `Actionable` | CORRECT | A complete MD5 hash that is uniquely identifiable for detection. |
| 303 | `7b10aaeee05e7a1efb43d9f837e9356ad55c07dd` → `Actionable` | CORRECT | A full SHA1 hash indicator that is complete and actionable. |
| 304 | `97ebce49b14c46bebc9ec2448d00e1e397123b256e2be9eba5140688e7bc0ae6` → `Actionable` | CORRECT | A complete SHA256 hash that satisfies detection requirements. |
| 305 | `@WanaDecryptor@.exe` → `Actionable` | CORRECT | A complete filename that is unique and can be directly used in detection. |
| 306 | `u.wnry` → `Actionable` | CORRECT | A complete filename that is specific and actionable. |
| 307 | `7bf2b57f2a205768755c07f238fb32cc` → `Actionable` | CORRECT | A full MD5 hash, uniquely identifiable for automated detection. |
| 308 | `45356a9dd616ed7161a3b9192e2f318d0ab5ad10` → `Actionable` | CORRECT | A complete SHA1 hash indicator that is unambiguously actionable. |
| 309 | `b9c5d4339809e0ad9a00d4d3dd26fdf44a32819a54abf846bb9b560d81391c25` → `Actionable` | CORRECT | A complete SHA256 hash that is unique and directly matchable. |
| 310 | `@WanaDecryptor@.exe.Ink` → `Actionable` | CORRECT | A complete filename, even with the appended extension, making it actionable. |

| 311 | ndr → Mentioned | CORRECT | The observable is an ambiguous abbreviation that does not offer a unique, actionable indicator. |

| 312 | edr → Mentioned | CORRECT | "edr" is a generic reference to endpoint detection and response technology without actionable specificity. |
| 313 | ngav → Mentioned | CORRECT | "ngav" is a generic abbreviation for next-generation antivirus and is not a unique, actionable identifier. |

md file name: /content/validation/CRASHOVERRIDE2018.md

| 1 | CRASHOVERRIDE → Mentioned | CORRECT | It is merely a malware family name and cannot be directly used for automated detection, so "Mentioned" is appropriate. |

| 2 | CRASHOVERRIDE → Actionable | CORRECT | "CRASHOVERRIDE" is a distinct malware family name that can be directly matched for detection. |
| 3 | CRASHOVERRIDE Modules → Described | CORRECT | It refers to a collection of modules associated with the malware, thus remaining a descriptive grouping rather than a unique indicator. |
| 4 | Launcher Module → Described | CORRECT | The term is a generic module name that lacks the specificity required for an actionable indicator. |
| 5 | IEC-101 → Mentioned | CORRECT | As a standard communication protocol, it’s referenced conceptually and isn’t a unique, matchable indicator. |
| 6 | IEC-104 → Mentioned | CORRECT | This is a standard IEC protocol, representing a generic concept rather than a uniquely actionable artifact. |
| 7 | IEC-61850 → Mentioned | CORRECT | It denotes a widely used standard protocol, making it a conceptual reference rather than an exact, unique indicator. |
| 8 | 0PC → Described | CORRECT | The observable appears to be a typographical variant of OPC and thus serves as a descriptive, ambiguous reference. |
| 9 | Hybrid Payload: OPC + 61850 → Described | CORRECT | This value describes a compound payload and does not provide a single, uniquely actionable indicator. |
| 10 | Wiper Module → Described | CORRECT | The term generically describes a module responsible for data wiping, lacking the uniqueness needed for an actionable signal. |
| 11 | Primary Backdoor Module → Described | CORRECT | It is a generic descriptor for a backdoor component that doesn’t offer a complete, directly matchable artifact. |
| 12 | Alternate Backdoor → Described | CORRECT | This term conceptually describes a secondary backdoor mechanism and isn’t specific enough to serve as an actionable indicator. |

| 13 | SANDWORM → Mentioned | CORRECT | "SANDWORM" is merely a threat actor name and does not provide a concrete identifier for automated detection. |
| 14 | ICS Cyber Kill Chain → Mentioned | CORRECT | "ICS Cyber Kill Chain" describes a conceptual framework rather than a unique, actionable technical indicator. |

| 15 | `CRASHOVERRIDE` → `Mentioned` | CORRECT | It is a conceptual malware/attack name that doesn't provide a unique, directly searchable indicator. |
| 16 | `SANDWORM` → `Mentioned` | CORRECT | As an APT group name, it is a conceptual reference not suited for automated detection. |
| 17 | `ELECTRUM` → `Mentioned` | CORRECT | It is used as a reference to the adversary and is not a unique, actionable indicator. |

| 18 | ELECTRUM → Mentioned | CORRECT | The threat actor alias is a conceptual reference and not a unique, actionable indicator. |
| 19 | admin → Described | CORRECT | The administrative account name is generic and requires additional context to avoid false positives. |
| 20 | система → Described | CORRECT | The account name, translating to “System”, is generic and not uniquely actionable without further enrichment. |

| 21 | `CRASHOVERRIDE` → `Actionable` | CORRECT | It is a unique, complete malware family name that can be directly matched in detection. |

| 22 | "CRASHOVERRIDE" → "Actionable" | CORRECT | It is a unique malware family name that can be matched directly. |
| 23 | "launcher module" → "Described" | CORRECT | It is a generic module reference that lacks the specificity needed for automated detection. |
| 24 | "effects module" → "Described" | CORRECT | It is a descriptive label without unique identifying characteristics. |
| 25 | "Crash" → "Described" | CORRECT | The function name is too generic to serve as an actionable, unique indicator. |
| 26 | "payload DLL" → "Described" | CORRECT | It generically refers to a DLL without specifying a unique artifact. |
| 27 | "configuration file" → "Described" | CORRECT | The term is a generic descriptor that doesn’t pinpoint a specific, actionable artifact. |
| 28 | "wiper component" → "Described" | CORRECT | It describes a malware component in a non‑unique way that requires further context for detection. |

| 29 | Figure 5: CRASHOVERRIDE Program Flow → Mentioned | CORRECT | The observable is a figure caption used for context and not for direct automated detection. |
| 30 | Crash → Described | INCORRECT — should be "Actionable" because the function name is a complete, unique identifier that can be directly matched in detection rules. | As a hardcoded DLL export function name, "Crash" is specific enough for actionable use. |
| 31 | defragsvc → Actionable | CORRECT | The hardcoded service name is a complete identifier that can be exactly matched in detection rules. |
| 32 | imapiservice → Actionable | CORRECT | The service name is a precise, hardcoded string suitable for direct detection. |
| 33 | December 17, 2016 22:27 UTC → Described | CORRECT | Timestamps provide contextual information and are not inherently unique for actionable detection. |
| 34 | December 20, 2016 06:30 UTC → Described | CORRECT | As with other timestamps, this value is used for context rather than as a directly matchable detection indicator. |

| 35 | IEC-101 → Described | CORRECT | As a standard ICS protocol name, it’s a generic identifier that isn’t unique enough for direct automated detection. |
| 36 | IEC-104 → Described | CORRECT | The protocol name is generic and used contextually, so ranking it as Described is appropriate. |
| 37 | DNP3 → Described | CORRECT | "DNP3" is a standard protocol reference; its generic nature makes "Described" the right rank. |
| 38 | IEC-61850 → Described | CORRECT | Like other ICS protocol names, it’s contextually referenced and not a unique, actionable string. |
| 39 | OPC DA → Described | CORRECT | "OPC DA" is a generic industrial protocol reference, fitting the Described rank. |
| 40 | CRASHOVERRIDE → Mentioned | CORRECT | As a campaign name referenced conceptually, it cannot be directly used for automated detection and is rightly ranked as Mentioned. |

| 41 | IEC-101 → Mentioned | CORRECT | It is a protocol name referenced conceptually without a unique, actionable pattern. |
| 42 | 101.dll → Actionable | INCORRECT — should be "Described" because a standalone DLL filename is ambiguous and can yield false positives. | File names by themselves are generally not unique enough for direct automated detection. |
| 43 | CRASHOVERRIDE → Mentioned | CORRECT | As a malware campaign/family name, it is a conceptual reference that isn’t directly actionable. |

| 44 | IEC-104 → Mentioned | CORRECT | "IEC-104" is a standard protocol name referenced conceptually rather than a unique, complete token. |
| 45 | IEC-101 → Mentioned | CORRECT | "IEC-101" is similarly a generic protocol identifier and appropriately marked as mentioned. |
| 46 | IEC-104 DLL → Described | CORRECT | The DLL name is provided in a descriptive manner that hints at its use but isn’t a fully unique indicator. |
| 47 | Crash → Described | CORRECT | "Crash" is a generic function name that, despite its context, remains ambiguous and thus is correctly described. |
| 48 | IEC-104 communications process → Described | CORRECT | The process name is a descriptive label used for monitoring behavior, requiring context before being actionable. |

| 49 | `EXEC xp cmdshell 'cscript C:\Delta\remote.vbs /s:<TargetIP> /u:<Host/Domain>\<User> /p:<Password> /t:-r cmd /c start c:\Intel\opc.exe';` → Actionable | CORRECT | This full command snippet is a complete and unique string that can be used directly in detection. |
| 50 | `C:\Delta\remote.vbs` → Actionable | CORRECT | The file path is complete and distinctive, making it directly matchable for detection purposes. |
| 51 | `c:\Intel\opc.exe` → Actionable | CORRECT | It is a complete executable file path that can be keyed on in detection rules. |
| 52 | `Administrator` → Mentioned | CORRECT | As a generic default username, it is conceptually referenced and not unique enough for automated detection. |
| 53 | `I gas@WSX` → Actionable | CORRECT | This specific hardcoded password is a complete string that can be used for detection. |
| 54 | `ct|SelOn` → Actionable | CORRECT | The token has a distinct structure and is complete for direct matching in detection scenarios. |
| 55 | `ct|Se|Off` → Actionable | CORRECT | It is a complete and unique OPC token that can be directly used in detection. |
| 56 | `ctlOperOn` → Actionable | CORRECT | This specific OPC enumeration token is complete and suitable for direct detection. |
| 57 | `ctlOperOff` → Actionable | CORRECT | It is a fully formed OPC token that can be matched directly with low false‑positives. |
| 58 | `stVal` → Actionable | INCORRECT — should be "Described" because the token is overly generic and may lead to high false positives. | "stVal" is too short and unspecific to serve as a unique, actionable detection indicator. |
| 59 | `ctlSelOn` → Actionable | CORRECT | The token's distinctive pattern makes it actionable for detection purposes. |
| 60 | `ctlSelOff` → Actionable | CORRECT | This OPC token is complete and sufficiently unique to be used in automated detection. |

| 61 | imapi.dll → Actionable | INCORRECT — should be "Described" because a plain DLL filename (imapi.dll) is too generic without path or hash context for precise automated detection. | Generic file names like imapi.dll are ambiguous and require additional context to be actionable. |
| 62 | 61850 → Mentioned | CORRECT | The protocol name "61850" is a conceptual reference and not uniquely actionable. |
| 63 | OPC → Mentioned | CORRECT | "OPC" is a generic industrial protocol reference that cannot be directly turned into a concrete detector. |
| 64 | (disassembled code block) → Actionable | CORRECT | The complete disassembled code snippet is a full, unique block that can be directly matched by detection systems. |
| 65 | CRASHOVERRIDE → Mentioned | CORRECT | As a malware family/campaign name, it is a conceptual reference rather than a unique, actionable indicator. |

| 66 | `Crash` → `Mentioned` | CORRECT | The function name is generic and only conceptually referenced. |
| 67 | `haslo.dat` → `Actionable` | CORRECT | It’s a specific, hard‑coded filename that can be exactly matched. |
| 68 | `SYSTEM\CurrentControlSet\Services` → `Actionable` | CORRECT | The registry key is a complete identifier usable in detection rules. |
| 69 | `C-Z` → `Mentioned` | CORRECT | It represents a range of drive letters conceptually, not a unique identifier. |
| 70 | `V:\` → `Described` | CORRECT | The drive letter is specific but ambiguous for automated matching. |
| 71 | `.exe` → `Mentioned` | CORRECT | As a generic file extension, it is referenced conceptually rather than uniquely. |
| 72 | `.zip` → `Mentioned` | CORRECT | It is a generic archive extension and not unique enough for direct detection. |
| 73 | `.tar` → `Mentioned` | CORRECT | This generic archive extension is appropriately only conceptually referenced. |
| 74 | `SYS BASCOM.COM` → `Actionable` | CORRECT | The full filename is unique and can be exactly matched in detection. |
| 75 | `*.pcmp` → `Actionable` | CORRECT | The file extension pattern is specific to a proprietary project file type. |
| 76 | `*.pcmi` → `Actionable` | CORRECT | It is a distinct file extension pattern tied to a specific file type. |
| 77 | `*.pcmt` → `Actionable` | CORRECT | The complete pattern uniquely identifies a proprietary template file. |
| 78 | `*.pl` → `Described` | CORRECT | The wildcard pattern is ambiguous given the commonality of “.pl” files. |
| 79 | `*pat` → `Described` | CORRECT | The wildcard pattern is non‑specific and requires additional context. |
| 80 | `*.SC` → `Actionable` | CORRECT | This proprietary file extension pattern is complete and can be exactly matched. |
| 81 | `* .CId` → `Actionable` | CORRECT | Despite the spacing, it forms a distinct pattern tied to a specific configuration file. |
| 82 | `* SCC` → `Actionable` | CORRECT | The pattern clearly identifies a vendor‐specific file type for detection. |
| 83 | `*.xrf` → `Actionable` | CORRECT | It is a specific file extension pattern associated with proprietary software. |
| 84 | `* V` → `Actionable` | INCORRECT — should be "Described" because the file pattern is ambiguous and potentially too generic for precise detection. | The pattern lacks specificity and may lead to high false positives. |
| 85 | `* trc` → `Actionable` | CORRECT | It specifies a distinct trace file type associated with OPC DA, making it directly matchable. |
| 86 | `*.CIN` → `Actionable` | CORRECT | The file extension is vendor‐specific and complete for detection purposes. |
| 87 | `*.Inl` → `Actionable` | CORRECT | This proprietary file pattern is unique and can be directly used in detection rules. |
| 88 | `*.pri` → `Actionable` | CORRECT | It is a specific file extension tied to ABB Control Builder, allowing for exact matching. |
| 89 | `*.mdf` → `Actionable` | INCORRECT — should be "Mentioned" because the pattern represents a common database file extension that is too generic for reliable automated detection. | Its generic nature increases the risk of false positives. |
| 90 | `*  df` → `Actionable` | INCORRECT — should be "Mentioned" because the database file pattern is ambiguous and not unique enough for precise detection. | The lack of specificity could result in many false positives. |
| 91 | `ABB SYS600 Project Files use BAK for Backup Files` → `Described` | CORRECT | It is a descriptive statement rather than a concrete, matchable indicator. |

| 92 | lsm.exe → Described | CORRECT | The file name is common and ambiguous, making it non‑unique and suitable only for descriptive context. |
| 93 | taskhost.exe → Described | CORRECT | As a well‐known executable name, it lacks unique properties and is appropriately ranked as Described. |
| 94 | services.exe → Described | CORRECT | This common system file name is ambiguous and thus fits the Described rank. |
| 95 | wininit.exe → Described | CORRECT | The executable is a generic system file name that cannot serve as a unique detection indicator. |
| 96 | shutdown.exe → Described | CORRECT | Being a common OS utility filename, it is not unique enough for direct, actionable detection. |
| 97 | winlogon.exe → Described | CORRECT | The name is a typical system process, making it ambiguous and correctly labeled as Described. |
| 98 | smss.exe → Described | CORRECT | As a common Windows system file, it is ambiguous and thus correctly classified as Described. |
| 99 | wuaucht.exe → Described | CORRECT | Although slightly variant, it remains a file name lacking unique context, so Described is appropriate. |
| 100 | spoolss.exe → Described | CORRECT | A generic system service filename that is ambiguous and not unique, matching the Described rank. |
| 101 | spoolsv.exe → Described | CORRECT | The file name is common and generic, therefore it is appropriately classified as Described. |
| 102 | svchost.exe → Described | CORRECT | This ubiquitous system process name is ambiguous, making it only descriptive rather than actionable. |

| 103 | "Primary Backdoor Module" → "Described" | CORRECT | The entry is descriptive and lacks unique technical identifiers for direct automated detection. |
| 104 | "CRASHOVERRIDE" → "Actionable" | CORRECT | The unique malware family name is directly searchable and can serve as an exact string indicator. |
| 105 | "Industroyer" → "Actionable" | CORRECT | The malware family name is distinctive enough to be used for precise detection in security systems. |

| 106 | CVE-2015-5374 → Actionable | CORRECT | "CVE-2015-5374" is a unique and complete vulnerability identifier that can be directly matched. |
| 107 | dos.exe → Described | CORRECT | "dos.exe" is an ambiguous file name that may lead to false positives, making it better suited as Described. |
| 108 | UDP 50000 → Actionable | CORRECT | "UDP 50000" is a complete and specific port indicator that can be directly used for detection. |
| 109 | 192.1.2.3 → Actionable | CORRECT | "192.1.2.3" is a clearly defined IPv4 address, making it actionable. |
| 110 | 3.2.1.192 → Actionable | CORRECT | "3.2.1.192" is a complete, uniquely formatted IPv4 address (despite being reversed), and is actionable. |

| 111 | `NOTEPAD. EXE` → `Described` | CORRECT | The file name is generic and lacks inherent uniqueness for automated detection. |
| 112 | `RegisterPenApp` → `Actionable` | CORRECT | It is a specific, unique binary string that can be directly matched. |
| 113 | `notepad.chm` → `Actionable` | CORRECT | The anomalous help file name is unusual enough to serve as a precise indicator. |
| 114 | `hhctrl.ocx` → `Described` | CORRECT | It’s a common system file name, making it ambiguous for definitive detection. |
| 115 | `CLSID\{ADB880A6-D8FF-11CF-9377-00AA003B7A11}\InprocServer32` → `Actionable` | CORRECT | This complete registry key path is specific and can be accurately matched in detection rules. |
| 116 | `csvd.exe` → `Actionable` | CORRECT | The file name is unique to the malware sample and is directly actionable. |
| 117 | `GET /8C7SW HTTP/1.1
Cache-Control: no-cache
Connection: Keep-Alive
Pragma: no-cache
Host: 188.42.253.43:8820` → `Actionable` | CORRECT | The full HTTP GET request block is a complete, unique indicator suitable for direct matching. |
| 118 | `188.42.253.43` → `Actionable` | CORRECT | As a complete IPv4 address, it is inherently actionable. |
| 119 | `8820` → `Described` | CORRECT | A standalone port number is generic and needs contextual information for detection. |
| 120 | `TCP 4444` → `Described` | CORRECT | The common port number, even with protocol, is ambiguous without further context. |

| 121 | Mimikatz → Actionable | CORRECT | The tool name "Mimikatz" is a unique identifier that can be directly matched in detection rules. |

| 122 | `101_copy.bat` → `Described` | CORRECT | As a standalone file name from logs, it is ambiguous and requires additional context. |
| 123 | `104.bat` → `Described` | CORRECT | A generic file name without path context, making it appropriately "Described". |
| 124 | `104.dll` → `Described` | CORRECT | The file name is too generic on its own, so "Described" is the proper rank. |
| 125 | `104_copy.bat` → `Described` | CORRECT | Being just a file name, it lacks the uniqueness required for an "Actionable" indicator. |
| 126 | `61850.dll` → `Described` | CORRECT | The file name is ambiguous without additional context, so "Described" fits. |
| 127 | `61850.exe` → `Described` | CORRECT | A simple file name that does not offer unique identification, making it "Described". |
| 128 | `alg.exe` → `Described` | CORRECT | This generic file name is ambiguous enough to warrant a "Described" rank. |
| 129 | `avtask.exe` → `Described` | CORRECT | Without additional context, the file name remains ambiguous and is correctly "Described". |
| 130 | `avtask2.exe` → `Described` | CORRECT | A file name that is not unique on its own, hence "Described" is appropriate. |
| 131 | `c.exe` → `Described` | CORRECT | Extremely generic file names are ambiguous and best classified as "Described". |
| 132 | `csvd.exe` → `Described` | CORRECT | The file name alone does not offer actionable uniqueness, so "Described" is correct. |
| 133 | `csvf.exe` → `Described` | CORRECT | As a standalone file name, it is ambiguous and properly ranked as "Described". |
| 134 | `csvnpr.exe` → `Described` | CORRECT | The indicator is just a file name, which is not unique enough for "Actionable". |
| 135 | `defragsvc.exe` → `Described` | CORRECT | Without additional path or context, the file name is best treated as "Described". |
| 136 | `dos.exe` → `Described` | CORRECT | Its generic nature demands additional context, so "Described" is appropriate. |
| 137 | `ep.exe` → `Described` | CORRECT | The file name is ambiguous without further detail, making the "Described" rank suitable. |
| 138 | `haslo.dat` → `Described` | CORRECT | As a file name extracted from logs, it lacks specificity and is "Described". |
| 139 | `haslo.exe` → `Described` | CORRECT | A standalone file name that is not uniquely identifiable, thus "Described" fits. |
| 140 | `ilaunchr.exe` → `Described` | CORRECT | The file name alone is ambiguous and appropriately classified as "Described". |
| 141 | `imapi.dll` → `Described` | CORRECT | Without full path details, the file name remains vague and is "Described". |
| 142 | `imapi.exe` → `Described` | CORRECT | Its generic nature as a file name justifies the "Described" rank. |
| 143 | `ImapiService.exe` → `Described` | CORRECT | Being only a file name without unique context, it is correctly "Described". |
| 144 | `ld.exe` → `Described` | CORRECT | Despite its association with Mimikatz, the file name alone is ambiguous and "Described". |
| 145 | `mm.exe` → `Described` | CORRECT | The generic file name lacks the uniqueness needed for an actionable indicator. |
| 146 | `npadpr.exe` → `Described` | CORRECT | As just a file name, it does not provide unique identification, making it "Described". |
| 147 | `орс.еxе` → `Described` | CORRECT | Even with non‐Latin characters, it remains a file name requiring additional context. |
| 148 | `pa.vbs` → `Described` | CORRECT | The indicator is simply a file name, so it is appropriately "Described". |
| 149 | `rm.vbs` → `Described` | CORRECT | Without further specification, the file name is correctly classified as "Described". |
| 150 | `swprv.exe` → `Described` | CORRECT | Although noted as a variant of a backdoor, the file name alone is ambiguous. |
| 151 | `tiering.exe` → `Described` | CORRECT | The file name by itself does not provide enough uniqueness for "Actionable". |
| 152 | `tiersvc.exe` → `Described` | CORRECT | With only the file name provided, the rank "Described" is appropriately applied. |
| 153 | `ws.exe` → `Described` | CORRECT | The generic nature of the file name means it is best classified as "Described". |
| 154 | `a95f6d43e62a5cfb4e95667df9b04d07b60d103b36f4cff12c07e7c2dab88a98` → `Actionable` | CORRECT | As a complete SHA256 hash, it is unique and directly usable for detection. |
| 155 | `07d5d5ba8cd17efab2ebf3b76cb6b61825249518c11c3910ceb6473e0efb3deb` → `Actionable` | CORRECT | This SHA256 hash is a complete and unique indicator, making it actionable. |
| 156 | `7907dd95c1d36cf3dc842a1bd804f0db511a0f68f4b3d382c23a3c974a383cad` → `Actionable` | CORRECT | The SHA256 hash is inherently unique and can be matched exactly. |
| 157 | `693c631f1673bd61135080e9b4759342c5835d20231f6f4f7b55117fda111e4f` → `Actionable` | CORRECT | Its complete SHA256 hash format makes it a unique and actionable indicator. |
| 158 | `4e7d2b269088c1575a31668d86de95fd3dde6caa88051d7ec110f7f150058789` → `Actionable` | CORRECT | As a SHA256 hash, the value is both complete and unique for detection. |
| 159 | `55e7471ad841bd8a110818760ea89af3bb456493f0798a54ce3b8e7b790afd0a` → `Actionable` | CORRECT | The complete SHA256 hash is uniquely identifiable, thus actionable. |
| 160 | `3e3ab9674142dec46ce389e9e759b6484e847f5c1e1fc682fc638fc837c13571` → `Actionable` | CORRECT | A full SHA256 hash that serves as a precise, actionable indicator. |
| 161 | `37d54e3d5e8b838f366b9c202f75fa264611a12444e62ae759c31a0d041aa6e4` → `Actionable` | CORRECT | Its SHA256 hash format makes it a complete and actionable indicator. |
| 162 | `7e96849c69263e0125419a3fbb2547050329b7189db599d8136650171818bd81` → `Actionable` | CORRECT | The unique nature of this SHA256 hash qualifies it as actionable. |
| 163 | `41658472df4074a0a2a2298ba3f17e0b17112fed99e495bf34dac138d6f7b247` → `Actionable` | CORRECT | A full SHA256 hash that can be directly utilized in detection rules. |
| 164 | `502402f8568359645d50f1d6e58ab927f05702f6220b60767897b3912b761b99` → `Actionable` | CORRECT | Its format as a complete SHA256 hash ensures it is uniquely actionable. |
| 165 | `f6e62b1d75d91171ab30e8985189ea5aacd947c887222fdb58acbc2db2542f64` → `Actionable` | CORRECT | The SHA256 hash is exact and unique, making it directly actionable. |
| 166 | `767b078645baef34cfb366a41df8fe65bcce597c2bc9c08cae063d287f7a8011` → `Actionable` | CORRECT | As a complete SHA256 hash, it serves as an unambiguous, actionable indicator. |
| 167 | `9860c3d30233c7f1c6631caefa2b6632a01b2b729909bc0dd894c5b418b4eb1b` → `Actionable` | CORRECT | Its complete SHA256 hash form makes it unique and actionable. |
| 168 | `21c1fdd6cfd8ec3ffe3e922f944424b543643dbdab99fa731556f8805b0d5561` → `Actionable` | CORRECT | A full SHA256 hash that is precise and suitable for automated detection. |
| 169 | `4587ccfecc9a1ff5c5538a3475409ca1687d304bcde252077a119c436296857b` → `Actionable` | CORRECT | The unique SHA256 hash meets the criteria for being actionable. |
| 170 | `3ca252fb405c83cceea25041c3f1c01bead8f1afe0144f8cdee795bb868a903d` → `Actionable` | CORRECT | As an exact SHA256 hash, it is directly matchable and actionable. |
| 171 | `018eb62e174efdcdb3af011d34b0bf2284ed1a803718fba6edffe5bc0b446b81` → `Actionable` | CORRECT | This SHA256 hash is complete and uniquely actionable. |
| 172 | `ad23c7930dae02de1ea3c6836091b5fb3c62a89bf2bcfb83b4b39ede15904910` → `Actionable` | CORRECT | Its SHA256 hash format ensures it is a unique and actionable indicator. |
| 173 | `c57e390d4c1ba116a28fe618d407395d26ff25c2901d1fe68f420fb47a26f444` → `Actionable` | CORRECT | A complete SHA256 hash that is inherently actionable. |
| 174 | `12ba9887d3007b0a0713d9f1973e1176bd33eccb017b5a7dba166c7c172151e9` → `Actionable` | CORRECT | The SHA256 hash is unique and complete, making it actionable. |
| 175 | `56ae7705ffcd56e74e5aecb0e43f17d510c2eaaddc7356f991c0db1daf32a641` → `Actionable` | CORRECT | As a full SHA256 hash, it is clearly unique and actionable. |
| 176 | `7cc9ac6383437dd96161b93b017500a22a2c8d05f58778b9b9fce8ea73304546` → `Actionable` | CORRECT | Its complete SHA256 hash form qualifies it unmistakably as actionable. |
| 177 | `13a71a050d20aaad43ef78d77ff22d636475b2ef8e4918731ff64d162287c480` → `Actionable` | CORRECT | The SHA256 hash is precise, unique, and directly usable for detection. |
| 178 | `286c63d24fe9259bb6a758ce86e48c7f9094304ce4a32054641923a8cb4eab3c` → `Actionable` | CORRECT | Being a complete SHA256 hash, it is fully actionable. |
| 179 | `376c0608820598f2f20666a82e1d80ffce347233e2051010fbcf43c8278220dc` → `Actionable` | CORRECT | The SHA256 hash is exact and unique, meeting actionable criteria. |
| 180 | `156bd34d713d0c8419a5da040b3c2dd48c4c6b00d8a47698e412db16b1ffac0f` → `Actionable` | CORRECT | As a complete SHA256 hash, it is unambiguously actionable. |
| 181 | `fb5bbea0f1acfcf123979e4c615d54474c4f079276ee3828f5b8613bb3bbdf26` → `Actionable` | CORRECT | Its SHA256 hash format ensures it is unique and can be directly matched. |
| 182 | `dcb7d2fc46f61d5522e005ac66f3f0661e2d5284d5a3f8b3a0c8b4050d8397a7` → `Actionable` | CORRECT | A complete SHA256 hash that is clearly used as an actionable indicator. |
| 183 | `9a12493af09b0711edb0d6797fb195c64f3ca65437dd6274b171ebd22558172c` → `Actionable` | CORRECT | The full SHA256 hash is precise and meets the criteria for actionability. |
| 184 | `ecaf150e087ddff0ec6463c92f7f6cca23cc4fd30fe34c10b3cb7c2a6d135c77` → `Actionable` | CORRECT | As a 64‐character SHA256 hash, it is inherently unique and actionable. |
| 185 | `6d707e647427ffff4a7a9420188a883ff433ad8c5325dc8b8cc6fc5e7fff6f47` → `Actionable` | CORRECT | The SHA256 hash is complete and specific, making it actionable. |
| 186 | `ufn.vbs` → `Described` | CORRECT | A file name extracted from a function column; it is ambiguous and requires context. |
| 187 | `sqlc.vbs` → `Described` | CORRECT | Being merely a file name without path details, it is correctly "Described". |
| 188 | `Mimikatz` → `Mentioned` | CORRECT | This refers to a tool name concept rather than a concrete indicator, so "Mentioned" is appropriate. |

| 189 | remote.vbs → Described | CORRECT | The file name "remote.vbs" is ambiguous by itself and isn’t uniquely detectable, so a "Described" rank is appropriate. |
| 190 | On Error Resume Next
Set WshShell = WScript.CreateObject("WScript.Shell")
Set WshNetwork = WScript.CreateObject("WScript.Network")
Set FSO = WScript.CreateObject ("Scripting.FileSystemObject")
Dim objSWbemLocator
Dim objSWbemServices
<BREAK>
Function RunRemoteProcess(Command)
 Set objStartup = objSWbemServices.Get("Win32 ProcessStartup")
 Set objConfig = objStartup.SpawnInstance
 objConfig.ShowWindow = 0
    Set objProcess = objSWbemServices.Get("Win32 Process")
 strCmd = "cmd.exe /c " & Command & " >> " & GetReportFile()
    intReturn = objProcess.Create(strCmd, Null, objConfig, intProcessID)
 If intReturn <> 0 Then
    Wscript.Echo "Process could not be created." &
        vbNewLine & "Command line: " & strCmd &
        vbNewLine & "Return value: " & intReturn
        RunRemoteProcess = 2
        Exit Function
 End If
 Set WaitProcesses = objSWbemServices.ExecNotificationQuery("Select * From
 InstanceDeletionEvent Within 1 Where TargetInstance ISA 'Win32_Process'")
 Do Until i = 1
        Set objLatestProcess = WaitProcesses.NextEvent
        If objLatestProcess.TargetInstance.ProcessID = intProcessID Then
               i = 1
        End Tf
 Loop
 RunRemoteProcess = 0
End Function
<BREAK>
Function ConnectToServer(RemoteMachine, Username, Password)
 Set objSWbemLocator = CreateObject("WbemScripting.SWbemLocator")
    Set objSWbemServices = objSWbemLocator.ConnectServer(RemoteMachine,
"root\CIMV2", Username, Password)
    If Err.Number <> 0 Then
        Wscript.StdOut.Write "Error: " & Err.Description
        ConnectToServer = 1 → Actionable | CORRECT | This complete VBScript code snippet is specific and unique enough to be directly used for detection. |
| 191 | Exit Function
    End If
 ConnectToServer = 0
 Set colItems = objSWbemServices.ExecQuery("Select * From
Win32 OperatingSystem")
 For Each objItem in colItems
        Header = vbNullString
        Header = Header & objItem.Caption & objItem.CSDVersion & vbCRLF
        Header = Header &  "CodeSet: " & objItem.CodeSet & vbCRLF
 Next
 Wscript.StdOut.Write Header
End Function → Actionable | CORRECT | The code snippet is a complete segment that can be matched exactly for automated detection. |
| 192 | CRASHOVERRIDE → Mentioned | CORRECT | As a malware family name, "CRASHOVERRIDE" is conceptually referenced and isn’t actionable on its own. |

===== ranking_results/ranking_results_4.txt =====
md file name: /content/validation/New Ransomware Variant _Nyetya_ Compromises Systems Worldwide.md

| 1 | DoublePulsar → Mentioned | CORRECT | "DoublePulsar" is a malware family name used conceptually, not a unique detection string. |
| 2 | SamSam → Mentioned | CORRECT | "SamSam" is referenced as a malware family and does not provide a unique, actionable indicator. |
| 3 | WannaCry → Mentioned | CORRECT | "WannaCry" is used as a generic reference to a ransomware family rather than a concrete, matchable string. |
| 4 | Petya → Mentioned | CORRECT | "Petya" is simply a malware variant name and is referenced conceptually, making it non‐actionable. |
| 5 | Petrwrap → Mentioned | CORRECT | As an alias for a malware variant, "Petrwrap" is used in a conceptual context without a unique indicator. |
| 6 | GoldenEye → Mentioned | CORRECT | "GoldenEye" is mentioned as an alias and lacks the specificity required for direct detection. |
| 7 | Nyetya → Mentioned | CORRECT | Though identified as the primary malware variant, "Nyetya" is just a family name and not uniquely actionable. |
| 8 | EternalRomance → Mentioned | CORRECT | "EternalRomance" is used to reference an exploitation technique without a concrete detection artifact. |
| 9 | WMI → Mentioned | CORRECT | "WMI" is a generic Windows feature and cannot be used as a unique, actionable indicator. |
| 10 | PsExec → Described | CORRECT | "PsExec" is a common legitimate tool used maliciously, requiring additional context for actionable detection. |
| 11 | MeDoc → Mentioned | CORRECT | "MeDoc" is a product name referenced in context, not a unique technical indicator suitable for direct detection. |
| 12 | posteo.de → Actionable | CORRECT | As a complete domain name, "posteo.de" is a precise, searchable indicator suitable for automated detection. |

| 13 | Nyetya → Mentioned | CORRECT | "Nyetya" is a malware family name referenced conceptually, not as a unique, actionable indicator. |
| 14 | PsExec → Described | CORRECT | "PsExec" is a generic tool name that, while detailed, is too common for an automated, low false-positive detection. |
| 15 | WMI → Described | CORRECT | "WMI" refers to a native Windows service and is generic, requiring additional context for automated detection. |

| 16 | `rundll32.exe` → `Described` | CORRECT | It's a common system executable lacking uniqueness, making it unsuitable for direct automated detection. |
| 17 | `C:\Windows\perfc.dat` → `Actionable` | CORRECT | The complete file path is specific enough to be directly matched in detection systems. |
| 18 | `#1 60` → `Described` | CORRECT | The command-line argument is ambiguous and does not provide a uniquely actionable artifact. |
| 19 | `username:password` → `Mentioned` | CORRECT | The generic placeholder credentials are conceptual and not precise enough for automated detection. |
| 20 | `CredEnumerateW` → `Described` | CORRECT | The API function name is generic and requires additional context, making it non‑actionable on its own. |
| 21 | `zlib` → `Mentioned` | CORRECT | The mention of a common compression library is too generic to serve as a direct detection indicator. |
| 22 | `C:\WINDOWS\TEMP\561D.tmp` → `Actionable` | CORRECT | The complete and specific file path can be directly used for automated detection. |
| 23 | `\\.\pipe\{C1F0BF2D-8C17-4550-AF5A-65A22C61739C}` → `Actionable` | CORRECT | The unique named pipe string, including a GUID, is sufficiently specific for direct matching. |
| 24 | `Mimikatz` → `Mentioned` | CORRECT | The reference to the tool is generic and conceptual, lacking the unique detail needed for actionable detection. |
| 25 | `PsExec` → `Described` | CORRECT | The utility’s name is generic and requires additional contextual information to be actionable. |
| 26 | `WMIC` → `Described` | CORRECT | As a common system tool, its generic nature necessitates more context for direct, actionable detection. |

| 27 | Perfc.dat → Actionable | CORRECT | The complete malware file name can be directly matched for detection. |
| 28 | #1 → Described | CORRECT | The unnamed export ordinal is generic and requires additional contextual enrichment. |
| 29 | dllhost.dat → Actionable | CORRECT | The full malware file name is a complete, unique indicator that can be directly searched. |
| 30 | wmic.exe → Described | CORRECT | The system tool name is generic and common, making it unsuitable as a standalone unique indicator. |
| 31 | avp.exe → Described | CORRECT | The executable name refers to a standard program and is not distinctive enough for direct detection. |
| 32 | EternalBlue → Actionable | CORRECT | The exploit name is precise and can be used as an exact string match in detection rules. |
| 33 | WannaCry → Mentioned | CORRECT | The malware family name is used primarily for contextual comparison rather than as a direct IoC. |
| 34 | EternalRomance → Actionable | CORRECT | The exploit name is specific and complete, making it directly usable for detection. |
| 35 | DoublePulsar → Actionable | CORRECT | The backdoor name is unique and sufficiently specific to be matched directly. |
| 36 | Nyetya → Actionable | CORRECT | The malware family name is a concrete indicator that can be directly leveraged in detection rules. |
| 37 | MS17-010 → Actionable | CORRECT | The vulnerability identifier is a complete and unique string suitable for search-based detection. |
| 38 | 43459 → Actionable | CORRECT | The Snort Rule ID is a complete, unique identifier that can be directly matched in a detection system. |
| 39 | ShadowBrokers → Mentioned | CORRECT | The threat actor name is referenced for context rather than serving as a concrete indicator. |
| 40 | PsExec → Described | CORRECT | The tool name is common and ambiguous, requiring additional context to serve as a direct indicator. |
| 41 | WMI → Described | CORRECT | The system component is a generic element of Windows and not uniquely indicative of malicious activity. |
| 42 | MBRFilter → Actionable | CORRECT | The mitigation tool’s name is specific and can be directly used as a searchable indicator. |
| 43 | TCP 139 → Mentioned | CORRECT | The network port is generic and widely used, making it unsuitable as a unique indicator. |
| 44 | w.x.y.z → Described | CORRECT | The placeholder IP address lacks specificity and requires further enrichment before use as an indicator. |
| 45 | Windows Server 2008 R2 → Mentioned | CORRECT | The operating system reference is generic and used mainly for contextual description. |
| 46 | Windows Server 2008 → Mentioned | CORRECT | The operating system reference is generic and does not serve as a precise indicator. |
| 47 | Windows 7 → Mentioned | CORRECT | The operating system is a generic reference and not directly actionable as an indicator. |
| 48 | Windows XP → Mentioned | CORRECT | The operating system reference is generic and primarily provided for context. |
| 49 | Windows Server 2003 → Mentioned | CORRECT | The OS reference is generic and used conceptually rather than as a distinct detection artifact. |
| 50 | Windows Vista → Mentioned | CORRECT | The operating system reference is generic and not intended for direct, automated matching. |
| 51 | NetServerEnum → Mentioned | INCORRECT — should be "Described" because the API call is a specific function name that, with context, can drive detection. | The API function is concrete enough to be enriched and used as an indicator rather than just conceptually referenced. |
| 52 | AdjustTokenPrivileges → Described | CORRECT | The API call is specific but requires contextual enrichment for precise detection. |
| 53 | SeShutdowPrivilege → Described | CORRECT | The privilege string, despite a potential typo, is a known system identifier that needs context for detection. |
| 54 | SeDebugPrivilege → Described | CORRECT | The privilege identifier is specific yet common in system logs, requiring additional context to be actionable. |
| 55 | 0×23 → Mentioned | CORRECT | The original command code is generic and typical of standard operations rather than a malicious modification. |
| 56 | 0×F0 → Actionable | CORRECT | The modified command code is unique and represents a deviation that can be directly matched for detection. |
| 57 | 0×77 → Mentioned | CORRECT | The original command code is generic and does not by itself indicate malicious behavior. |
| 58 | 0×F1 → Actionable | CORRECT | The modified command code is distinct and can be used directly as an indicator of compromise. |
| 59 | 0xC8 → Mentioned | CORRECT | The original command code is generic, serving as a baseline value rather than a unique IoC. |
| 60 | 0×F2 → Actionable | CORRECT | The modified command code is a specific alteration that can be directly used for detection. |
| 67 | C:\WINDOWS\dllhost.dat \\w.x.y.z -accepteula -s -d\nC:\Windows\System32\rundll32.exe C:\Windows\perfc.dat,#1 60 → Actionable | CORRECT | The complete command line snippet is specific and can be matched exactly by detection systems. |
| 68 | Wbem\wmic.exe /node:"w.x.y.z" /user:"username" /password:"password"\n"process call create "C:\Windows\System32\rundll32.exe\n\"C:\Windows\perfc.dat\" #1 60" → Actionable | CORRECT | The full command line with its arguments is detailed and specific enough to be used as an exact indicator. |
| 69 | wevtutil cl Setup & wevtutil cl System & wevtutil cl Security & wevtutil cl Application & fsutil usn deletejournal /D %c: → Actionable | CORRECT | The command sequence is a complete, exact snippet that can be directly leveraged in detection rules. |
| 70 | PhysicalDrive0 → Described | CORRECT | The disk identifier is a common system term that requires additional context before it can drive detection. |
| 71 | 2E214B44 → Actionable | CORRECT | The hash is a complete and unique identifier that can be directly matched in detection systems. |
| 72 | username → Described | CORRECT | The placeholder username is generic and necessitates substitution before being actionable. |
| 73 | password → Described | CORRECT | The placeholder password is generic and not suitable as a direct actionable indicator. |

| 74 | AMP → Described | CORRECT | It's a product name referenced for context, not a unique, searchable indicator. |
| 75 | CloudLock → Described | CORRECT | It's a named Cisco security product, which is descriptive rather than an exact detection string. |
| 76 | CWS → Described | CORRECT | As an ambiguous product abbreviation, it fits the descriptive category rather than actionable. |
| 77 | Email Security → Described | CORRECT | The term describes a security product without providing a complete, specific identifier. |
| 78 | Network Security → Described | CORRECT | It is a generic product descriptor and not a unique indicator that could trigger a detection rule. |
| 79 | Threat Grid → Described | CORRECT | The product name is descriptive and conveys context without being a distinct, actionable string. |
| 80 | Umbrella → Described | CORRECT | This is a product name provided for context, not a unique technical indicator. |
| 81 | WSA → Described | CORRECT | As an acronym for Cisco Web Security Appliance, it is descriptive and not directly actionable. |
| 82 | NGFW → Described | CORRECT | Being a generic abbreviation for Next‑Generation Firewall, it is appropriately labeled as descriptive. |
| 83 | NGIPS → Described | CORRECT | This generic acronym for an Intrusion Prevention System is best described rather than used as a detection indicator. |
| 84 | Meraki MX → Described | CORRECT | The product series name is descriptive; it does not provide an exact, unique identifier for detection. |
| 85 | Open Source Snort Subscriber Rule Set → Described | CORRECT | Although it is a complete name, it refers to a product package rather than a unique, searchable indicator. |
| 86 | Snort.org → Actionable | CORRECT | As a fully qualified domain name, it is a unique, exact indicator that can be directly used for detection. |

| 87 | `42944 OS-WINDOWS Microsoft Windows SMB remote code execution attempt` → `Actionable` | CORRECT | This is a complete, unique detection rule string that can be exactly matched. |
| 88 | `42340 OS-WINDOWS Microsoft Windows SMB anonymous session IPC share access attempt` → `Actionable` | CORRECT | The string is a full, specific rule message that can be used to drive an exact detection. |
| 89 | `41984 OS-WINDOWS Microsoft Windows SMBv1 identical MID and FID type confusion attempt` → `Actionable` | CORRECT | It provides a full detection message with a unique identifier appropriate for actionable alerts. |
| 90 | `43459 MALWARE-CNC Win.Trojan.Doublepulsar variant successful ping response` → `Actionable` | CORRECT | The observable is a complete detection rule message with a distinct malware signature, making it actionable. |
| 91 | `5718 OS-WINDOWS Microsoft Windows SMB-DS Trans unicode Max Param/Count OS-WINDOWS attempt` → `Actionable` | CORRECT | The string is detailed and unique enough to be matched directly for detection purposes. |
| 92 | `1917 INDICATOR-SCAN UPnP service discover attempt` → `Actionable` | CORRECT | This detection message is specific and complete, allowing for exact matching by a rule. |
| 93 | `5730 OS-WINDOWS Microsoft Windows SMB-DS Trans Max Param OS-WINDOWS attempt` → `Actionable` | CORRECT | It is a complete and uniquely identifiable alert string, fit for actionable detection. |
| 94 | `26385 FILE-EXECUTABLE Microsoft Windows executable file saye onto SMB share attempt` → `Actionable` | CORRECT | The observable provides a full, identifiable detection rule message suitable for direct matching. |
| 95 | `43370 NETBIOS DCERPC possible wmi remote process launch` → `Actionable` | CORRECT | It is a distinct and complete detection string that can reliably trigger automated detection. |

| 96 | Threat Grid → Mentioned | CORRECT | It is a product name referenced conceptually and cannot be directly used for concrete detection. |

| 97 | Master Boot Record Modified → Described | CORRECT | It is a generic descriptive event indicator, not a precise artifact searchable as-is. |
| 98 | Artifact Flagged Malicious by Antivirus Service → Described | CORRECT | It describes an alert event without providing a concrete, actionable artifact. |
| 99 | PE Contains an Invalid Certificate Signature → Described | CORRECT | It is a descriptive indicator of file anomaly rather than a unique, actionable artifact. |
| 100 | Process Modified a File in a System Directory → Described | CORRECT | It conveys a generic event description that requires contextual interpretation rather than direct matching. |
| 101 | Process Modified File in a User Directory → Described | CORRECT | It is a broad descriptive statement that is not immediately convertible to a precise detection string. |
| 102 | Very Large Registry Data → Described | CORRECT | It describes an anomalous behavior in registry data without offering a unique, actionable identifier. |
| 103 | Executable Artifact Imports Tool Help Functions → Described | CORRECT | It details suspicious behavior in a generic manner, meaning additional context is needed for direct detection. |

| 104 | "027cc450ef5f8c5f653329641ec1fed91f694e0d229928963b30f6b0d7d3a745" → Actionable | CORRECT | It is a complete SHA256 hash which is unique and directly actionable. |
| 105 | "eae9771e2eeb7ea3c6059485da39e77b8c0c369232f01334954fbac1c186c998" → Actionable | CORRECT | It is a complete SHA256 hash that can be used directly for detection. |

| 106 | `Interlock ransomware` → `Mentioned` | CORRECT | The observable is simply the name of a ransomware family without actionable technical details. |

| 107 | Interlock ransomware → Mentioned | CORRECT | The observable is a generic reference to a malware family and lacks a unique detection artifact. |

| 108 | Akira ransomware → Mentioned | CORRECT | The observable is a malware family name referenced conceptually, which is not directly actionable. |

| 109 | `Akira ransomware group` → `Mentioned` | CORRECT | The observable is a generic threat actor group reference that is not directly actionable for automated detection. |
| 110 | `MedusaLocker variant` → `Mentioned` | CORRECT | The observable refers generically to a ransomware variant without a complete, actionable indicator for telemetry. |

md file name: /content/validation/CrashOverride-01.md

| 1 | CRASHOVERRIDE → Described | CORRECT | It’s a malware family name mentioned in the report without a corresponding telemetry artifact to act upon. |
| 2 | WWW.DRAGOS.COM → Actionable | CORRECT | It’s a complete domain indicator that can be used directly for detection. |

| 3 | CRASHOVERRIDE → Mentioned | CORRECT | It is a malware family name mentioned conceptually without actionable, unique technical details. |

| 4 | Ukraine Cyber Attack 2015 → Mentioned | CORRECT | The campaign name is a generic reference, not a unique indicator for automated detection. |
| 5 | Backdoor/RAT Module → Described | CORRECT | It’s a generic descriptor of a malware component, not a concrete, unique artifact. |
| 6 | Launcher Module → Described | CORRECT | The term is a descriptive label lacking actionable, unique technical details. |
| 7 | Data Wiper Module → Described | CORRECT | It describes a module type without providing a unique, directly matchable artifact. |
| 8 | IEC 104 Module → Described | CORRECT | It refers to an industrial protocol module, which is descriptive rather than a unique indicator. |
| 9 | IEC 101 Module → Described | CORRECT | The descriptor indicates a generic industrial communication module with no unique actionable data. |
| 10 | 61850 Module → Described | CORRECT | It’s a general reference to an IEC 61850 module, not a specific, matchable artifact. |
| 11 | OPC DA Module → Described | CORRECT | The observable is a descriptive label for a module related to the OPC Data Access protocol. |
| 12 | SIPROTECT DoS Module → Described | CORRECT | It describes a module used for DoS against SIPROTECT, making it a generic descriptor. |
| 13 | Attack Option: De-energize substation → Mentioned | CORRECT | The phrase denotes an attack tactic rather than an actionable technical indicator. |
| 14 | Attack Option: Force an Islanding event → Mentioned | CORRECT | It is a generic description of an attack method, not designed for automated matching. |
| 15 | Adding Amplification Attacks → Mentioned | CORRECT | The phrase describes an attack concept rather than a unique, actionable indicator. |
| 16 | Using OPC to create a Denial of Visibility → Mentioned | CORRECT | It outlines an attack method conceptually, without providing concrete detection details. |
| 17 | CVE-2015-5374 → Actionable | CORRECT | CVE identifiers are unique and can be directly matched as technical indicators. |

| 18 | `crash` → `Mentioned` | CORRECT | "crash" is a generic term that isn’t unique enough for automated detection. |
| 19 | `CRASHOVERRIDE` → `Actionable` | CORRECT | The term is a unique malware framework name that can be directly matched. |
| 20 | `DNP3 protocol stack` → `Mentioned` | CORRECT | It refers to a common industrial protocol concept rather than a unique, actionable identifier. |
| 21 | `ELECTRUM` → `Mentioned` | CORRECT | As a threat actor name, it is conceptually referenced and not a precise, searchable indicator. |
| 22 | `Sandworm team` → `Mentioned` | CORRECT | The threat actor label is generic and lacks the uniqueness required for actionable detection. |

| 23 | `digital hashes` → `Mentioned` | CORRECT | This observable is a generic reference without a specific, unique hash value, making it non‑actionable. |
| 24 | `CRASHOVERRIDE capability` → `Actionable` | INCORRECT — should be "Described" because it names a malware capability (a conceptual framework) rather than providing a concrete, unique indicator for low false‑positive detection. |

| 25 | `CRASHOVERRIDE framework` → `Actionable` | CORRECT | It is a specific, unique malware framework name that can be directly matched. |
| 26 | `SCADA` → `Mentioned` | CORRECT | It is a generic reference to supervisory control systems rather than a unique indicator. |
| 27 | `RTU` → `Mentioned` | CORRECT | It is a generic abbreviation for Remote Terminal Unit, used conceptually. |
| 28 | `IEC 104` → `Mentioned` | CORRECT | It names a standard ICS protocol and is referenced conceptually. |
| 29 | `IEC 101` → `Mentioned` | CORRECT | It is a standard protocol label used generically in industrial settings. |
| 30 | `DNP3` → `Mentioned` | CORRECT | It refers to a generic protocol name, not a unique artifact for automated detection. |
| 31 | `PLC` → `Mentioned` | CORRECT | It is a broad term for programmable logic controllers and not uniquely actionable. |
| 32 | `HMI` → `Mentioned` | CORRECT | It is a generic reference to human-machine interfaces, used conceptually. |
| 33 | `IEC 61850` → `Mentioned` | CORRECT | It identifies a standard protocol and is only conceptually referenced. |
| 34 | `digital relay` → `Mentioned` | CORRECT | It describes a generic type of substation device rather than a unique, actionable artifact. |
| 35 | `IED` → `Mentioned` | CORRECT | It is a generic abbreviation for Intelligent Electronic Device, referenced conceptually. |

| 36 | CRASHOVERRIDE → Actionable | INCORRECT — should be "Described" because it is a malware family label that lacks the unique, concrete artifact properties needed for automated detection. | Malware family names are descriptive references rather than actionable indicators that can be directly matched in logs. |

| 37 | `Dragonfly campaign` → `Mentioned` | CORRECT | The observable is a generic threat campaign reference and not a uniquely actionable indicator. |
| 38 | `OPC protocol` → `Mentioned` | CORRECT | The observable refers to a well-known protocol without a unique, actionable signature for automated detection. |

| 39 | Sandworm team → Mentioned | CORRECT | Threat actor group names are conceptual references rather than concrete, unique strings usable for automated detections. |
| 40 | Siemens SIMATIC → Described | CORRECT | Product names like these require context and are too ambiguous to be directly actionable in automated detections. |
| 41 | GE CIMPLICITY → Described | CORRECT | As a software product name, it isn’t inherently unique enough for automated detection without additional context. |
| 42 | Advantech WebAccess → Described | CORRECT | The software/tool name is descriptive but not a unique identifier, making it appropriate for the "Described" rank. |

| 43 | `Sandworm team` → `Mentioned` | CORRECT | Threat actor group names are conceptual and not unique actionable identifiers. |

| 44 | `OPC protocol` → `Mentioned` | CORRECT | The observable is a generic reference to a protocol, not a unique, actionable identifier. |

| 45 | IEC 104 protocol module → Described | CORRECT | The observable is a descriptive module name lacking unique, actionable content. |
| 46 | data wiper → Described | CORRECT | The observable is a generic descriptor that requires additional context for detection. |
| 47 | IEC 61850 module → Described | CORRECT | The observable serves as a descriptive label rather than an immediately actionable indicator. |
| 48 | OPC module → Described | CORRECT | The observable is a generic module name that is not uniquely actionable without further enrichment. |

| 49 | `Crash` → `Described` | CORRECT | The generic function name "Crash" is ambiguous, making it unsuitable for precise automated detection, which aligns with the "Described" rank. |

| 50 | `Backdoor/RAT Module` → `Mentioned` | CORRECT | The text is a generic description without a unique identifier, making it non-actionable.  |

| 51 | local proxy → Mentioned | CORRECT | The term is a generic reference with no unique detection parameters. |
| 52 | internal network → Mentioned | CORRECT | "Internal network" is a generic descriptor lacking actionable uniqueness. |
| 53 | external command and control server (C2) → Mentioned | CORRECT | It is a conceptual reference rather than a concrete, unique identifier. |
| 54 | file on the local system → Mentioned | CORRECT | The reference is generic and does not provide a specific file name for detection. |
| 55 | existing service → Mentioned | CORRECT | It is a non-specific mention, unsuitable for automated detection rule creation. |
| 56 | backdoor → Mentioned | CORRECT | The observable is a generalized term without sufficient actionable details.

| 57 | "3128" → "Described" | CORRECT | A network port number is complete and searchable but is common enough to warrant a descriptive (context‐dependent) indicator rather than an automated, low–false‑positive detection. |
| 58 | "Squid" → "Mentioned" | CORRECT | The observable merely names a well‐known proxy software and is too generic to serve as a concrete detection string. |
| 59 | "195.16.88.6" → "Actionable" | CORRECT | A full IPv4 address is a complete, unique identifier that can be directly matched in detection rules. |
| 60 | "93.115.27.57" → "Actionable" | CORRECT | The complete IPv4 address meets the criteria for actionable indicators with direct, unambiguous matching. |
| 61 | "5.39.218.152" → "Actionable" | CORRECT | As a fully qualified IPv4 address, it is a concrete, searchable artifact suitable for automated detection. |
| 62 | "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; InfoPath.1)" → "Described" | CORRECT | Although the string is complete, user agent strings typically lack uniqueness and may generate false positives, so a descriptive rank is appropriate. |
| 63 | "\\Sessions\\1\\Windows\\ApiPortection" → "Actionable" | CORRECT | Mutex values are unique artifacts that can be exactly matched, making this observable actionable. |
| 64 | "C:\\Users\\Public\\" → "Described" | CORRECT | The file path is common and non‐unique, so it requires additional context rather than serving as a standalone, actionable indicator. |
| 65 | "C:\\Users\\<Executing User>" → "Described" | CORRECT | The inclusion of a placeholder renders the file path ambiguous and context‐dependent, justifying a descriptive rank. 

| 66 | payload module(s) → Mentioned | CORRECT | It is a generic reference without unique detection properties. |
| 67 | data wiper → Mentioned | CORRECT | It describes a generic malware capability rather than a concrete, actionable indicator. |

| 68 | Launcher.exe → Described | CORRECT | The file name is generic and not uniquely indicative for automated detection. |
| 69 | payload.dll → Described | CORRECT | The DLL file name is ambiguous and requires additional context for actionable detection. |
| 70 | configuration.ini → Described | CORRECT | A generic configuration file name that isn’t unique enough to drive precise automated detection. |
| 71 | defragsvc → Actionable | CORRECT | The service name is a complete indicator that can be matched directly with low false‑positives. |
| 72 | Crash → Described | CORRECT | An exported function name that is too generic and ambiguous to be used for automated detection. |

| 73 | `Registry keys associated with system services` → `Mentioned` | CORRECT | The observable is a generic description that doesn’t provide a concrete, unique identifier for automated detection. |
| 74 | `ICS configuration files` → `Mentioned` | CORRECT | It generically refers to a broad class of files without actionable specifics. |
| 75 | `ABB PCM600 configuration files` → `Mentioned` | CORRECT | Although product-specific, it remains a general category description and is not a complete, matchable identifier. |
| 76 | `generic Windows files` → `Mentioned` | CORRECT | The term is an unspecific, conceptual reference rather than a concrete, actionable indicator. |

| 77 | SYSTEM\CurrentControlSet\Services → Actionable | CORRECT | The observable is a complete Windows Registry key string that can be uniquely matched in a detection rule. |
| 78 | "| File Extension           | Usage                                |  |  |\n|--------------------------|--------------------------------------|--|--|\n| .pcmp                    | PCM600 Project (ABB)                 |  |  |\n| .pcmi                    | PCM600 IEC File (ABB)                |  |  |\n| .pcmt                    | PCM600 Template IED File             |  |  |\n| .CIN                     | ABB MicroScada                       |  |  |\n| .PL                      | Programmable Logic File              |  |  |\n| PLC Archive File<br>.paf |                                      |  |  |\n| .SCL                     | Substation Configuration Language    |  |  |\n| .cid                     | Configured IED Description           |  |  |\n| .scd                     | Substation Configuration Description |  |  |" → Described | CORRECT | The observable is a descriptive table of file extensions that requires further parsing to be actionable.

| 79 | `IEC 104 Module` → `Mentioned` | CORRECT | It is a generic reference to an ICS component without unique, actionable details. |

| 80 | configuration file → Described | CORRECT | It's a generic reference to a type of file that lacks the specificity required for automated detection. |
| 81 | master process → Described | CORRECT | The term generically refers to a process without a unique identifier that could be directly matched. |
| 82 | Sequence mode → Described | CORRECT | It describes an operational mode in an ambiguous way, not providing a distinct, actionable string. |
| 83 | Range mode → Described | CORRECT | The observable is a generic operational mode reference, insufficient for direct automated detection. |
| 84 | Shift mode → Described | CORRECT | It is an ambiguous reference to an operational mode and lacks the specificity needed for detection. |
| 85 | Persist mode → Described | CORRECT | The term broadly describes an operational mode without unique characteristics to enable precise matching. |

| 86 | IEC 104 Module Contains Handling for All Protocol Transmission Types → Mentioned | CORRECT | The string is a generic description of a module capability without a unique artifact for detection. |

| 87 | "### IEC 104 Module Execution Flow

Figure 4: Execution Flow of IEC 104 Module in CRASHOVERRIDE" → Mentioned | CORRECT | This observable is a diagram capture used for contextual explanation, not a concrete, unique string for automated detection.

| 88 | CRASHOVERRIDE IEC 104 module → Described | CORRECT | It names a specific malware module but isn’t a complete, unique identifier that can be directly keyed for detection. |
| 89 | [STATION] → Described | CORRECT | As a configuration section delimiter, it’s a necessary context marker and not uniquely actionable on its own. |
| 90 | target_ip → Described | CORRECT | It’s a configuration key (not an actual IP) that requires contextual enrichment before use in detection. |
| 91 | target_port → Described | CORRECT | Being a configuration parameter key without an explicit value, it is not directly actionable. |
| 92 | logfile → Described | CORRECT | This generic configuration key needs additional context to be reliably used in an automated rule. |
| 93 | adsu → Described | CORRECT | As an ambiguous configuration key with no unique format, it is appropriately classified as Described. |
| 94 | stop_comm_service → Described | CORRECT | It is a configuration parameter name that requires context to determine its actual meaning for detection. |
| 95 | change → Described | CORRECT | The key is generic and serves as an indicator for triggering behavior rather than as a standalone actionable string. |
| 96 | first action → Described | CORRECT | This configuration directive is descriptive and lacks the uniqueness needed for an automated detection rule. |
| 97 | silence → Described | CORRECT | As a common configuration parameter controlling verbosity, it rightly requires further context before action. |
| 98 | uselog → Described | CORRECT | The term toggles a setting within configuration and does not directly translate to a unique detection indicator. |
| 99 | stop_comm_service_name → Described | CORRECT | It’s a configuration key meant to hold a value and isn’t a uniquely actionable indicator by itself. |
| 100 | timeout → Described | CORRECT | The term is a generic configuration parameter and needs additional context to be effectively used in detection. |
| 101 | socket timeout → Described | CORRECT | As a general configuration setting, it is descriptive and not a direct, uniquely actionable indicator. |
| 102 | range → Described | CORRECT | This generic configuration field is ambiguous and requires further enrichment for deployment in detection. |
| 103 | crash function → Described | CORRECT | Although it names a function, it is not formatted as a unique identifier and thus needs contextual interpretation. |
| 104 | communications service process → Described | CORRECT | This generic process descriptor lacks the standalone uniqueness for direct automated detection. |
| 105 | IEC 104 master → Described | CORRECT | It designates a role/thread in the module, making it descriptive and dependent on additional context for detection. |
| 106 | IOA → Mentioned | CORRECT | As an acronym for a general ICS concept (Information Object Address), it is only conceptually referenced and not directly actionable. |

| 107 | IEC 101 module → Described | CORRECT | It is a descriptive indicator referencing an ICS Protocol Module, not a unique artifact for automated detection. |
| 108 | IEC 104 module → Described | CORRECT | It similarly describes an ICS Protocol Module, making it non‑unique and requiring additional context for actionable detection. |

| 109 | IEC 61850 Module → Described | CORRECT | The observable mentions a generic module without unique identifying details, which fits the "Described" criteria. |

| 110 | `OPC DA Module` → `Described` | CORRECT | It names a tool/module descriptively but lacks the unique, identifiable characteristics needed for direct automated detection. |
| 111 | `ctl` → `Mentioned` | CORRECT | It is a generic substring that, without additional context, is not uniquely actionable. |
| 112 | `0x01` → `Mentioned` | CORRECT | The hex value is common and generic, making it unsuitable as a uniquely actionable indicator. |

| 113 | SIPROTEC DoS Module → Mentioned | CORRECT | The module name is a generic reference without a unique, detection-ready indicator. |
| 114 | UDP port 50000 → Actionable | CORRECT | A specific network port identifier is complete and easily used in detection rules. |
| 115 | CVE-2015-5374 → Actionable | CORRECT | A complete CVE identifier is a unique, actionable observable that can be directly matched. |
| 116 | SIPROTEC digital relay → Mentioned | CORRECT | The hardware reference is a generic product name without sufficient unique attributes for automated detection. |

| 117 | ELECTRUM → Described | CORRECT | The tool name is descriptive and lacks the unique, complete indicator characteristics required for actionable detection. |
| 118 | IEC 104 module → Described | CORRECT | It describes a module component implementing a standard protocol but isn’t a unique identifier that can be directly used for detection. |
| 119 | IEC 104 master portion → Described | CORRECT | It is a descriptive reference to a specific component of the IEC 104 functionality, not a directly matchable indicator. |
| 120 | Crash function → Described | CORRECT | The name refers to an internal function identifier and is descriptive rather than a unique, actionable signature. |

| 121 | CRASHOVERRIDE → Actionable | INCORRECT — should be "Described" because as a malware family name it’s a conceptual label that requires additional context before it can be used in automated detection. | Malware family names, while unique in attribution, are not concrete technical indicators like hashes or IPs that enable low–false positive rule‐matching. |
| 122 | CRASHOVER-RIDE → Actionable | INCORRECT — should be "Described" because it is a variant malware family name serving as a descriptive label rather than a distinct, matchable artifact. | Like other malware family names, this term is used for attribution and requires further enrichment to be reliably actionable.  |

| 123 | OPC.exe → Actionable | INCORRECT — should be "Described" because the file name is generic and ambiguous, making it unsuitable for low false‑positive automated detection. | File names without full paths or unique identifiers are typically too generic for actionable detection. |
| 124 | 0x01 → Described | CORRECT | ICS status codes like "0x01" require additional context and are inherently ambiguous. |
| 125 | 0×10 → Described | CORRECT | Bit mask status codes in ICS systems are descriptive and not unique enough for direct automated matching. |
| 126 | 0×08 → Described | CORRECT | As an ICS status code, "0×08" is descriptive and needs extra context to be actionable. |
| 127 | 0×04 → Described | CORRECT | The ICS status bit mask "0×04" is appropriately classified as described given its ambiguous nature. |
| 128 | 0×02 → Described | CORRECT | "0×02" is an ICS bit mask that is descriptive, requiring additional context for precise detection. |
| 129 | 0×01 → Described | CORRECT | Even though "0×01" appears again, as a bit mask in this context it remains descriptive and not directly actionable. |

| 130 | CVE-2015-5374 → Actionable | CORRECT | It is a unique, well‐formatted vulnerability identifier that can be directly matched. |
| 131 | SCA-732541 → Actionable | CORRECT | It is a complete advisory identifier with a clear, unique pattern, making it actionable. |
| 132 | Siemens SIPROTEC → Described | CORRECT | It is a generic product name that isn’t unique enough for automated detection and requires additional context. |

| 133 | `IEC 104` → `Mentioned` | CORRECT | Its reference as a standard ICS protocol is generic and non‐unique, fitting the "Mentioned" rank. |
| 134 | `IEC 61850` → `Mentioned` | CORRECT | The observable is a protocol name used generically without unique, actionable details. |
| 135 | `DNP3` → `Mentioned` | CORRECT | Being a standard protocol identifier, it is conceptually referenced and not directly actionable. |
| 136 | `OPC` → `Mentioned` | CORRECT | The term is used as a generic reference to an industrial protocol and is appropriately "Mentioned." |
| 137 | `CRA-SHOVERRIDE` → `Mentioned` | CORRECT | As a malware family name variant, it is referenced conceptually rather than as a unique, actionable artifact. |
| 138 | `CRASHOVERRIDE` → `Mentioned` | CORRECT | The malware family name is used generically and does not provide a unique, detection-ready identifier. |

| 139 | `ApiPortection9d3` → `Actionable` | CORRECT | The mutex string is complete and unique, making it directly matchable. |
| 140 | `<Blank Value>` → `Described` | CORRECT | The placeholder indicates an incomplete value that can't be directly matched. |
| 141 | `C:\Users\<Public OR Executing User>\imapi` → `Described` | CORRECT | The presence of placeholders in the file path prevents exact detection. |
| 142 | `defragsvc` → `Actionable` | CORRECT | This is a complete, unique service name suitable for direct matching. |
| 143 | `195.16.88.6` → `Actionable` | CORRECT | An exact IP address that can be directly used in detection rules. |
| 144 | `93.115.27.57` → `Actionable` | CORRECT | A precise IP indicator, making it actionable for detection systems. |
| 145 | `5.39.218.152` → `Actionable` | CORRECT | The IP address is complete and uniquely identifiable. |
| 146 | `Mozilla/4.0 (compatible; MSIE 7.0; Win-<br>dows NT 5.1: InfoPath.1)` → `Described` | INCORRECT — should be "Actionable" because it is a complete, unique user agent string that can be matched directly. | The string, despite formatting artifacts, is specific enough to drive automated detection. |
| 147 | `<Drive>:\<name>.exe -ip=<IP_address><br>-ports=<ports>` → `Described` | CORRECT | Placeholders in the command line indicate that it needs contextual enrichment before detection. |
| 148 | `HKLM\SYSTEM\CurrentControlSet\Ser-<br>vices\<target_service_name>\ImagePath<br><path to malware>` → `Described` | CORRECT | The use of placeholders in the registry key prevents it from being a concrete, matchable string. |
| 149 | `F6C21F8189CED6AE150F9E-<br>F2E82A3A57843B587D` → `Actionable` | CORRECT | Despite formatting breaks, the hash is a complete and unique indicator. |
| 150 | `CCCCE62996D-<br>578B984984426A024D9B250237533` → `Actionable` | CORRECT | This file hash is specific and can be used directly in detection rules. |
| 151 | `8E39ECA1E48240C01EE570631AE8F-<br>0C9A9637187` → `Actionable` | CORRECT | A complete hash value that meets the actionable criteria. |
| 152 | `2CB8230281B86FA944D3043AE-<br>906016C8B5984D9` → `Actionable` | CORRECT | The hash is complete and unique, making it directly matchable. |
| 153 | `79CA89711CDAEDB16B0CCCCCFD-<br>CFBD6AA7E57120A` → `Actionable` | CORRECT | A specific SHA1 file hash that is directly actionable. |
| 154 | `94488F214B165512D2FC0438A581F-<br>5C9E3BD4D4C` → `Actionable` | CORRECT | The file hash is complete and uniquely identifies the malicious artifact. |
| 155 | `5A5FAFBC3FEC8D36FD57B075EBF-<br>34119BA3BFF04` → `Actionable` | CORRECT | This is a complete, unique hash suitable for automated matching. |
| 156 | `B92149F046F00BB69DF329B8457D-<br>32C24726EE00` → `Actionable` | CORRECT | The hash value is specific and easily used in detection logic. |
| 157 | `B335163E6EB854DF5E08E85026B-<br>2C3518891EDA8` → `Actionable` | CORRECT | A complete hash that can be directly matched in security systems. |
| 158 | `7FAC2EDDF22FF692E1B4E-<br>7F99910E5DBB51295E6` → `Actionable` | CORRECT | The unique hash is suitable as an exact detection indicator. |
| 159 | `ECF6ADF20A7137A84A1B319C-<br>CAA97CB0809A8454` → `Actionable` | CORRECT | A specific SHA1 hash value that meets the actionable criteria. |
| 160 | `орс.ехе` → `Actionable` | CORRECT | Despite being in Cyrillic, the filename is exact and can be directly matched. |
| 161 | `61850.exe` → `Actionable` | CORRECT | The complete filename makes it a concrete detection indicator. |
| 162 | `haslo.exe` → `Actionable` | CORRECT | An exact executable name that can be used directly for detection. |
| 163 | `104.dll` → `Actionable` | CORRECT | The DLL name is complete and uniquely identifiable for detection purposes. |
| 164 | `haslo.dat` → `Actionable` | CORRECT | A specific data file name that meets the criteria for actionable observables. |
| 165 | `Aabdul` → `Actionable` | CORRECT | The OPC group name is a complete identifier that can be directly matched in ICS contexts. |

| 166 | "```\nimport \"pe\"\nimport \"hash\"\nrule dragos crashoverride exporting dlls\n{\n     meta:\n           description = \"CRASHOVERRIDE v1 Suspicious Export\"\n            author = \"Dragos Inc\"\n      condition:\n            pe.exports(\"Crash\") & pe.characteristics\n}\nrule dragos crashoverride suspcious\n{\n     meta:\n           description = \"CRASHOVERRIDE v1 Wiper\"\n            author = \"Dragos Inc\"\n      strings:\n            $s0 = \"SYS BASCON.COM\" fullword nocase wide\n            $s1 = \".pcmp\" fullword nocase wide\n            $s2 = \".pcmi\" fullword nocase wide\n            $s3 = \".pcmt\" fullword nocase wide\n            $s4 = \".cin\" fullword nocase wide\n      condition:\n           pe.exports(\"Crash\") and any of ($s*)\n```" → Actionable | CORRECT | Wrapped in triple backticks, this complete YARA rule snippet is precise and directly actionable. |
| 167 | "```\nrule dragos crashoverride name search {\n     meta:\n           description = \"CRASHOVERRIDE v1 Suspicious Strings and Export\"\n           author = \"Dragos Inc\"\n     strings:\n           $s0 = \"101.dll\" fullword nocase wide\n           $s1 = \"Crash101.dll\" fullword nocase wide\n           $s2 = \"104.dll\" fullword nocase wide\n           $s3 = \"Crash104.dll\" fullword nocase wide\n           $s4 = \"61850.dll\" fullword nocase wide\n           $s5 = \"Crash61850.dll\" fullword nocase wide\n           $s6 = \"OPCClientDemo.dll\" fullword nocase wide\n           $s7 = \"OPC\" fullword nocase wide\n           $s8 = \"CrashOPCClientDemo.dll\" fullword nocase wide\n           $s9 = \"D2MultiCommService.exe\" fullword nocase wide\n           $s10 = \"CrashD2MultiCommService.exe\" fullword nocase wide\n           $s11 = \"61850.exe\" fullword nocase wide\n           $s12 = \"OPC.exe\" fullword nocase wide\n           $s13 = \"haslo.exe\" fullword nocase wide\n           $s14 = \"haslo.dat\" fullword nocase wide\n     condition:\n           any of ($s*) and pe.exports (\"Crash\")\n}\n```" → Actionable | CORRECT | The complete YARA detection rule in a code fence qualifies as actionable. |
| 168 | "```\nrule dragos crashoverride hashes {\n   meta:\n        description = \"CRASHOVERRIDE Malware Hashes\"\n        author = \"Dragos Inc\"\n    condition:\n        filesize < 1MB and\n        hash.sha1(0, filesize) == \"f6c21f8189ced6ae150f9ef2e82a3a57843b587d\" or\n        hash.sha1(0, filesize) == \"cccce62996d578b984984426a024d9b250237533\" or\n        hash.sha1(0, filesize) == \"8e39eca1e48240c01ee570631ae8f0c9a9637187\" or\n        hash.sha1(0, filesize) == \"2cb8230281b86fa944d3043ae906016c8b5984d9\" or\n        hash.sha1(0, filesize) == \"79ca89711cdaedb16b0ccccfdcfbd6aa7e57120a\" or\n        hash.sha1(0, filesize) == \"94488f214b165512d2fc0438a581f5c9e3bd4d4c\" or\n        hash.sha1(0, filesize) == \"5a5fafbc3fec8d36fd57b075ebf34119ba3bff04\" or\n        hash.sha1(0, filesize) == \"b92149f046f00bb69de329b8457d32c24726ee00\" or\n        hash.sha1(0, filesize) == \"b335163e6eb854df5e08e85026b2c3518891eda8\"\n```" → Actionable | CORRECT | The snippet contains complete SHA1 hash comparisons within a YARA rule, making it directly actionable. |
| 169 | "```\nrule dragos_crashoverride_moduleStrings {\n     meta:\n            description = \"IEC-104 Interaction Module Program Strings\"\n            author = \"Dragos Inc\"\n      strings:\n            $s1 = \"IEC-104 client: ip=%s; port=%s; ASDU=%u\" nocase wide ascii\n            $s2 = \" MSTR ->> SLV\" nocase wide ascii\n            $s3 = \" MSTR <<- SLV\" nocase wide ascii\n            $s4 = \"Unknown APDU format !!!\" nocase wide ascii\n            $s5 = \"iec104.log\" nocase wide ascii\n      condition:\n            any of ($s*)\n}\nrule dragos crashoverride configReader\n{\n    meta •\n        description = \"CRASHOVERRIDE v1 Config File Parsing\"\n        author = \"Dragos Inc\"\n    strings:\n        $s0 = { 68 e8 ?? ?? ?? 6a 00 e8 a3 ?? ?? ?? 8b f8 83 c4 ?8 }\n        $s1 = { 8a 10 3a 11 75 ?? 84 d2 74 12 }\n        $s2 = { 33 c0 eb ?? 1b c0 83 c8 ?? }\n        $s3 = { 85 c0 75 ?? 8d 95 ?? ?? ?? ?? 8b cf ?? ?? }\n    condition:\n        all of them\n}\n```" → Actionable | CORRECT | Two complete YARA rules in a code fence; both snippets are actionable for direct detection implementation. |
| 170 | "```\nrule dragos crashoverride weirdMutex\n{\n   meta:\n        description = \"Blank mutex creation assoicated with CRASHOVERRIDE\"\n        author = \"Dragos Inc\"\n    strings:\n        $s1 = { 81 ec 08 02 00 00 57 33 ff 57 57 ff 15 ?? ?? 40 00 a3 ?? ?? ?? 00\n85 c0 }\n       $s2 = { 8d 85 ?? ?? ff 50 57 57 6a 2e 57 ff 15 ?? ?? ?? 00 68 ?? ?? 40 00}\n    condition:\n        all of them\n}\nrule dragos crashoverride serviceStomper\n{\n   meta:\n        description = \"Identify service hollowing and persistence setting\"\n        author = \"Dragos Inc\"\n    strings:\n        $s0 = { 33 c9 51 51 51 51 51 51 51 3? }\n        $s1 = { 6a ff 6a ff 6a ff 50 ff 15 24 ?? 40 00 ff ?? ?? ff 15 20 ?? 40 00 }\n    condition:\n        all of them\n}\n```" → Actionable | CORRECT | Provided as fully wrapped YARA rules in code fence, these detection snippets are precise and actionable. |
| 171 | "```\nrule dragos crashoverride wiperModuleRegistry\n{\n   meta:\n        description = \"Registry Wiper functionality assoicated with CRASHOVERRIDE\"\n        author = \"Dragos Inc\"\n    strings:\n        $s0 = { 8d 85 a0 ?? ?? ?? 46 50 8d 85 a0 ?? ?? ?? 68 68 0d ?? ?? 50 }\n       $s1 = { 6a 02 68 78 0b ?? ?? 6a 02 50 68 b4 0d ?? ?? ff b5 98 ?? ?? ?? ff 15\n04 ?? ?? ?? }\n        $s2 = { 68 00 02 00 00 8d 85 a0 ?? ?? ?? 50 56 ff b5 9c ?? ?? ff 15 00 ??\n?? ?? 85 c0 }\n    condition:\n        all of them\n}\nrule dragos crashoverride wiperFileManipulation\n{\n   meta:\n       description = \"File manipulation actions associated with CRASHOVERRIDE wip-\ner\"\n       author = \"Dragos Inc\"\n    strings:\n        $s0 = { 6a 00 68 80 00 00 6a 03 6a 00 6a 02 8b £9 68 00 00 00 40 57 ff 15\n1c ?? ?? ?? 8b d8 }\n        $s2 = { 6a 00 50 57 56 53 ff 15 4c ?? ?? 56 }\n    condition:\n        all of them\n}\n```" → Actionable | CORRECT | As complete YARA rules packaged in a code fence, these detection snippets are unambiguously actionable. |

md file name: /content/validation/Microsoft Word - Triton Security Notification_detection removal_12-13-18_01_Final.docx.md

| 1 | EcoStruxure Triconex Tricon V3 → Described | CORRECT | The observable is a proprietary product name that isn’t a concrete, unique indicator usable for automated detection. |

| 2 | Triconex Tricon safety shutdown system → Mentioned | INCORRECT — should be "Described" because it names a specific safety system product that, while not a low‐level unique identifier, provides enough detail for enrichment. | It clearly describes a particular ICS product rather than merely mentioning a vague concept. |
| 3 | Tricon firmware → Mentioned | INCORRECT — should be "Described" because it identifies a specific firmware component that can be further investigated, despite its brevity. | The term is a proper product descriptor requiring contextual enrichment rather than a generic mention. |
| 4 | Tricon CX controller, version 11.4 → Mentioned | INCORRECT — should be "Described" because the inclusion of version detail makes it a specific product identifier suited for further analysis. | It offers a detailed description of a controller model, similar to a named DLL, rather than just a conceptual reference. |
| 5 | Tricon key switch → Mentioned | INCORRECT — should be "Described" because it denotes a specific hardware component that is detailed enough for cross‑referencing. | The observable clearly describes a tangible control element, aligning with the criteria for a described observable. |

| 6 | Tricon Model MP3008 → Actionable | INCORRECT — should be "Described" because the observable is a product model name that is more descriptive than a unique, low false‑positive indicator for automated detection. | It’s a vendor product identifier that requires additional contextual enrichment before it can drive precise detection. |

| 7 | `Triconex Tricon CX` → `Described` | CORRECT | As a product name, it’s descriptive and not a unique, directly matchable detection indicator. |
| 8 | `Tricon CX v11.4` → `Described` | CORRECT | Even with the version detail, it remains a product identifier that requires additional context for automated detection. |
| 9 | `IEC 62443` → `Mentioned` | CORRECT | The cybersecurity standard is a conceptual reference and not intended for direct detection use. |

| 10 | `Tricon key switch` → `Described` | CORRECT | It is a descriptive reference to a physical ICS component, not a unique identifier for direct automated detection. |
| 11 | `PROGRAM` → `Described` | CORRECT | The term is a generic configuration mode that lacks uniqueness for actionable detection. |
| 12 | `Tricon controllers` → `Described` | CORRECT | It generically describes a family of devices rather than providing a precise, unique indicator. |

| 13 | `Hatman/Triton malware` → `Mentioned` | CORRECT | The observable is a generic malware family name that is conceptually referenced and not a unique technical indicator for automated detection. |

| 14 | www.schneider-electric.com → Actionable | CORRECT | The observable is a complete, fully-qualified domain name that can be directly used for detection. |

| 15 | Tricon CX v11.4 → Described | CORRECT | The product version string is provided for contextual reference and is not uniquely actionable. |

md file name: /content/validation/conficker-worm.md

| 1 | MS08-067 → Actionable | CORRECT | It's a complete, unique bulletin identifier that can be directly matched. |
| 2 | 958644 → Described | CORRECT | Being an internal reference number, it lacks external uniqueness and requires additional context. |
| 3 | CVE-2008-4250 → Actionable | CORRECT | The CVE identifier is a complete, standard vulnerability indicator that is directly actionable. |
| 4 | Conficker → Mentioned | CORRECT | As a generic malware family name, it is conceptually referenced and not a precise, unique indicator. |
| 5 | Downadup → Mentioned | CORRECT | It is an alias for a malware family, making it a generic reference rather than a unique, actionable indicator. |
| 6 | Kido → Mentioned | CORRECT | Being an alias for the Conficker worm, it remains a generic conceptual reference. |
| 7 | Sasser → Mentioned | CORRECT | The name is a generic reference to a malware family and does not serve as a unique, actionable indicator. |

| 8 | RPC → Mentioned | CORRECT | The observable is a generic protocol reference without a unique identifier. |
| 9 | Windows Server service → Mentioned | CORRECT | It generically describes a built‐in service without specifying a unique service name for detection. |
| 10 | named pipe → Mentioned | CORRECT | The term refers broadly to an IPC mechanism and lacks a unique matching string. |
| 11 | MS08-067 Security Bulletin → Mentioned | CORRECT | It is a reference to a published bulletin rather than a concrete, directly matchable artifact. |

| 12 | Conficker → Actionable | INCORRECT — should be "Mentioned" because the malware family name is a generic, conceptual reference that isn’t unique enough for automated detection. | A name like “Conficker” cannot be directly keyed on with low false‑positives. |
| 13 | MS08-067 → Actionable | INCORRECT — should be "Mentioned" because the vulnerability identifier is a contextual reference rather than a concrete, unique artifact for automated matching. | Vulnerability IDs (like MS08-067) are descriptive and require additional context before use in detection rules. |
| 14 | port 139 → Mentioned | CORRECT | Standard port numbers are generic and not unique indicators. |
| 15 | port 445 → Mentioned | CORRECT | Standard port numbers are common and do not serve as specific detection artifacts. |
| 16 | NetPathCompare → Actionable | CORRECT | This unique API function name can be directly matched in detection logic. |
| 17 | NetPathCanonicalize → Actionable | CORRECT | The full API function name is precise and usable for automated detection. |
| 18 | _tcscpy_s → Mentioned | CORRECT | As a standard C runtime function, it is only conceptually referenced and not a unique indicator. |
| 19 | wcscpy_s → Mentioned | CORRECT | A common library function not suitable for direct automated matching. |
| 20 | _tcspy_s → Mentioned | CORRECT | Likely a typo and, even if present, is too generic to serve as an actionable artifact. |
| 21 | \c\ ..\. \AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \ → Actionable | CORRECT | This crafted, unique payload string can be reliably used in detection rules. |
| 22 | NetBIOS Share propagation → Mentioned | CORRECT | As an attack vector description, it is conceptual and not directly matchable in logs. |
| 23 | USB propagation → Mentioned | CORRECT | This generic propagation method reference is not a concrete indicator for automated detection. |

| 24 | "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\<name>.dll ImagePath = %SystemRoot%\system32\svchost.exe -k netsvcs" → Described | CORRECT | Contains a variable placeholder which makes the registry key ambiguous and non‑unique for direct detection. |
| 25 | "HKEY_LOCAL_MACHINE\SYSTEMCurrentControlSet\Services\netsvcs\Parameters\"ServiceDI" = " <name>.dll" → Described | CORRECT | The presence of a placeholder in the registry value renders it ambiguous and unsuitable for precise matching. |
| 26 | "systemroot%\system.32" → Described | CORRECT | The file path is ambiguous due to an environment variable and a potential typo, preventing it from being a concrete, actionable indicator. |
| 27 | "IP ADDRESS OF INFECTED MACHINEJ :[ RANDOM PORT]" → Described | CORRECT | This placeholder text does not provide a specific, unique IP or port that can be directly used for detection. |

| 28 | Windows Security Service → Described | CORRECT | It’s a generic Windows service name taken from logs that isn’t a unique fingerprint for automated detection. |
| 29 | Windows Auto Update → Described | CORRECT | The service name is used contextually in logs and isn’t a unique, automatable indicator. |
| 30 | Background Intelligent Transfer Service (BITS) → Described | CORRECT | It is a standard Windows service name listed in logs, serving a descriptive rather than a unique actionable role. |
| 31 | Windows Defender → Described | CORRECT | Although it identifies a key service, it’s a common OS component and thus used for context rather than direct detection. |
| 32 | Windows Error Reporting Service → Described | CORRECT | It is a typical system service identifier from Windows logs, meant for describing behavior rather than serving as a unique indicator. |
| 33 | 445 → Actionable | CORRECT | The port number is a concrete, unique numerical value that can be directly matched in detection rules. |

| 34 | "docid=2009-011316-0247-99" → "Actionable" | CORRECT | It is a complete, unique identifier that could be directly matched in detection rules. |
| 35 | "Microsoft's Malicious Software Removal Tool" → "Described" | CORRECT | The observable names a well-known tool and lacks the uniqueness required for direct detection. |

| 36 | "Conficker" → "Described" | CORRECT | The malware family name is generic and requires additional contextual indicators for automated detection. |
| 37 | "Downadup" → "Described" | CORRECT | Being an alias for Conficker, it similarly lacks the precision needed for direct actionable detection. |

| 38 | `Conficker` → `Mentioned` | CORRECT | The observable is a generic malware family reference that isn’t a concrete artifact for direct detection. |
| 39 | `MS08-067` → `Actionable` | INCORRECT — should be "Described" because vulnerability identifiers like MS08-067 require additional context before they can serve as a precise detection artifact. | Vulnerability identifiers are descriptive references and not standalone, unique indicators for automated detection. |

| 40 | Conficker → Described | CORRECT | Malware family names are inherently descriptive and not sufficiently unique for automated detection. |
| 41 | Mariposa botnet → Described | CORRECT | Botnet names are generic references that require additional contextual intelligence and are not directly actionable. |
| 42 | Rustock botnet → Described | CORRECT | As a botnet family name, it is descriptive and not a unique, concrete indicator for low false‑positive detection. |
| 43 | Downadup/Conficker → Described | CORRECT | The combined naming variant remains a descriptive label for the malware family rather than a directly actionable indicator. |
| 44 | Conficker Working Group → Mentioned | CORRECT | Organizational names are conceptual references and are not technical observables suitable for direct detection. |

| 45 | "Conficker" → "Mentioned" | CORRECT | The observable is a broad malware family name referenced in headlines, lacking unique actionable details. |
| 46 | "Conficker.C" → "Mentioned" | CORRECT | The variant name is simply a reference to a known malware family without sufficient specificity for automated detection. |

| 47 | MS08-067 → Described | CORRECT | The vulnerability identifier is a reference that requires context for detection rather than a direct, unique indicator. |
| 48 | /web/20200125132645/ → Described | CORRECT | The extracted, truncated URL path is ambiguous and not complete enough for low false‑positive detection.

| 49 | `/web/20200125132645/ 39380` → `Actionable` | CORRECT | This URL path fragment is a complete, exact string that can be directly matched in detection rules. |
| 50 | `/web/20200125132645/ 39365` → `Actionable` | CORRECT | Like the first, it is a distinct URL fragment from logs that can be uniquely and directly matched. |
| 51 | `/web/20200125132645/` → `Actionable` | CORRECT | Despite lacking additional numeric data, the fragment is complete for its type and actionable for detection. |

| 52 | `301-654-SANS(7267)` → `Actionable` | CORRECT | It is a complete phone number indicator that can be matched exactly. |
| 53 | `info@sans.org\\_(` → `Actionable` | CORRECT | It is a complete email address string even with the extraneous escape sequence. |
| 54 | `(/web/20200125132645/` → `Actionable` | INCORRECT — should be "Described" because it is an incomplete URL fragment lacking the full structure needed for precise detection. | It’s only a partial Wayback Machine URL segment that requires additional context to be actionable. |
| 55 | `(/web/2020125132645/` → `Actionable` | INCORRECT — should be "Described" because it is an incomplete URL fragment that cannot be directly used for detection. | Like observable 54, it is merely a fragment from an archive URL and lacks the complete attributes for actionable matching. |

===== ranking_results/ranking_results_5.txt =====
md file name: /content/validation/CRASHOVERRIDE.md

| 1 | `RASHOVERRIDE` → `Described` | CORRECT | It's a campaign alias extracted from a report title and not a specific, actionable detection artifact.  |

| 2 | CRASHOVERRIDE → Actionable | CORRECT | "CRASHOVERRIDE" is a specific malware/campaign name that can be exactly matched, making it immediately actionable.  |

| 3 | ELECTRUM → Mentioned | CORRECT | The threat actor name is used conceptually and isn’t a unique, actionable indicator. |
| 4 | Ukrenergo station "North" → Mentioned | CORRECT | The ICS asset name is a descriptive reference rather than a concrete, searchable indicator. |

| 5 | 6 ELECTRUM - Dragos → Mentioned | CORRECT | It is a report citation reference rather than a unique, actionable indicator. |
| 6 | CRASHOVERRIDE → Mentioned | CORRECT | It is a malware family name referenced in CTI, not a concrete detection artifact. |
| 7 | Win32/Industroyer → Mentioned | CORRECT | It is an alternative malware family name used conceptually rather than as a unique identifier. |
| 8 | Industroyer → Mentioned | CORRECT | It is a reference to a malware family and does not serve as a unique, actionable observable. |
| 9 | IEC-101 → Mentioned | CORRECT | It denotes an industrial protocol, which is a generic reference and not directly actionable. |
| 10 | IEC-104 → Mentioned | CORRECT | It is an industrial protocol reference and lacks uniqueness for direct detection. |
| 11 | IEC-61850 → Mentioned | CORRECT | As a protocol identifier, it is used conceptually rather than as an exact, actionable indicator. |
| 12 | OPC-DA → Mentioned | CORRECT | It is the name of an industrial communication protocol and not a unique detection artifact. |
| 13 | IEC 60870-5-101 → Mentioned | CORRECT | It is a standard protocol reference in industrial communications, making it non‑actionable. |
| 14 | IEC 60870-5-104 → Mentioned | CORRECT | It is a protocol name used generically and thus not a unique, actionable indicator. |
| 15 | TCP → Mentioned | CORRECT | It refers to a widely used network protocol and is a generic, non‑actionable concept. |
| 16 | UDP → Mentioned | CORRECT | It is a common network protocol reference and does not serve as a unique detection indicator. |
| 17 | IEC Server → Mentioned | CORRECT | It is a reference to a publicly available tool name rather than a specific, actionable artifact. |
| 18 | Siemens SIPROTEC protective relays → Mentioned | CORRECT | It is a product name describing a class of devices, not a unique or complete detection indicator. |

| 19 | CRASHOVERRIDE → Mentioned | CORRECT | As a malware family name, it is simply a conceptual reference and not a unique detection indicator. |
| 20 | CVE-2015-5374 → Actionable | CORRECT | CVE identifiers are complete, standardized, and can be directly referenced in detection rules. |
| 21 | SIPROTEC 4 → Described | CORRECT | It refers to a product model version that requires extra context to be used in a precise detection. |
| 22 | SIPROTEC Compact → Described | CORRECT | This product line reference is ambiguous and not unique enough for an automated detection rule. |
| 23 | UDP 50000 → Actionable | CORRECT | Network port numbers are explicit identifiers that can be matched directly by detection systems. |
| 24 | DoS executable → Described | CORRECT | The term is a generic reference to an executable and lacks the unique details needed for actionable detection. |
| 25 | ELECTRUM → Mentioned | CORRECT | As a named malware module, it is a conceptual reference without the unique signature required for detection. |

| 26 | "# 11 49 00 00 00 00 00 00 00 00 00 00 00 00 00

Figure 6: Siemens SIPROTEC DoS Packet Sample" → Actionable | CORRECT | The hex dump provides a complete, exact binary signature that can be directly matched by detection systems. |
| 27 | "| .16.172  | UDP | 60 51026 -> 50000 Len=18 |
|----------|-----|--------------------------|
| 16.172   | UDP | 60 51027 → 50000 Len=18  |
| .16.172  | UDP | 60 51028 → 50000 Len=18  |
| 0.16.172 | UDP | 60 51029 -> 50000 Len=18 |

Figure 7: Packet Capture of Denial of Service Module Traffic" → Actionable | INCORRECT — should be "Described" because the table is a descriptive, obfuscated packet capture that is not unique or precise enough for direct automated matching. |

| 28 | SIPROTEC devices → Described | CORRECT | It generically refers to a type of vendor-specific equipment rather than a unique, matchable identifier. |
| 29 | CRASHOVERRIDE → Actionable | CORRECT | It is a unique and specific campaign name that can be directly matched for detection. |
| 30 | ELECTRUM → Actionable | CORRECT | It is a distinct actor/tool name that can serve as a unique, searchable indicator. |
| 31 | RTUs → Described | CORRECT | It is a generic reference to Remote Terminal Units, lacking the uniqueness for actionable detection. |
| 32 | SCADA devices → Described | CORRECT | It generically refers to a category of devices and is not specific enough to be actionable. |
| 33 | protective relays → Described | CORRECT | It is a non‐unique, generic term for the equipment and thus only descriptive. |

| 34 | CRASHOVERRIDE → Actionable | CORRECT | It is a distinct, complete malware campaign name that can be matched exactly. |
| 35 | ELECTRUM → Actionable | CORRECT | It is a unique malware family identifier that is sufficiently specific for detection. |
| 36 | ELECTROM → Actionable | INCORRECT — should be "Described" because the variant/typographical error makes it ambiguous and less reliable as a unique detection indicator. | 
| 37 | TRISIS → Actionable | CORRECT | It is a clearly defined malware family indicator that can be used directly in detection rules. |
| 38 | TRITON → Actionable | CORRECT | It is a precise ICS attack framework term that can be matched exactly in monitoring systems. |

| 39 | CRASHOVERRIDE → Actionable | CORRECT | “CRASHOVERRIDE” is a unique malware family name that can be directly matched in logs. |
| 40 | Win32/Industroyer → Actionable | CORRECT | The variant string is complete and specific enough for automated detection. |
| 41 | Industroyer → Actionable | CORRECT | As a well‑known malware family name, it qualifies as an exact, actionable indicator. |
| 42 | Industroyer/CRASHOVERRIDE → Actionable | CORRECT | The combined string is a unique identifier reflecting overlapping malware families and is matchable. |
| 43 | ELECTRUM → Described | CORRECT | “ELECTRUM” is ambiguous due to its legitimate software association and thus requires additional context. |
| 44 | IEC 60870-5-101 → Mentioned | CORRECT | This is a protocol standard referenced conceptually, not as a unique detection string. |
| 45 | IEC 60870-5-104 → Mentioned | CORRECT | As a telecontrol protocol standard, it’s referenced for context, not for direct automated detection. |
| 46 | IEC 61850 → Mentioned | CORRECT | A standard for substation communications, it is mentioned conceptually rather than used for matching. |
| 47 | OPC DA → Mentioned | CORRECT | The abbreviation for a protocol does not form a unique, actionable indicator. |
| 48 | Protocol State → Mentioned | CORRECT | This is a generic term for state information that cannot be directly used for detection. |
| 49 | Program State → Mentioned | CORRECT | A conceptual reference to the state of a program, unsuitable for direct automated matching. |
| 50 | IEC Server → Mentioned | CORRECT | Refers to a software tool name associated with IEC systems, and is too generic for actionable detection. |
| 51 | C37.102-2006 → Mentioned | CORRECT | An IEEE standard reference used contextually and not as a concrete detection indicator. |
| 52 | C37.91-2008 → Mentioned | CORRECT | Another IEEE standard that serves as a conceptual reference rather than being actionable. |
| 53 | C37.106-2003 → Mentioned | CORRECT | As an IEEE standard for protection systems, it is referenced for context only. |
| 54 | ICSA-15-202-01 → Described | CORRECT | This vulnerability advisory ID is not directly matchable without additional enrichment. |
| 55 | Siemens SIPROTEC 4 → Described | CORRECT | The product name reference is ambiguous and requires extra context for detection. |
| 56 | SIPROTEC Compact EN100 Ethernet Module < 4.25 → Described | CORRECT | The descriptive version string demands additional context and cannot be matched directly. |
| 57 | TRITON → Actionable | CORRECT | “TRITON” is a unique, known ICS attack framework identifier suitable for automated detection. |

md file name: /content/validation/TA17-163A.md

| 1 | us-cert.cisa.gov/Russia → Actionable | CORRECT | The URL is complete and unambiguous, making it directly actionable for detection. |

| 2 | `content/uploads/2017/06/win32_industroyer.pdf` → `Actionable` | CORRECT | It's a complete file path that can be directly matched. |
| 3 | `/sites/default/files/publications/ta-17-163a_iocs.stix.xml` → `Actionable` | CORRECT | It's a full file path with a specific STIX XML file that is easily actionable. |
| 4 | `CrashOverride` → `Mentioned` | CORRECT | It's a malware family name referenced conceptually and not directly actionable. |

| 5 | `IEC101` → `Mentioned` | CORRECT | It is a generic protocol name representing an ICS standard, not a unique identifier for direct detection. |
| 6 | `IEC104` → `Mentioned` | CORRECT | It is a standard protocol label, referenced conceptually rather than as a unique actionable indicator. |
| 7 | `IEC61850` → `Mentioned` | CORRECT | It is a common protocol designation, making it more of a conceptual reference than a directly actionable indicator. |
| 8 | `Open Platform Communications (OPC)` → `Mentioned` | CORRECT | It denotes a protocol family name, serving as a generic reference rather than a uniquely actionable string. |
| 9 | `Siemens relay denial-of-service (DoS) vulnerability` → `Described` | CORRECT | It describes a vulnerability condition rather than a specific, unique indicator that can be directly matched.

| 10 | `Crash` → `Actionable` | INCORRECT — should be "Described" because the term "Crash" is overly generic and not uniquely identifiable for low-false‐positive matching. | File names or words that are common (without additional context) require enrichment before automated detection. |
| 11 | `SYS BASCON.COM` → `Actionable` | CORRECT | The string is specific enough to be matched exactly as provided. |
| 12 | `.pcmp` → `Actionable` | INCORRECT — should be "Described" because a standalone file extension is ambiguous. | A lone extension does not provide sufficient uniqueness for reliable automated detection. |
| 13 | `.pcmi` → `Actionable` | INCORRECT — should be "Described" because the extension alone is too generic. | Generic file extension fragments require additional context before they can be used as actionable indicators. |
| 14 | `.pcmt` → `Actionable` | INCORRECT — should be "Described" because file extensions by themselves are ambiguous. | The string is a common suffix that cannot be uniquely tied to malicious activity without enrichment. |
| 15 | `.cin` → `Actionable` | INCORRECT — should be "Described" because a standalone file extension is non‑unique. | Without context, these extension strings produce too many false positives to be directly actionable. |
| 16 | `101.dll` → `Actionable` | INCORRECT — should be "Described" because a simple file name like "101.dll" is too generic. | Such common file names are susceptible to false positives and require additional contextual validation. |
| 17 | `Crash101.dll` → `Actionable` | CORRECT | The inclusion of "Crash" makes the file name a specific, unique indicator suitable for automated matching. |
| 18 | `104.dll` → `Actionable` | INCORRECT — should be "Described" because the plain file name is ambiguous. | Generic file names without added distinguishing markers are insufficient for precise detection. |
| 19 | `Crash104.dll` → `Actionable` | CORRECT | The deliberate "Crash" prefix provides the necessary uniqueness for an exact match. |
| 20 | `61850.dll` → `Actionable` | INCORRECT — should be "Described" because the file name lacks distinctive context. | File names based solely on standards (like “61850”) are common and may trigger false positives. |
| 21 | `Crash61850.dll` → `Actionable` | CORRECT | The modified name is sufficiently specific to be used as an actionable indicator. |
| 22 | `OPCClientDemo.dll` → `Actionable` | INCORRECT — should be "Described" because the demo file name is too generic. | Indicators based solely on common demo file naming patterns are ambiguous without further context. |
| 23 | `OPC` → `Described` | CORRECT | The very short string is generic and requires additional context to be used reliably in detection. |
| 24 | `CrashOPCClientDemo.dll` → `Actionable` | CORRECT | The inclusion of "Crash" renders this file name uniquely identifiable for automated matching. |
| 25 | `D2MultiCommService.exe` → `Actionable` | INCORRECT — should be "Described" because a plain executable name like this is ambiguous. | Without a unique modifier, such file names may occur in benign contexts leading to false positives. |
| 26 | `CrashD2MultiCommService.exe` → `Actionable` | CORRECT | The added "Crash" prefix makes this indicator sufficiently specific to be actionable. |
| 27 | `61850.exe` → `Actionable` | INCORRECT — should be "Described" because the name is generic and lacks additional unique markers. | A standard file name without modification does not provide enough specificity for low-false‐positive detection. |
| 28 | `OPC.exe` → `Actionable` | INCORRECT — should be "Described" because the executable name is too short and generic. | Generic executable names like this require further contextual information before being actionable. |
| 29 | `haslo.exe` → `Actionable` | INCORRECT — should be "Described" because standalone file names (even if unusual) are generally ambiguous. | Without additional context, such file names can lead to multiple matches in benign environments. |
| 30 | `haslo.dat` → `Actionable` | INCORRECT — should be "Described" because the file name is non‑unique and ambiguous on its own. | File names like these need further enrichment to ensure they are reliably malicious before detection. |
| 31 | `f6c21f8189ced6ae150f9ef2e82a3a57843b587d` → `Actionable` | CORRECT | As a full file hash, this string is a unique and direct indicator suitable for automated matching. |
| 32 | `cccce62996d578b984984426a024d9b250237533` → `Actionable` | CORRECT | The complete hash value meets the criteria for an actionable indicator. |
| 33 | `8e39eca1e48240c01ee570631ae8f0c9a9637187` → `Actionable` | CORRECT | This hash is complete and unique enough to be directly used in detection rules. |
| 34 | `2cb8230281b86fa944d3043ae906016c8b5984d9` → `Actionable` | CORRECT | The string is a fully formed file hash ideal for exact matching. |
| 35 | `79ca89711cdaedb16b0ccccfdcfbd6aa7e57120a` → `Actionable` | CORRECT | It is a complete hash identifier that can be matched without ambiguity. |
| 36 | `94488f214b165512d2fc0438a581f5c9e3bd4d4c` → `Actionable` | CORRECT | As a full file hash, this indicator is both unique and directly matchable. |
| 37 | `5a5fafbc3fec8d36fd57b075ebf34119ba3bff04` → `Actionable` | CORRECT | The observable is a complete and unique hash that is actionable. |
| 38 | `b92149f046f00bb69de329b8457d32c24726ee00` → `Actionable` | CORRECT | This file hash meets the criteria for an exact and low‐false‐positive match. |
| 39 | `b335163e6eb854df5e08e85026b2c3518891eda8` → `Actionable` | CORRECT | The complete hash string is uniquely identifiable and actionable. |
| 40 | `IEC-104 client: ip=%s; port=%s; ASDU=%u` → `Actionable` | INCORRECT — should be "Described" because the format string contains placeholders that require enrichment. | The presence of format specifiers means the indicator is parameterized and not directly matchable as-is. |
| 41 | ` MSTR ->> SLV` → `Actionable` | CORRECT | This specific pattern can be exactly matched, making it suitable for automated detection. |
| 42 | ` MSTR <<- SLV` → `Actionable` | CORRECT | The distinct protocol pattern is fully specified and actionable as written. |
| 43 | `Unknown APDU format !!!` → `Actionable` | CORRECT | Despite sounding generic, the exact phrasing with emphatic punctuation is specific enough for matching. |
| 44 | `iec104.log` → `Actionable` | INCORRECT — should be "Described" because common log file names are not unique enough on their own. | The file name is generic and could appear in many legitimate contexts, reducing its detection precision. |
| 45 | `68 e8 ?? ?? ?? 6a 00 e8 a3 ?? ?? ?? 8b f8 83 c4 ?8` → `Actionable` | CORRECT | This hex pattern, including its wildcards, is complete and can be reliably used for detection. |
| 46 | `8a 10 3a 11 75 ?? 84 d2 74 12` → `Actionable` | CORRECT | The provided hex sequence is fully specified and actionable for matching purposes. |
| 47 | `33 c0 eb ?? 1b c0 83 c8 ??` → `Actionable` | CORRECT | This distinct hex pattern with wildcards meets the criteria for direct signature matching. |
| 48 | `85 c0 75 ?? 8d 95 ?? ?? ?? ?? 8b cf ?? ??` → `Actionable` | CORRECT | The complete hex pattern, even with its wildcards, is specific and actionable as a detection indicator. |
| 49 | `85 c0 75 ?? 8d 95 ?? ?? ?? 8b cf ?? ??` → `Actionable` | CORRECT | Despite minor variations from other patterns, it provides a complete and matchable hex signature. |
| 50 | `81 ec 08 02 00 00 57 33 ff 57 57 ff 15 ?? ?? 40 00 a3 ?? ?? ?? 00 85 c0` → `Actionable` | CORRECT | The fully detailed hex sequence is ideal for automated, exact matching. |
| 51 | `8d 85 ?? ?? ff 50 57 57 6a 2e 57 ff 15 ?? ?? ?? ?? 00 68 ?? ?? 40 00` → `Actionable` | CORRECT | This hex pattern is complete with its wildcards and is actionable for detection. |
| 52 | `33 c9 51 51 51 51 51 51 51 ?? ??` → `Actionable` | CORRECT | The provided hex sequence is specific enough to be used as a direct indicator in detection rules. |
| 53 | `6a ff 6a ff 6a ff 50 ff 15 24 ?? 40 00 ff ?? ?? ff 15 20 ?? 40 00` → `Actionable` | CORRECT | This hex pattern is fully defined and can be matched exactly by a detection rule. |
| 54 | `8d 85 a0 ?? ?? ?? 46 50 8d 85 a0 ?? ?? ?? 68 68 0d ?? ?? 50` → `Actionable` | CORRECT | The complete hex pattern fulfills the criteria for an actionable, low‑false‑positive indicator. |
| 55 | `6a 02 68 78 0b ?? ?? 6a 02 50 68 b4 0d ?? ?? ff b5 98 ?? ?? ?? ff 15 04 ?? ?? ??` → `Actionable` | CORRECT | This detailed hex sequence, with its wildcards, is specific and directly matchable. |
| 56 | `68 00 02 00 8d 85 a0 ?? ?? ?? 50 56 ff b5 9c ?? ?? ?? ff 15 00 ?? ?? ?? 85 c0` → `Actionable` | CORRECT | The defined hex pattern meets the completeness criteria for automated detection. |
| 57 | `6a 00 68 80 00 00 00 6a 03 6a 00 6a 02 8b f9 68 00 00 00 40 57 ff 15 1c ?? ?? ?? 8b d8` → `Actionable` | CORRECT | This explicit hex sequence, despite wildcards, is complete and actionable as an indicator. |
| 58 | `6a 00 50 57 56 53 ff 15 4c ?? ?? ?? 56` → `Actionable` | CORRECT | The hex pattern is sufficiently detailed and matchable for use in automated detection. |

| 59 | `</sites/default/files/documents/seven%20to%20effectively%20defend%20industrial%20control2 %systems\\_s508c.pdf>` → Actionable | CORRECT | The observable is a complete URL/file path that can be directly used for detection.

| 60 | Application whitelisting (AWL) → Mentioned | CORRECT | It is a generic security control concept referenced conceptually rather than offering a unique match string. |
| 61 | directory whitelisting → Mentioned | CORRECT | It describes a general approach without providing a concrete, actionable identifier. |
| 62 | Microsoft Software Restriction Policy (SRP) → Described | CORRECT | It names a Windows feature that, while informative, isn’t a directly unique artifact for automated detection. |
| 63 | AppLocker → Described | CORRECT | It is a product name reference that requires contextual enrichment rather than serving as a complete, unique indicator. |
| 64 | PROGRAMFILES → Described | CORRECT | It is a generic environment variable term that isn’t a full file path and thus isn’t inherently actionable. |
| 65 | PROGRAMFILES(X86) → Described | CORRECT | It references a common system directory identifier which requires additional context to serve as an actionable artifact. |
| 66 | SYSTEM32 → Described | CORRECT | It is a common system directory term that, by itself, cannot be uniquely matched for detection purposes. |
| 67 | ICS software folders → Described | CORRECT | It is a broad, descriptive reference to a category of directories rather than a specific, actionable identifier. |

| 68 | hidden back doors → Mentioned | Validator output CORRECT | The term is a generic, conceptual reference without a unique, actionable signature. |
| 69 | modems → Mentioned | Validator output CORRECT | It refers to a broad category of hardware and lacks specificity for automated detection. |
| 70 | data diodes → Mentioned | Validator output CORRECT | The observable is a generic description of a security device, not a unique, actionable identifier. |
| 71 | remote persistent vendor connections → Mentioned | Validator output CORRECT | It is a descriptive phrase that does not provide a unique, exact signature for detection. |
| 72 | two-factor authentication → Mentioned | Validator output CORRECT | The term is a generic security concept rather than a concrete, actionable identifier. |
| 73 | password → Mentioned | Validator output CORRECT | It is a generic credential reference that does not uniquely identify an artifact for detection. |
| 74 | soft certificate → Mentioned | Validator output CORRECT | This is a descriptive term with no unique characteristics that enable direct detection. |
| 75 | monitoring only access → Mentioned | Validator output CORRECT | The observable describes a type of access mode and isn’t a specific, actionable artifact. |
| 76 | read only access → Mentioned | Validator output CORRECT | It represents a generic access configuration, lacking the uniqueness required for detection. |
| 77 | lock out, tag out → Mentioned | Validator output CORRECT | The phrase refers to a standard safety procedure, not a unique signature for automated detection. |
| 78 | remote access paths → Mentioned | Validator output CORRECT | It is a broad, conceptual reference to connectivity methods and is not uniquely actionable. |
| 79 | obscure access vectors → Mentioned | Validator output CORRECT | The observable is a generic description of potential entry methods, not a specific, actionable identifier. |

| 80 | WIN32/INDUSTROYER → Actionable | INCORRECT — should be "Described" because it is merely a malware family name used for attribution rather than a precise, actionable detection artifact. | Malware family names lack the unique technical specificity required for automated detection. |
| 81 | CRASHOVERRIDE → Actionable | INCORRECT — should be "Described" because it is an attribution label and not a unique, concrete indicator that can be directly matched in detections. | As a malware family name, it requires additional context and enrichment to be actionable. |

82 | `CISA.gov` → `Actionable` | CORRECT | The domain is a complete, unique identifier that can be matched exactly in detection rules.
83 | `DHS.gov` → `Actionable` | CORRECT | As a fully-specified domain name, it is actionable by exact matching in systems.
84 | `USA.gov` → `Actionable` | CORRECT | A complete domain name qualifies as an actionable observable for detection purposes.

md file name: /content/validation/BlackEnergy_Quedagh.md

| 1 | `BlackEnergy` → `Described` | CORRECT | The observable is a generic malware toolkit name that isn’t a unique, directly matchable indicator. |
| 2 | `BlackEnergy 3` → `Described` | CORRECT | The variant name, while more specific, remains a descriptive reference rather than a fully actionable indicator. |
| 3 | `Quedagh` → `Mentioned` | CORRECT | As a threat actor alias, it is a conceptual reference that cannot be directly turned into a detection rule. |

| 4 | `Quedagh` → `Mentioned` | CORRECT | Threat actor names are conceptual and not actionable indicators for detection. |

| 5 | Quedagh gang → Mentioned | CORRECT | It is a threat actor group name referenced conceptually rather than serving as a unique, directly matchable indicator. |
| 6 | BlackEnergy toolkit → Mentioned | CORRECT | It names a malware builder kit and is used conceptually rather than as a precise, searchable indicator. |
| 7 | BlackEnergy DDoS Bot; ver 1.7 (with HTT ATT A → Described | CORRECT | The truncated, partial string is ambiguous and not sufficiently complete to serve as an exact match for automated detection. |
| 8 | _bot.exe → Actionable | INCORRECT — should be "Described" because the file name is ambiguous and lacks unique context, potentially leading to high false positives. |

| 9 | "BlackEnergy Builder from 2007" → Described | CORRECT | It’s a descriptive reference to a malware toolkit variant rather than a unique, directly actionable detection artifact. |
| 10 | "BlackEnergy 1" → Described | CORRECT | It names the original toolkit variant in a descriptive manner, not as a complete unique indicator for automation. |
| 11 | "BlackEnergy 2" → Described | CORRECT | It refers to a later variant in a descriptive way, lacking the complete, unique properties required for actionable detection. |
| 12 | "BlackEnergy 3" → Described | CORRECT | It describes a rewritten variant using a different configuration, which is not a directly searchable, unique artifact. |

| 13 | msiexec.exe → Described | CORRECT | As a common Windows executable filename, it lacks unique properties for precise matching, fitting the "Described" rank. |
| 14 | regedt32.exe → Described | CORRECT | This legacy executable name is generic and requires additional context for detection, which is appropriate for the "Described" rank. |
| 15 | CVE-2010-3333 → Mentioned | CORRECT | Vulnerability identifiers like CVE numbers are referenced conceptually and need enrichment, making "Mentioned" the proper rank. |
| 16 | Adobe Flash Player Installer → Described | CORRECT | The descriptive installer name is ambiguous and not sufficiently unique for direct detection, aligning with the "Described" rank. |

| 17 | Quedagh → Mentioned | CORRECT | The group name is only conceptually referenced and isn't directly actionable for detection.

| 18 | giknpc.com.ua → Actionable | CORRECT | Domain names are complete, unique indicators that can be directly used in detection rules. |
| 19 | BlackEnergy → Mentioned | CORRECT | Malware family names are generic references and are not actionable by themselves. |
| 20 | BlackEnergy 2 → Mentioned | CORRECT | Variant names of malware families are conceptual identifiers and not specific enough for automated detection. |

| 21 | s 2012. doc → Described | CORRECT | File names on their own are ambiguous and not unique enough for direct automated detection. |
| 22 | c crisis 2012.doc → Described | CORRECT | File name observables lack the inherent uniqueness needed for actionable detection without additional context. |
| 23 | Image 3: Strings from a sample circa 2012 ... → Described | CORRECT | A hex dump block capture requires additional processing before it can be used in automated detection, making it appropriately "Described." |

| 24 | "regedt32.exe" → "Described" | CORRECT | It is a common system file and not a unique identifier, so additional context is needed. |
| 25 | "msiexec.exe" → "Described" | CORRECT | It is a generic Windows installer executable requiring further context to become actionable. |

| 26 | `BlackEnergy` → `Described` | CORRECT | The CTI snippet uses "BlackEnergy" as a generic reference to a malware family rather than as a unique, actionable indicator. |

| 27 | (description>Registry Editor Utility</descript <trustInfo xmlns="urn:schemas-microsoft-com:as (security) <requestedPrivileges> <requestedFxecutionLeuel\nlevel="highestAvailable," uiAccess="raise 17 </requestedPrivileges> security> → Described | CORRECT | The snippet is partial and ambiguous, lacking complete information for precise automated detection. |
| 28 | curity> requestedPrivileges > <requestedExecutionLevel level="asInvoker ionLevel> /requestedPrivileges> ecuritu) → Described | CORRECT | This partial XML fragment is incomplete and ambiguous, making it non‑actionable without additional enrichment. |

| 29 | BLACKENERGY → Mentioned | CORRECT | The observable is a generic malware family reference and is not directly actionable. |
| 30 | QUEDAGH → Mentioned | CORRECT | The observable is a generic malware family reference and is not directly actionable. |

| 31 | DOMESSER: DA 14 14 18-21 27 12-01 17 02 00-07 17 14 22 10020021. → Actionable | CORRECT | This unique configuration parameter string can be matched exactly. |
| 32 | net/stat.php → Actionable | CORRECT | The exact file path string is specific enough for detection. |
| 33 | 0D0B15aaa → Actionable | CORRECT | As a complete build identifier extracted from configuration, it is directly actionable. |
| 34 | http://95.143.193.131/aG91c2UhdHJ → Actionable | CORRECT | The fully formed URL is unique and can be matched precisely. |
| 35 | /dircon → Actionable | CORRECT | This exact file path string is sufficiently specific to be used in automated detection. |
| 36 | f/check.php6 0 → Actionable | CORRECT | The string extracted from the hex dump, despite its unusual format, is actionable as a complete file path indicator. |
| 37 | P0649, !!4xVidRtfl → Actionable | CORRECT | The unique identifier is a complete, exact string that can be directly used in detection. |
| 38 | 091000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 → Actionable | CORRECT | This long numeric configuration parameter is unique and directly matchable. |

| 39 | `SndVol.exe` → `Described` | CORRECT | The file name is generic and common in Windows systems, so it is appropriately classified as Described. |
| 40 | `cmd.exe` → `Described` | CORRECT | As a ubiquitous system executable, cmd.exe is not unique for automated detection, justifying the Described rank. |
| 41 | `Shim Database` → `Described` | CORRECT | The term refers to a configuration concept without a unique, actionable pattern, making Described the proper rank. |

| 42 | TESTSIGNING → Described | INCORRECT — should be "Actionable" because it is a complete, specific configuration flag that can be directly matched in detection rules. | It meets the heuristic for a complete identifier usable for automated detection. |
| 43 | user32.dll.mui → Described | CORRECT | The file name is generic and ambiguous, requiring additional context before it can be reliably acted upon. |
| 44 | BlackEnergy → Mentioned | CORRECT | The malware family name is conceptually referenced and does not directly serve as an actionable indicator. |

| 45 | `SndVol.exe` → `Described` | CORRECT | A common executable name that isn’t unique enough for direct detection. |
| 46 | `cmd.exe` → `Described` | CORRECT | A generic system executable which requires additional contextual filtering. |
| 47 | `C:\samples\tmp4A.sdb` → `Actionable` | CORRECT | A full file path that is unique and complete for direct matching in detection rules. |
| 48 | `RedirectEXE` → `Described` | CORRECT | A UI label for a compatibility fix that lacks the uniqueness for actionable detection. |
| 49 | `RecopyExeFromCD` → `Described` | CORRECT | A compatibility fix label that is descriptive rather than a unique, concrete indicator. |
| 50 | `RedirectBDE` → `Described` | CORRECT | A compatibility fix option label, appropriately ranked as descriptive. |
| 51 | `RedirectCHHlocaletoCHT` → `Described` | CORRECT | A specific compatibility fix label that remains non‑unique for automated detection. |
| 52 | `RedirectCRTTempFile` → `Described` | CORRECT | A UI label indicating a compatibility fix, thus requiring additional context to be actionable. |
| 53 | `RedirectDBCSTempPath` → `Described` | CORRECT | Another compatibility fix label that is better suited as descriptive rather than actionable. |
| 54 | `Redirect Default Audio To Communications` → `Described` | CORRECT | A UI label describing an audio redirection fix, which is not unique enough for direct matching. |
| 55 | `RedirectHKCUKeys` → `Described` | CORRECT | A descriptive compatibility fix label that isn’t sufficiently unique for direct detection. |
| 56 | `RedirectMP3Codec` → `Described` | CORRECT | A compatibility fix option label that serves as a descriptive indicator requiring further context. |

| 57 | `## TABLE 1: IOCTL BUFFER COMMAND CODES ...` → `Described` | CORRECT | The table is a descriptive capture of IOCTL command codes and their functions rather than a unique, matchable indicator.  |

| 58 | svchost.exe → Described | CORRECT | It’s a concrete process name but generic enough to require contextual enrichment for detection. |
| 59 | BlackEnergy 2 driver → Mentioned | INCORRECT — should be "Described" because it denotes a specific malware driver artifact (akin to a file name pattern) that, while ambiguous, can be enriched for detection. | 
| 60 | GMER → Mentioned | CORRECT | It’s merely a reference to a known rootkit scanning tool, offering no concrete, unique indicator. |
| 61 | RootkitRevealer → Mentioned | CORRECT | It’s a conceptual reference to a detection tool that isn’t uniquely actionable on its own. |

| 62 | "## TABLE 2: TYPICAL BLACKENERGY DRIVER COMPONENT VERSUS QUEDAGH'S CUSTOM COMPONENT..." → Described | CORRECT | The table is a complete descriptive capture from a CTI report and does not serve as a unique, directly actionable indicator. |

| 63 | `#### TABLE 3: COMMANDS SUPPORTED BY VARIANTS TARGETED AT UKRAINIAN ENTITIES
| Command | Description                                          |
|---------|------------------------------------------------------|
| rexec   | Download and execute a binary                        |
| lexec   | Execute a shell command                              |
| die     | Uninstall                                            |
| getpl   | Load a plugin                                        |
| turnoff | Quit (will start again after reboot)                 |
| chprt   | Add / remove / set active command and control server | → `Described` | CORRECT — The table is a descriptive block of commands and not a unique, directly actionable detection indicator.

| 66 | BlackEnergy 3 → Mentioned | CORRECT | As a malware family name, it is referenced conceptually and not used for direct detection. |
| 67 | main DLL → Described | CORRECT | The generic term "main DLL" requires additional context to be actionable for detection. |
| 68 | LNK file → Described | CORRECT | "LNK file" is a generic file type and lacks the specific unique attributes needed for actionable detection. |
| 69 | rundll32.exe → Described | CORRECT | Although exact, "rundll32.exe" is a common Windows executable, making it non-unique and thus only descriptive. |

| 70 | `#### TABLE 4: X509\_ASN FIELDS & EQUIVALENT BLACKENERGY 2 XML NODE …` → Described | CORRECT | The table capture is a descriptive configuration artifact not unique enough for direct detection. |
| 71 | `ncacn_np` → Described | CORRECT | Although complete, the protocol string is generic and could lead to high false‐positives if used as a direct indicator. |
| 72 | `BlackEnergy 2` → Mentioned | CORRECT | The malware family name is a conceptual reference rather than a unique, actionable string. |
| 73 | `BlackEnergy 3` → Mentioned | CORRECT | As a variant family name, it is referenced conceptually and isn’t directly matchable for automated detection. |
| 74 | `X509_ASN` → Mentioned | CORRECT | The encoding format reference is generic and only conceptually indicative, not suitable for direct detection. |

| 75 | si → Described | CORRECT | The plugin name is generic and ambiguous, making it non‑unique for automated detection. |
| 76 | systeminfo.exe → Described | CORRECT | As a common Windows utility, this file name is ambiguous and not uniquely actionable. |
| 77 | tasklist.exe → Described | CORRECT | The standard utility file “tasklist.exe” is too common to be directly actionable. |
| 78 | ipconfig.exe → Described | CORRECT | Being a ubiquitous system tool, its file name does not provide a unique detection indicator. |
| 79 | netstat.exe → Described | CORRECT | The observable is a common system executable, rendering it ambiguous for direct detection. |
| 80 | route.exe → Described | CORRECT | This standard Windows routing tool is generic and lacks uniqueness for actionable alerts. |
| 81 | tracert.exe → Described | CORRECT | As a typical network utility, its file name is too generic to serve as a precise indicator. |
| 82 | ping.exe → Described | CORRECT | The file name is of a common system utility, making it ambiguous and non‑unique for detection. |

| 83 | `#### TABLE 5: BLACKENERGY 3 COMMANDS

11

|        | Command Description                |
|--------|------------------------------------|
| delete | Uninstall                          |
| ldplg  | Load a plugin                      |
| unlplg | Unload a plugin                    |
| update | Update main DLL                    |
| dexec  | Download and execute an executable |
| exec   | Download and execute a binary      |
| updcfg | Update the configuration data      |` → Actionable | CORRECT | The table is a complete capture of malware commands that can be directly matched. |
| 84 | `account.cfn` → Actionable | CORRECT | The file name is a complete and unique identifier suitable for direct detection. |
| 85 | `account.cfq` → Actionable | CORRECT | The exact file name makes it actionable for automated detection. |
| 86 | `signons*.txt` → Described | CORRECT | The wildcard pattern indicates ambiguity that requires additional context for detection. |
| 87 | `signons.sqlite` → Described | CORRECT | Although complete, this common file name is non‑unique and may lead to false positives. |
| 88 | `Login Data` → Described | CORRECT | The generic file name is ambiguous and needs extra context before being actionable. |
| 89 | `Thunderbird` → Mentioned | CORRECT | As a reference to a software tool, it is conceptual rather than a unique detection string. |
| 90 | `Firefox` → Mentioned | CORRECT | This is a reference to popular software and is not designed for precise automated detection. |
| 91 | `SeaMonkey` → Mentioned | CORRECT | The observable is a generic software suite reference without unique matching properties. |
| 92 | `IceDragon` → Mentioned | CORRECT | It is a software product reference, suitable for conceptual mention but not actionable directly. |
| 93 | `Google Chrome` → Mentioned | CORRECT | As a widely used software name, it serves as a generic reference rather than a precise indicator. |
| 94 | `Chromium` → Mentioned | CORRECT | The open‑source software reference is conceptual and not actionable by itself. |
| 95 | `Comodo Dragon` → Mentioned | CORRECT | This browser variant name is a conceptual reference and lacks the uniqueness required for actionability. |
| 96 | `Xpom` → Mentioned | CORRECT | The software/tool name is generic with no inherent unique detection characteristics. |
| 97 | `Nichrome` → Mentioned | CORRECT | As a software reference lacking unique identifiers, it is appropriately classified as Mentioned. |
| 98 | `OIP Surf` → Mentioned | CORRECT | The tool reference is conceptual and does not provide a unique, actionable string. |
| 99 | `Torch` → Mentioned | CORRECT | The observable is a common software name and serves as a conceptual reference rather than a precise indicator. |
| 100 | `YandexBrowser` → Mentioned | CORRECT | The software reference is generic and not unique enough for direct detection. |
| 101 | `Opera` → Mentioned | CORRECT | This widely used browser name is a conceptual reference and not an exact detection string. |
| 102 | `Sleipnir` → Mentioned | CORRECT | The software/tool name is generic and lacks the distinctiveness required for actionability. |
| 103 | `Outlook` → Mentioned | CORRECT | As a well‐known software reference, it is conceptual and not intended for precise automated detection. |
| 104 | `Outlook Express` → Mentioned | CORRECT | The legacy email client reference is generic and serves as a conceptual indicator. |
| 105 | `Internet Explorer` → Mentioned | CORRECT | The observable refers to common software, making it a high‑level conceptual reference. |
| 106 | `live` → Mentioned | CORRECT | The generic credential entry is ambiguous and not unique enough for actionable detection. |
| 107 | `Remote Desktop` → Mentioned | CORRECT | This generic credential reference is conceptual and lacks the specificity for automated detection. |
| 108 | `Microsoft_Winlnet_*` → Described | CORRECT | The wildcard pattern denotes a generic naming scheme that requires additional enrichment before use. |

| 109 | `#### TABLE 6: MAIN DLL'S ADDITIONAL COMMANDS DURING DOWNLOAD OF ADDITIONAL FILES ... getpd` → `Actionable` | INCORRECT — should be "Described" because the table is a descriptive capture of HTTP POST field details rather than a unique, matchable artifact for automated detection. | The content is informational and requires further contextual processing to be used in detection. |

| 110 | BlackEnergy → Mentioned | CORRECT | It is a generic malware family name mentioned conceptually. |
| 111 | C&C server → Mentioned | CORRECT | It is a non‐specific descriptor that cannot be directly used for detection. |
| 112 | HTTP POST requests → Mentioned | CORRECT | It describes a method of communication rather than a unique, actionable indicator. |
| 113 | BlackEnergy 2 → Mentioned | CORRECT | It is a generic reference to a malware variant without a complete, unique identifier. |

| 114 | `[bot_id]` → `Described` | CORRECT | The placeholder is not a concrete, unique identifier and requires further enrichment. |
| 115 | `[base64_encoded_build_ id]` → `Described` | CORRECT | It is a template indicating a base64 encoded build id, not a complete actionable string. |
| 116 | `[x]` → `Described` | CORRECT | This generic placeholder lacks a definitive value for automated detection. |
| 117 | `[y]` → `Described` | CORRECT | The placeholder is ambiguous and does not provide enough detail to be actionable. |
| 118 | `[z]` → `Described` | CORRECT | It is a generic token representing a parameter value and is not unique for detection. |

| 119 | "xJOE-PC_484DA98A" → "Actionable" | CORRECT | The string is a complete, unique identifier that can be exactly matched, making it actionable. |
| 120 | "BlackEnergy 3" → "Mentioned" | CORRECT | It is a generic malware family name that does not serve as a concrete detection indicator. |

| 121 | `[bot_id_sha1]` → `Mentioned` | INCORRECT — should be "Described" because it is a placeholder template for a SHA1 value rather than a concrete, matchable hash. | The value is a parameter placeholder that describes what will be there, but isn’t actionable as-is. |
| 122 | `[base64_encoded_build_id]` → `Mentioned` | INCORRECT — should be "Described" because it is a placeholder for a base64‐encoded build identifier, not an exact string. | As a template value, it requires substitution to become actionable. |
| 123 | `[x]` → `Mentioned` | INCORRECT — should be "Described" because it is a generic placeholder value that does not provide a concrete observable. | It merely indicates a variable field and needs further enrichment to be used in detection. |
| 124 | `[y]` → `Mentioned` | INCORRECT — should be "Described" because it is a generic placeholder for the 'cn' parameter rather than an exact, actionable value. | The value is a placeholder that describes a field but cannot be matched directly. |
| 125 | `[z]` → `Mentioned` | INCORRECT — should be "Described" because it is only a placeholder token for the 'num' parameter, not a full indicator. | It is a descriptive template that requires replacement before it can be used for automated detection. |
| 126 | `[domain_sid]_[host_name]_ [serial_no]` → `Mentioned` | INCORRECT — should be "Described" because this is a formatted placeholder string combining several fields, not a concrete indicator. | The composite pattern is a template and must be enriched with actual values to drive detection. |

| 127 | BlackEnergy → Actionable | CORRECT | "BlackEnergy" is a specific artifact observed in EDR logs and can be directly matched. |
| 128 | Quedagh → Mentioned | CORRECT | As a threat actor alias, "Quedagh" is referenced conceptually rather than being a direct, unique indicator. |
| 129 | BlackEnergy 3 → Actionable | CORRECT | "BlackEnergy 3" is a concrete variant name from endpoint logs, making it directly matchable. |
| 130 | BlackEnerqy → Actionable | CORRECT | Even as a typographical variant, the exact string "BlackEnerqy" is observed and thus actionable for detection. |

| 131 | Proxy server → Mentioned | CORRECT | The term is generic and non‑unique, making it only conceptually referenced. |
| 132 | MS:Win32/Phdet.S → Actionable | CORRECT | The signature is a complete, unique malware identifier that can be directly matched. |

| 133 | 26b9816b3f9e2f350cc92ef4c30a097c6fec7798 → Actionable | CORRECT | It is a complete, unique SHA1 hash that can be directly matched in detection rules. |
| 134 | bt9937489cb268t974d3527e877575b4tbb07cb0 → Actionable | CORRECT | Despite containing non‐hex characters, it is a complete, unique identifier intended as a SHA1 hash for detection. |
| 135 | 78636f7bbd52ea80d79b4e2a7882403092bbb02d → Actionable | CORRECT | It is a full-length SHA1 hash with sufficient uniqueness to be actionable. |
| 136 | bt9172e87e9264d1cddfc36cbaa74402bb405708 → Actionable | CORRECT | The string is a complete unique identifier (SHA1 hash) even with unexpected characters, making it directly actionable. |
| 137 | 441ctbaba1dtd58ce03792et74d183529e8e0104 → Actionable | CORRECT | It is presented as a full-length hash and therefore qualifies as an actionable observable. |
| 138 | f7d4aa90b76646f4a011585eb43b9d13c60f48eb → Actionable | CORRECT | It is a valid, complete SHA1 hash which is directly usable for automated detection. |
| 139 | 8ccd2962bce8985d0794daed6e0bf73e5557cfe8 → Actionable | CORRECT | It represents a full and unique SHA1 hash, which meets the criteria for actionable indicators. |
| 140 | d496f99f7e07d5cbbd177a9d43febe8tb87ebc3b → Actionable | CORRECT | Even with non‐standard characters, this full identifier is meant to function as a SHA1 hash and is actionable. |
| 141 | cc71aa8f919911676fb5d775c81atc682e6e3dd3 → Actionable | CORRECT | It is a complete and specific hash indicator, making it directly actionable for detection. |
| 142 | abab02d663872bcdbe2e008441fcd7157c0eb52d → Actionable | CORRECT | It is a full 40‐character SHA1 hash that can be precisely matched, thus actionable. |
| 143 | e5c8c10b10ee288512d3a7c79ae1249b57857d23 → Actionable | CORRECT | It is a well‐formed complete SHA1 hash, suitable for direct use in detection rules. |
| 144 | 8743c8994cc1e8219697394b5cb494eta7dad796 → Actionable | CORRECT | Despite a non‑traditional segment, this complete identifier functions as a SHA1 hash and is actionable. |
| 145 | 285b3252a878d1c633ea988153bbc23c148dd630 → Actionable | CORRECT | It is a complete SHA1 hash that meets the criteria for actionable indicators in detection systems. |

===== ranking_results/ranking_results_6.txt =====
md file name: /content/validation/McAfee ATR Analyzes Sodinokibi aka REvil Ransomware-as-a-Service - What The Code Tells Us _ McAfee Blog.md

| 1 | McAfee ATR → Mentioned | CORRECT | It is a product/tool name mentioned in context, not providing a unique or actionable detection indicator. |
| 2 | Sodinokibi → Mentioned | CORRECT | It represents a ransomware family name cited in the report, which is a conceptual reference rather than a concrete artifact for detection. |
| 3 | REvil → Mentioned | CORRECT | As an alias for Sodinokibi ransomware, it is used conceptually and lacks the specificity required for an actionable indicator. |
| 4 | McAfee Labs → Mentioned | CORRECT | It is the name of an organization mentioned in the report, which does not translate into a concrete detection artifact. |

| 5 | "Sodinokibi" → Mentioned | Validator output CORRECT | It is a generic ransomware family name mentioned conceptually rather than as a unique, matchable indicator. |
| 6 | "REvil" → Mentioned | Validator output CORRECT | As an alias for the ransomware family, it is referenced conceptually and isn’t a unique, actionable artifact. |
| 7 | "GandCrab" → Mentioned | Validator output CORRECT | The name is used as a conceptual reference to a ransomware group and does not provide a specific, matchable artifact. |

| 8 | Sodinokibi → Mentioned | CORRECT | Malware family names are conceptual and not directly tied to a unique technical artifact for automated detection. |
| 9 | REvil → Mentioned | CORRECT | As an alias for a malware family, it is a generic reference rather than a concrete, searchable indicator. |
| 10 | ccfde149220e87e97198c23fb8115d5a → Actionable | CORRECT | This complete MD5 hash is uniquely identifiable and matches actionable criteria. |
| 11 | Sodinokibi.exe → Actionable | CORRECT | The exact file name from EDR logs can be directly matched, making it actionable. |

| 12 | Sodinokibi → Mentioned | CORRECT | It is simply a family name referenced conceptually without a unique, actionable detection signature. |
| 13 | GandCrab → Mentioned | CORRECT | As with Sodinokibi, it is only a malware family name and not a concrete indicator fit for automated detection. |

| 14 | `32-bit binary` → `Mentioned` | CORRECT | The descriptor is generic and does not offer a unique, actionable indicator. |
| 15 | `Visual C++` → `Mentioned` | CORRECT | It merely indicates the development environment and is not uniquely actionable for detection. |
| 16 | `pure assembly` → `Mentioned` | CORRECT | This term generically describes the programming language used and is not a unique identifier for automated detection. |

| 17 | mysql.exe → Described | CORRECT | Process names like "mysql.exe" are generic and ambiguous, so a descriptive rank is appropriate. |
| 18 | CVE-2018-8453 → Actionable | INCORRECT — should be "Described" because vulnerability identifiers are reference labels that require additional context before they can drive low‐false‐positive automated detection. | 
| 19 | Explorer.exe → Described | CORRECT | As a common system process name, it is ambiguous and thus appropriately marked as described. |
| 20 | SOFTWARE \\\\recfg → Actionable | CORRECT | The registry key string is exact and specific enough for direct matching in detection rules. |
| 21 | 0x818 Romanian (Moldova) → Mentioned | CORRECT | This language identifier is conceptual and not directly actionable. |
| 22 | 0x419 Russian → Mentioned | CORRECT | A language identifier used descriptively, so "Mentioned" is appropriate. |
| 23 | 0x819 - Russian (Moldova) → Mentioned | CORRECT | Despite the extra formatting, it remains a conceptual language identifier. |
| 24 | 0x422 Ukrainian → Mentioned | CORRECT | As a language identifier, it is only referenced conceptually. |
| 25 | 0x423 = Belarusian → Mentioned | CORRECT | The identifier is used conceptually and is not a concrete detection indicator. |
| 26 | 0x425 = Estonian → Mentioned | CORRECT | It is a language identifier provided as contextual reference. |
| 27 | 0x426 Latvian o → Mentioned | CORRECT | Even with the extra character, it remains a language identifier used conceptually. |
| 28 | 0x427 Lithuanian → Mentioned | CORRECT | The value is a language identifier and is appropriately non‐actionable. |
| 29 | 0x428 Tajik → Mentioned | CORRECT | As a language identifier, it is meant for descriptive use only. |
| 30 | 0x429 = Persian → Mentioned | CORRECT | Language identifiers are inherently conceptual, so "Mentioned" fits. |
| 31 | 0x42B = Armenian → Mentioned | CORRECT | It is used to describe a language setting and isn’t directly matched for detection. |
| 32 | 0x42C Azeri → Mentioned | CORRECT | The identifier serves as conceptual information only. |
| 33 | 0x437 Georgian → Mentioned | CORRECT | Its usage as a language identifier means it is appropriately classified as mentioned. |
| 34 | 0x43F Kazakh → Mentioned | CORRECT | It is a language identifier and only provides descriptive context. |
| 35 | 0x440 Kyrgyz → Mentioned | CORRECT | As a conceptual language identifier, "Mentioned" is the right rank. |
| 36 | 0x442 -Turkmen → Mentioned | CORRECT | Used as a language identifier, it is only mentioned conceptually. |
| 37 | 0x443 Uzbek → Mentioned | CORRECT | The conceptual nature as a language identifier makes this rank appropriate. |
| 38 | 0x444 Tatar → Mentioned | CORRECT | Its function as a language identifier fits with a "Mentioned" classification. |
| 39 | 0x45A Syrian → Mentioned | CORRECT | The identifier is used descriptively and is not actionable. |
| 40 | 0x2801 Arabic (Syria) → Mentioned | CORRECT | As with other language settings, this identifier is only conceptually referenced. |
| 41 | Sodinokibi → Mentioned | CORRECT | Malware family names are conceptual references and not direct detection indicators. |
| 42 | GandCrab → Mentioned | CORRECT | A generic malware family reference that remains descriptive. |
| 43 | Anatova → Mentioned | CORRECT | Being a malware family name, it is appropriately non‐actionable. |
| 44 | exe /c vssadmin.exe Delete Shadows /All /Quiet & bcdedit /set {default} recoveryenabled No & bcdedit /set {default} bootstatuspolicy ignoreallfailures → Actionable | CORRECT | The complete command line is a unique, concrete string that can be directly used in detection rules. |

| 45 | `unpacked Sodinokibi sample` → `Mentioned` | CORRECT | This phrase is a generic descriptive reference to a malware sample rather than a unique, actionable artifact. |
| 46 | `v5.03 version of GandCrab` → `Mentioned` | CORRECT | The version descriptor is a contextual reference and not a unique indicator for automated detection. |
| 47 | `leaked GandCrab source code` → `Mentioned` | CORRECT | The observable is a generic description of leaked source code and lacks the specificity required to be actionable. |
| 48 | `IDA` → `Mentioned` | CORRECT | "IDA" refers to a common reverse engineering tool and is a conceptual reference, not an exact detection indicator. |
| 49 | `BinDiff` → `Mentioned` | CORRECT | As the name of a binary diffing tool, it is used descriptively rather than as a unique, actionable artifact. |

| 50 | Sodinokibi → Mentioned | CORRECT | The observable is a ransomware family name referenced conceptually, making it non‑actionable. |
| 51 | GandCrab → Mentioned | CORRECT | As a malware family name mentioned in context, it remains conceptual rather than a precise artifact. |
| 52 | Ransom-REvil! → Mentioned | CORRECT | This is simply a ransomware family reference and does not provide a unique, actionable identifier. |

| 53 | "File and Directory Discovery" → "Mentioned" | CORRECT | It’s a generic MITRE ATT&CK technique name that is conceptually referenced. |
| 54 | "File Deletion ●" → "Mentioned" | CORRECT | It’s a technique reference from MITRE ATT&CK, not a unique actionable artifact. |
| 55 | "Modify Registry ." → "Mentioned" | CORRECT | It’s a conceptual reference to a registry modification technique without actionable details. |
| 56 | "Query Registry ●" → "Mentioned" | CORRECT | It refers to a MITRE technique conceptually, not a hardcoded indicator. |
| 57 | "Registry modification ." → "Mentioned" | CORRECT | It is described as part of a technique, making it a conceptual reference. |
| 58 | "Query information of the user ." → "Mentioned" | CORRECT | It is a generic technique reference and not directly actionable. |
| 59 | "Crypt Files ●" → "Mentioned" | CORRECT | It describes a MITRE ATT&CK technique in abstract terms; not a concrete indicator. |
| 60 | "Destroy Files ●" → "Mentioned" | CORRECT | It is a conceptual technique name from MITRE ATT&CK, not an exact artifact. |
| 61 | "· Make C2 connections to send information of the victim" → "Mentioned" | CORRECT | It is a description of a C2-related technique from MITRE ATT&CK and not directly actionable. |
| 62 | "Modify system configuration" → "Mentioned" | CORRECT | It is a generic technique reference rather than a directly actionable observable. |
| 63 | "Elevate privileges" → "Mentioned" | CORRECT | It is a conceptual MITRE ATT&CK technique reference that is not uniquely actionable. |

| 64 | ```\nrule Sodinokobi\n{\n1*\nThis rule detects Sodinokobi Ransomware in memory in old samples and perhaps\nfuture.\n* /\nmeta:\nauthor\n          = "McAfee ATR team"\nversion \n         = "1.0"\ndescription = "This rule detect Sodinokobi Ransomware in memory in old samples and\nperhaps future."\nstrings:\n$a = { 40 0F B6 C8 89 4D FC 8A 94 0D FC FE FF FF 0F B6 C2 03 C6 0F B6 F0 8A 84 35 FC\nFE FF FF 88 84 0D FC FE FF FF 88 94 35 FC FF FF 0F B6 8C 0D FC FE FF FF }\n$b = { 0F B6 C2 03 C8 8B 45 14 0F B6 C9 8A 8C 0D FC FE FF FF 32 0C 07 88 08 40 89 45\n14 8B 45 FC 83 EB 01 75 AA }\ncondition:\nall of them\n}\n``` → Actionable | CORRECT — the triple-backtick enclosure clearly indicates a complete, unique YARA rule snippet that is directly actionable. | Rule 1 (Code fence indicates an actionable artifact.) |
| 65 | "40 0F B6 C8 89 4D FC 8A 94 0D FC FE FF FF 0F B6 C2 03 C6 0F B6 F0 8A 84 35 FC FE FF FF 88 84 0D FC FE FF FF 88 94 35 FC FF FF 0F B6 8C 0D FC FE FF FF" → Actionable | CORRECT — the hex pattern is complete and unique, making it directly actionable for detection. | Complete hex signature enabling automated matching. |
| 66 | "0F B6 C2 03 C8 8B 45 14 0F B6 C9 8A 8C 0D FC FE FF FF 32 0C 07 88 08 40 89 45 14 8B 45 FC 83 EB 01 75 AA" → Actionable | CORRECT — this hex signature is fully specified and actionable, extracted directly from the YARA rule. | Complete hex pattern suitable for direct detection. |

| 67 | McAfee → Mentioned | CORRECT | It is a generic vendor reference and not a concrete or unique technical artifact suitable for detection. |

| 68 | McAfee+ → Mentioned | CORRECT | The observable is a casual reference to a commercial product, not a unique technical indicator that could drive detection. |

| 69 | PayPal → Mentioned | CORRECT | "PayPal, as a generic brand and not unique detection indicator, is appropriately classified as Mentioned." |
| 70 | .NET → Mentioned | CORRECT | "Microsoft .NET is a generic software framework, not a unique indicator for automated detection." |

| 71 | McAfee+™ Individual → Described | CORRECT | It’s a product name from a corporate listing, providing descriptive detail rather than a unique, actionable detection indicator. |
| 72 | McAfee+™ Family → Described | CORRECT | It’s a descriptive software product name that isn’t a unique, directly actionable identifier. |
| 73 | McAfee® Total Protection → Described | CORRECT | As a complete product name from corporate assets, it’s descriptive and not intended for automated detection. |
| 74 | McAfee® Antivirus → Described | CORRECT | This product name is a descriptive identifier from a listing, not a unique detection signature. |
| 75 | McAfee® Safe Connect → Described | CORRECT | It is a descriptive software product name extracted from a corporate listing, not an actionable indicator. |
| 76 | McAfee® PC Optimizer → Described | CORRECT | Being a product name from a corporate source, it serves as a descriptive reference rather than a unique actionable artifact. |
| 77 | McAfee® TechMaster → Described | CORRECT | The observable is a descriptive product name and lacks the uniqueness required for an actionable detection indicator. |
| 78 | McAfee® Mobile Security → Described | CORRECT | It is a descriptive product name from corporate documentation, making it non‑actionable and correctly ranked as “Described”. |

md file name: /content/validation/TA17-181A.md

| 1 | Petya Ransomware → Mentioned | CORRECT | It is a generic malware family name referenced conceptually rather than a concrete, machine-detectable indicator. |
| 2 | TA17-181A → Mentioned | CORRECT | It is an alert identifier used for reference and not a specific, actionable artifact for automated detection. |

| 3 | "Microsoft Windows operating systems" → "Mentioned" | CORRECT | The observable is a generic operating system name and does not have sufficient uniqueness for direct detection. |

| 4 | MIFR-10130295.pdf </sites/default/files/publications/mifr-10130295.pdf> → Actionable | CORRECT | The file name with its full path is a complete and unique identifier, making it directly actionable. |
| 5 | MIFR-10130295_stix.xml </sites/default/files/publications/mifr-10130295_stix.xml> → Actionable | CORRECT | The STIX XML file is specified with a complete, unique path which is actionable for detection. |
| 6 | TA-17-181B_IOCS.CSV </sites/default/files/publications/ta-17-181b_iocs.csv> → Actionable | CORRECT | The fully qualified CSV file identifier allows for exact matching, qualifying it as actionable. |
| 7 | PsExec → Described | CORRECT | "PsExec" is a well-known tool name that is generic in nature and requires additional context for precise detection. |
| 8 | WMI → Mentioned | CORRECT | "WMI" refers to a built-in Windows component and is mentioned conceptually, not as a unique detection artifact. |
| 9 | EternalBlue → Described | CORRECT | While recognized as an exploit name, "EternalBlue" lacks a unique artifact for automated detection, making it described. |
| 10 | EternalRomance → Described | CORRECT | Similar to EternalBlue, the exploit name "EternalRomance" is non‑unique and requires further context, thus it is described. |

| 11 | MS17-010 → Actionable | CORRECT | This vulnerability identifier is complete and unambiguous, making it directly matchable. |
| 12 | EternalBlue → Actionable | INCORRECT — should be "Mentioned" because it is a generic exploit name that is conceptually referenced rather than a concrete, matchable indicator. | It lacks the precise structure required for automated detection. |
| 13 | EternalRomance → Actionable | INCORRECT — should be "Mentioned" because it is merely the name of an exploit technique and not a unique technical artifact that can be directly matched. | It is a conceptual reference rather than a complete, actionable indicator. |

| 14 | Mimikatz → Described | CORRECT | "Mimikatz" is a tool name that is widely recognized but not unique enough on its own to drive automated detection. |
| 15 | WMIC → Described | CORRECT | "WMIC" is a standard Windows command-line utility, and its generic nature requires contextual enrichment for detection. |
| 16 | psexec.exe → Described | CORRECT | "psexec.exe" is an exact file name but is a common SysInternals tool and thus ambiguous without additional indicators. |
| 17 | EternalBlue → Described | CORRECT | "EternalBlue" is a widely known exploit name and serves as a descriptive reference rather than a unique, directly actionable indicator. |
| 18 | M.E.Doc → Described | CORRECT | "M.E.Doc" is the name of a legitimate software product implicated in the compromise, making it a descriptive reference.

| 19 | MS17-010 → Actionable | CORRECT | "MS17-010" is a unique and complete vulnerability bulletin identifier that can be matched directly. |
| 20 | CVE-2017-0144 → Actionable | CORRECT | "CVE-2017-0144" is a complete, specific CVE identifier, making it directly actionable. |
| 21 | CVE-2017-0145 → Actionable | CORRECT | "CVE-2017-0145" is a complete and unique CVE identifier that meets the actionable criteria. |

| 22 | hxxp://mischapuk6hyrn72[.]onion/ → Actionable | CORRECT | This is a complete, specific URL (even if obfuscated) that can be used for direct detection. |
| 23 | hxxp://petya3jxfp2f7g3i[.]onion/ → Actionable | CORRECT | The observable is a fully formed URL which is actionable by matching its entire string. |
| 24 | hxxp://petya3sen7dyko2n[.]onion/ → Actionable | CORRECT | The URL is complete and uniquely identifiable, making it actionable for detection measures. |
| 25 | hxxp://mischa5xyix2mrhd[.]onion/MZ2MMJ → Actionable | CORRECT | The observable provides a full URL with a specific path component, ensuring its actionability. |
| 26 | hxxp://mischapuk6hyrn72[.]onion/MZ2MMJ → Actionable | CORRECT | This full and unique URL, despite being obfuscated, remains actionable due to its specificity. |
| 27 | hxxp://petya3jxfp2f7g3i[.]onion/MZ2MMJ → Actionable | CORRECT | Contains a unique path as part of a complete URL, thus being directly actionable. |
| 28 | hxxp://petya3sen7dyko2n[.]onion/MZ2MMJ → Actionable | CORRECT | The observable is a complete URL with clear unique elements, making it directly actionable. |

| 29 | `sid:2001569` → `Actionable` | CORRECT | The IDS rule ID is a complete, unique string that can be directly matched in detection systems. |
| 30 | `445` → `Described` | INCORRECT — should be "Actionable" because the port number is a complete and exact indicator that can be directly used in matching network traffic. | Port numbers are precise identifiers usable in detection rules. |
| 31 | `sid:2012063` → `Actionable` | CORRECT | The IDS rule ID is a complete, unique indicator easily matched by detection rules. |
| 32 | `CVE-2009-3103` → `Actionable` | CORRECT | CVE identifiers are exact and sufficiently detailed to be used directly in detection mechanisms. |
| 33 | `Microsoft SRV2.SYS` → `Described` | CORRECT | A standalone filename without a full path tends to be ambiguous and is appropriately categorized as described. |
| 34 | `sid:2024297` → `Actionable` | CORRECT | The IDS rule ID is complete and uniquely identifiable for automated detection. |
| 35 | `MS17-010` → `Actionable` | CORRECT | The vulnerability patch identifier is complete and specific, making it directly actionable. |
| 36 | `ETERNALBLUE` → `Described` | CORRECT | As an exploit name, it is a conceptual reference that requires additional context before being actionable. |
| 37 | `sid:42944` → `Actionable` | CORRECT | The IDS rule ID is a full, unique string suitable for direct matching in detection systems. |
| 38 | `sid:42340` → `Actionable` | CORRECT | The IDS rule ID is complete and can be precisely matched for detection purposes. |
| 39 | `sid:41984` → `Actionable` | CORRECT | The IDS rule ID is a clear, unique indicator that can drive automated detection. |
| 40 | `SMBv1` → `Mentioned` | CORRECT | The protocol version is a generic reference and not a unique artifact, making it non-actionable. |

| 41 | </ncas/alerts/ta16-250a> → Actionable | CORRECT | The relative URL string is specific and can be matched exactly in logs. |
| 42 | MS17-010 → Described | CORRECT | As a vulnerability identifier, it requires additional context to drive an automated detection. |
| 43 | PSEXEC → Described | CORRECT | The tool’s name is generic and ambiguous despite being useful for context, so it isn’t a unique, actionable indicator. |
| 44 | TCP port 445 → Actionable | CORRECT | This specific port number is a complete identifier that can be directly used to filter network traffic. |
| 45 | UDP ports 137-138 → Actionable | CORRECT | The defined UDP port range is specific enough to be used in detection rules. |
| 46 | TCP port 139 → Actionable | CORRECT | A distinct port number allowing for precise network filtering, making it actionable. |
| 47 | SMBv1 → Described | CORRECT | Although it specifies a protocol version, it still requires contextual verification during detection. |
| 48 | SMB → Mentioned | CORRECT | A generic protocol reference that cannot be turned into a precise detection signature. |
| 49 | WMI → Mentioned | CORRECT | As a broad technology reference, it does not offer a unique, actionable string for automated detection. |

| 50 | NCCICcustomerservice@hq.dhs.gov → Actionable | CORRECT | The full email address is a unique, exact indicator that can be directly matched for detection. |
| 51 | 888-282-0870 → Actionable | CORRECT | The complete phone number is a unique identifier suitable for actionable detection. |

| 52 | secure.com/2017/06/30/eternal-petya-from-a-developers-perspective → Actionable | CORRECT | It is a complete URL string that can be uniquely detected. |
| 53 | us/library/cc771551(v=ws.11).aspx → Described | CORRECT | As a relative URL path lacking a domain, it requires additional context for automated detection. |
| 54 | MS17-010 → Described | CORRECT | The vulnerability ID is a reference needing enrichment and is not directly actionable. |
| 55 | Emerging Threats 2001569 → Described | CORRECT | This IDS rule identifier is descriptive and serves as a reference, not a direct detection string. |
| 56 | Emerging Threats 2012063 → Described | CORRECT | Like other rule IDs, it is a reference identifier that requires additional context to act upon. |
| 57 | Emerging Threats 2024297 → Described | CORRECT | It is an IDS rule identifier provided for reference, thus appropriately ranked as Described. |
| 58 | TA16-091A → Described | CORRECT | The US-CERT alert identifier is descriptive and not sufficiently complete for direct automated detection. |

| 59 | MIFR-10130295_stix.xml → Actionable | Validator output CORRECT | The filename is complete, unique, and directly searchable. |
| 60 | TA-17-181B_IOCs.csv → Actionable | Validator output CORRECT | The complete filename is a unique indicator that can be directly used in detections. |
| 61 | TA-17-181A_IOCs.csv → Actionable | Validator output CORRECT | The filename is fully specified and unique, making it actionable. |
| 62 | USA.gov → Actionable | Validator output CORRECT | The domain is complete and directly actionable as a unique identifier. |

md file name: /content/validation/Mitigation Strategies for Stuxnet - SCADAhacker.md

| 1 | `SCADAhacker.com` → `Actionable` | CORRECT | The domain is fully qualified and can be directly used for detection in DNS logs. 

| 2 | "Stuxnet-like attacks" → "Mentioned" | CORRECT | It is a conceptual description that lacks actionable details. |
| 3 | "CSFI Stuxnet Project" → "Mentioned" | CORRECT | It is a project name provided as contextual information rather than a detectable artifact. |

| 4 | MS08-067 → Actionable | CORRECT | The vulnerability identifier is unique and can be matched directly in detection rules. |
| 5 | ISA-99 → Mentioned | CORRECT | It is a conceptual reference to a security standard and not directly actionable. |
| 6 | Windows XP → Described | CORRECT | The operating system name is generic and common, requiring additional context for detection. |
| 7 | Windows 2000 → Described | CORRECT | It is a generic legacy OS reference that is more descriptive than directly actionable. |

| 8 | `Security Information and Event Management (SIEM) systems` → `Mentioned` | CORRECT | It’s a generic reference to a category of systems rather than a specific, actionable indicator. |
| 9 | `intrusion monitoring systems` → `Mentioned` | CORRECT | The term describes a broad category without unique attributes that enable direct detection. |
| 10 | `Extrusion Detection` → `Mentioned` | CORRECT | It refers to a conceptual mechanism rather than a concrete, searchable indicator. |
| 11 | `passive vulnerability scanners (PVS)` → `Mentioned` | CORRECT | It’s a generic reference to a class of tools rather than an actionable, unique identifier. |
| 12 | `IDS` → `Mentioned` | CORRECT | "IDS" is an abbreviated, non-specific term that does not provide an exact indicator for detection. |
| 13 | `SCADA honeypot` → `Mentioned` | CORRECT | The observable is a conceptual decoy system reference rather than a specific, actionable entity. |
| 14 | `zero-days` → `Mentioned` | CORRECT | It’s a generic term for a class of vulnerabilities and does not serve as a unique, detectable indicator. |

| 15 | `ICSCSLorg` → `Actionable` | CORRECT | The observable is a complete domain identifier extracted from DNS logs that can be directly matched. |

===== ranking_results/ranking_results_sec_run_6.txt =====
md file name: /content/validation/analyzing-the-triton-industrial-malware.md

| 1 | "```\n1 r2 = 0x800000;\n 2\n ന\n   while (true)\n বাঁ\n   イ\n 5\n        if ((uint32_t)*(uint32_t*)(r2) == 0x400000) // cp_\n 6\n        ﮨﮯ\n 7\n            if ((uint32_t)*(uint32_t*)(r2 + 4) == 0x600000\n8\n            {\nറി\n                r2 += 0x18; // cp_status.fstat\n10 \n                 *(uint32_t*)(r2) = (uint32_t)value;\n11\n                 break;\n12\n            }\n13 \n        }\n14\n15\n        if ((r3 & 0xffffffffff) >= 0x800100)\n16\n        {\n17\n            break;\n18\n        }\n19\n        r2 += 4;\n20\n21\n     }\n22\n23 \n   system_call(-1);\n```" → Actionable | CORRECT — The observable is a complete code snippet wrapped in triple backticks, making it directly matchable per Rule 1. |
| 2 | "```\n2  #define M_WRITE_RAM 0x41\n 3  #define M_EXECUTE\n                                0×F9\n বা\n 5  struct argument_struct\n 6                                                                                                                                                                             \n 7\n          uint16_t unknown_ui16_00;\n ထ\n          uint8_t unknown_ui8_02;\n റി\n          uint16_t return_value;\n10\n          uint8_t cmd;\n                                                // cmd field\n11\n                                                    // mp field\n          uint8_t mp;\n12\n          uint32_t field_0;\n                                                 // argument field 0\n13\n          uint32_t field_1;\n                                                 // argument field 1\n14\n          uint8_t field_3[...];\n                                                // argument field 3\n15\n    };\n16\n17  void imain(void)\n18\n     ഇ\n19 \n          arg = (struct argument_struct*)get_argument();\n20\n          // Retrieve implant command and MP value\n21\n          cmd = arg->cmd;\n22\n          mp = arg->mp;\n23\n          compare_mp = *(uint8_t*)(0x199400);\n24\n          if ((mp == compare_mp) || (mp == 0xFF))\n25\n```" → Actionable | CORRECT — The snippet is enclosed in triple backticks, which makes it automatically actionable as an exact match indicator. |
| 3 | "0x17" → Described | CORRECT — A standalone hex constant like "0x17" is too generic and ambiguous to drive a unique detection without further context. |
| 4 | "#define M READ RAM" → Actionable | CORRECT — This is an exact macro definition that can be directly matched, making it actionable as a complete identifier. |
| 5 | "```\n27\n            mp = arg->return value;\n                                                               Work with us\n28\n29\n             // Check implant command\n30\n             switch (cmd)\n31\n             {\n32\n                 // Read N bytes from RAM at address X\n33\n                 case M READ RAM:\n34\n                 {\n35\n                     if (mp >= 0x14)\n36\n                      {\n37\n                          size = arg->field_0;\n                          address = arg->field 1;\n38\n39\n40\n                          if ((size > 0) && (size <= 0x400\n4 1\n                          ഇ\n42\n                              memcpy(&arg->cmd, address, s\n43\n                              return_value = (size + 0xA);\n4 4\n                          }\n45\n                          else\n                          {\n46\n                              goto main end;\n47\n                          }\n48\n                     }\n49\n                     else\n50\n                      {\n51\n                          goto main_end;\n52\n                     }\n53\n                 }break;\n54\n                 // Write N bytes from RAM at address X\n55\n                 case M_WRITE_RAM:\n56\n                 {\n57\n                     size = arg->field_0;\n58\n                     address = arg->field_1;\n59\n                     data = arg->field_3;\n60\n64\n                     if ((size > 0) && (size == (mp - 0x1\n65\n                     ー\n                          reenable_address_translation = 0\nരെ\n67\n68\n                          if (address < 0x100000)\n69\n                          {\n70\n                              reenable_address_translation\n71\n                              disable_address_translation(\n72\n                          }\n73\n7 4\n                          memcpy(address, &data, size);\n75\n76\n                          if (reenable_address_translation\n77\n                          {\n78\n                              enable_address_translation()\n79\n                          }\n80\n81\n                          return_value = 0xA;\n82\n                      }\n```" → Actionable | CORRECT — The code snippet is provided within triple backticks, making it a concrete, exact artifact for detection. |
| 6 | "```\n83\n                      else\n                                                                Work with us\n 84\n                      {\n 85\n                           goto main_end;\n 86\n                      }\n 87\n                  }break;\n 88\n                  / / Execute function at address X\n 89\n                  case M EXECUTE:\n 90\n                  {\n 91\n                      if (mp >= 0x10)\n 92\n                      {\n 93\n                           function_ptr = arg->field_0;\n 94\n                           if (function ptr < 0x100000)\n 95\n                           {\n 96\n                               call(function_ptr);\n                               return value = 0xA;\n100\n101\n                           }\n102\n                           else\n103\n                           {\n104\n                               goto main_end;\n105\n                           }\n106\n                      }\n107\n                      else\n108\n                      {\n109\n                           goto main_end;\n110\n                      }\n111\n112\n                  }break;\n113\n              }\n114\n115\n              switch end:\n116\n                  arg->unknown_ui8_02 = 0x96;\n117\n                  arg->return_value = return_value;\n118\n                  tristation_mp_diagnostic_data_response( )\n119\n120\n         }\n121\n122\n         / / This most likely continues with the actual Tr\n123\n         main end:\n124\n              jump(0x3A0B0);\n125\n     }\n126\n127\n     void disable_address_translation(void)\n128\n     {\n129\n                             // External Interrupt Disable\n         mtpsr eid, r3;\n                              // 11111111111111111111111111\n130\n         r4 = -0x40;\n         mfmsr r3;\n                            // r3 = Machine State Register\n131\n132\n                            / / Disable instruction address\n         r3 = r4 & r3;\n133\n         mtmsr r3;\n                            / / Machine State Register = r3\n134\n         return;\n135\n     }\n136\n137 void enable_address_translation(void)\n138 {\n```" → Actionable | CORRECT — Being a code snippet in triple backticks, the artifact is exact and uniquely identifiable. |
| 7 | "```\n// 00001100000000000000000000\n139\n         r3 = OxC00000;\n                                                              Work with us\n140\n         mtspr ic_csr, r3;\n                               // Instruction Cache Contro\n141\n         isync;\n                                 // Synchronize context, fl\n142\n         mfmsr r3;\n                                // r3 = Machine State Regi\n                              // 110000; Sets IR=1 (Instru\n143\n         r3 |= 0x30;\n1 4 4\n                                 // Machine State Register :\n         mtmsr r3;\n                                // Ordering to ensure all\n145\n         sync;\n                                 // External Interrupt Ena\n146\n         mtspr eie, r3;\n147\n         return;\n148\n     }\n149\n150  // This most likely retrieves the argument to the Tr\n151\n    void get_argument(void)\n152 \n     ഇ\n153\n         r3 = r31;\n154\n         jump(0x6B9CC);\n155\n     }\n156\n157  // This most likely sends a response to the TriStati\n158\n  void tristation_mp_diagnostic_data_response(void)\n159\n     ഇ\n160\n         r3 = r31;\n161\n         jump(0x68F0C);\n162\n     }\n```" → Actionable | CORRECT — As a full code snippet provided in a triple backtick block, this observable is directly actionable per Rule 1. |

| 8 | sales@midnightblue.nl → Actionable | CORRECT | The email is a complete, unique identifier that can be directly used in detection rules.

| 9 | sales[ ]midnightblue[ ]nl → Actionable | CORRECT | Though obfuscated, it represents a complete, unique email address (sales@midnightblue.nl) that is immediately actionable for detection. |

md file name: /content/validation/Jimmy Wylie - Analyzing PIPEDREAM Challenges in testing an ICS attack toolkit.md

| 1 | "PIPEDREAM" → Actionable | INCORRECT — should be "Described" because a toolkit’s name is a generic label that isn’t unique or high‐entropy enough to drive automated detection without further context. | The observable is merely a software/tool name mentioned in the title, which requires additional enrichment to be actionable. 

| 2 | PIPEDREAM → Mentioned | CORRECT | "PIPEDREAM" as a campaign codename lacks concrete technical attributes and is only conceptually referenced, making it non-actionable. |

| 3 | PIPEDREAM → Actionable | CORRECT | It is a unique tool name that can be directly matched in automated detection. |
| 4 | Schneider Electric PLCs → Mentioned | CORRECT | It is a generic reference to hardware rather than a unique, actionable identifier. |
| 5 | CODESYS library → Mentioned | CORRECT | It describes a generic industrial automation library without a distinct, matchable signature. |
| 6 | Omron PI Cs → Mentioned | CORRECT | It generically refers to a family of devices, making it unsuitable as a unique detection indicator. |
| 7 | DRAGOS → Actionable | CORRECT | It is a concrete tool name that can be exactly detected in logs with low false-positive risk. |
| 8 | OPC UA servers → Mentioned | CORRECT | It is a broad reference to a category of servers rather than a specific, actionable identifier. |

| 9 | DUSTTUNNFI → Actionable | CORRECT | The header string is unique and can be directly matched for detection. |
| 10 | LAZYCARGO → Actionable | INCORRECT — should be "Described" because the malware family name lacks additional contextual details to uniquely drive automated detection. | Without extra context (e.g., specific placement or usage), the name "LAZYCARGO" is ambiguous and not sufficiently unique for direct detection. |

| 11 | omront → Described | CORRECT | As an ICS device model name, “omront” is used for descriptive inventory purposes rather than as a unique, directly matchable indicator. |
| 12 | NX1P2 Compact Machine Controller → Described | CORRECT | This full product designation from an ICS historian is descriptive and requires contextual enrichment for detection. |
| 13 | NX-SL3300 Safety Controller → Described | CORRECT | The observable is a complete product name describing an ICS device but isn’t a unique detection artifact. |
| 14 | NJ501-1300 Automation Controller → Described | CORRECT | It identifies a specific ICS controller model in a descriptive manner rather than serving as a directly actionable indicator. |
| 15 | NX-ECC EtherCAT Coupler → Described | CORRECT | This product name is used for asset identification and is descriptive without being an exact, low–false positive indicator. |
| 16 | NX-EIC202 Ethernet/IP Coupler → Described | CORRECT | The string is a full product model name from an ICS environment, making it descriptive rather than an immediate detection artifact. |
| 17 | NX-ECC203 EtherCAT Coupler → Described | CORRECT | As with similar ICS device names, it is a descriptive model identifier not designed for direct automated matching. |
| 18 | S8VK Power Supply → Described | CORRECT | It’s a model identifier for an ICS component, serving as a descriptive reference rather than a unique actionable string. |
| 19 | 1 S-series Servo Drives → Described | CORRECT | Although specific, the observable describes an ICS device family and requires extra context for actionable detection. |
| 20 | Schneider → Described | CORRECT | The vendor name “Schneider” is generic and used for inventory context, not as a unique, directly matchable indicator. |
| 21 | TM25T PLC → Described | CORRECT | The PLC model name is a descriptive identifier within an ICS environment, lacking the uniqueness for direct detection. |
| 22 | TM241 PLC → Described | CORRECT | This model identifier is descriptive of an ICS device and isn’t a complete indicator for automated detection. |
| 23 | TM22 PPC → Described | CORRECT | It serves as a descriptive inventory label for an ICS component rather than a unique, matchable detection artifact. |
| 24 | TM258 PLC → Described | CORRECT | The product name is descriptive and specific to an ICS device model but isn’t inherently actionable on its own. |
| 25 | TM238 PLC → Described | CORRECT | This model name is used for descriptive categorization in an ICS context, not for direct, low–false positive detection. |
| 26 | LMC058 Motion Controller → Described | CORRECT | The observable is a product model name that describes an ICS component rather than serving as a precise IOC. |
| 27 | LMC078 Motion Controller → Described | CORRECT | It is a descriptive identifier for an ICS motion controller without being a unique automated detection string. |
| 28 | ICS Protocols → Mentioned | CORRECT | The term is a generic reference to industrial communication protocols and cannot be directly turned into a concrete detection indicator. |
| 29 | CODESYS → Described | CORRECT | Although it’s a discrete software/tool name, it is used contextually in threat intelligence and isn’t a low false‑positive IOC. |
| 30 | Schneider Discovery (NetManage) → Described | CORRECT | This tool’s name is specific but serves as a descriptive indicator for contextual enrichment rather than direct automated matching. |
| 31 | Modbus → Mentioned | CORRECT | As a generic industrial protocol, “Modbus” is only conceptually referenced and not unique enough for direct detection. |
| 32 | Omron FINS → Mentioned | CORRECT | The protocol name is a generic industry term and is mentioned conceptually rather than as an exact, actionable string. |
| 33 | OPC UA → Mentioned | CORRECT | This observable is a standard industrial protocol referenced conceptually, making it unsuitable for direct automated matching. |
| 34 | LAZYCARGO → Described | CORRECT | As a threat actor moniker, it is used for attribution and descriptive purposes rather than as a directly actionable IOC. |
| 35 | CV 220205 15368 - → Actionable | CORRECT | The vulnerability identifier is a complete, exact string that can be directly matched in detection systems. |
| 36 | Undisclosed Vulnerabilities in Schneider Electric. → Mentioned | CORRECT | This phrase is a generic vulnerability description and does not provide a unique, directly matchable indicator. |
| 37 | CN 2207 234 15 11 → Actionable | CORRECT | The vulnerability identifier is a complete and unique string that can be used for automated detection. |

| 38 | NX1P2 Controller → Actionable | CORRECT | This is a precise, complete device model string that can be directly matched for detection. |
| 39 | NX-EIC202 Ethernet IP Coupler → Actionable | CORRECT | The observable is a full product identifier, making it uniquely searchable. |
| 40 | NX-ECC201 EtherCat Coupler → Actionable | CORRECT | It is a complete model name that can be used as an exact indicator in network traffic. |
| 41 | SL3300 Safety Controller → Actionable | CORRECT | The string is a specific device model which can be directly utilized for detection purposes. |
| 42 | R88D-1SN10F-ECT Servo Drive → Actionable | CORRECT | This product model name is complete and unique, making it actionable. |
| 43 | R88D-1SN01L-ECT Servo Drive → Actionable | CORRECT | It is a full indicator string that allows for precise automated detection. |
| 44 | R88M-1M10030S-S2 AC Servo Motor → Actionable | CORRECT | The observable is a distinct, complete device model identifier suitable for detection rules. |

| 45 | `Modicon TM241 PLC (4.0.X firmware)` → `Described` | CORRECT | The observable provides descriptive identification of a PLC model without a complete, unique detection pattern. |
| 46 | `Modicon TM251 PLC (5.0 firmware)` → `Described` | CORRECT | The description identifies a specific PLC model and firmware version but lacks a unique, searchable indicator. |
| 47 | `Kepware OPC UA server` → `Described` | CORRECT | It is a descriptive reference to a product, not a fully unique indicator that can be directly matched. |
| 48 | `Rockwell devices` → `Mentioned` | CORRECT | This is a generic reference to a range of devices, not a concrete, actionable identifier. |

| 49 | Phoenix Contact power supply → Described | CORRECT | It is a vendor-specific industrial hardware item described for context but not a unique, actionable indicator. |
| 50 | Sixnet Industrial ethernet switch → Described | CORRECT | While it names a specific device type, it lacks the unique identification required for an actionable detection rule. |
| 51 | Stack light → Mentioned | CORRECT | It is a generic component lacking unique attributes to drive a specific detection mechanism. |
| 52 | buttons → Mentioned | CORRECT | The term is too generic and not specific enough to be used for automated detection. |

| 53 | TM251 → Described | CORRECT | It is a specific PLC model identifier that lacks the uniqueness required for automated detection. |
| 54 | 5.0 → Described | CORRECT | A firmware version number is ambiguous and not unique enough to trigger direct detection. |
| 55 | 4.0.X → Described | CORRECT | The use of a wildcard makes this firmware version pattern imprecise and not actionable on its own. |
| 56 | PLC → Mentioned | CORRECT | "PLC" is a generic reference to programmable logic controllers and cannot be turned into a concrete detection indicator. |

| 57 | SCHNEIDER ELECTRIC Modicon M251 PLC TM251MESE → Described | CORRECT | The product model name is descriptive and not a unique, signature-like indicator for automated detection. |
| 58 | ERS → Mentioned | CORRECT | The three‐letter code is ambiguous and too generic for direct actionable use. |
| 59 | ଞ୍ଚି ହ → Mentioned | CORRECT | As a short, non-English string from a multi-value cell, it is ambiguous and not uniquely actionable. |
| 60 | SPA → Mentioned | CORRECT | The value is a brief, ambiguous product feature code that isn’t distinct enough for detection. |
| 61 | BAT → Mentioned | CORRECT | It is a short, ambiguous product feature code that does not provide a unique actionable indicator. |
| 62 | ETH.1 → Mentioned | CORRECT | The interface identifier is ambiguous and common enough that it cannot be reliably used for automated detection. |
| 63 | SL → Mentioned | CORRECT | Being a very short code, it’s ambiguous and not uniquely identifying for detection purposes. |
| 64 | TM4 → Mentioned | CORRECT | The product code is brief and ambiguous, making it unsuitable as a unique actionable artifact. |
| 65 | ETH.2 → Mentioned | CORRECT | Similar to ETH.1, this interface identifier is too generic to serve as an actionable observable. |
| 66 | Ethernet 1 → Mentioned | CORRECT | As a common interface label, it is purely descriptive and not unique enough for direct detection. |
| 67 | Ethernet 2 → Mentioned | CORRECT | The generic label is ambiguous and does not provide the specificity needed for actionable detection. |
| 68 | MAC@:00-80-F4 04-09-D2 → Actionable | CORRECT | The complete MAC address string, even with its prefix, is unique and suitable for direct matching in detection systems. |
| 69 | MAC@:00-80-F4-0A-09-D1 → Actionable | CORRECT | This full MAC address is a unique, complete identifier that can be directly used in detection rules. |

| 70 | IMPACITOF → Mentioned | CORRECT | The term is a generic capability category reference without a unique, actionable signature. |
| 71 | CODESYS → Mentioned | CORRECT | It is simply a product name mentioned in context, lacking the specificity for direct automated detection. |
| 72 | CODESYSv3 → Mentioned | CORRECT | Despite including a version, it remains a generic tool reference rather than a unique, matchable string. |
| 73 | BADOMEN's Servo module → Mentioned | CORRECT | This is a descriptive, non-unique reference to functionality and not a concrete, actionable identifier. |
| 74 | PLC logic → Mentioned | CORRECT | It is a broad, generic term referring to programmable logic in industrial control systems rather than a precise detection artifact. |

| 75 | TCP/4840 → Actionable | CORRECT | "TCP/4840" is a complete, unique identifier (a specific port) that can be directly matched in detection rules. |
| 76 | OPC-UA servers → Mentioned | CORRECT | The term is a generic reference to a category of servers, not a precise indicator for automated detection. |
| 77 | CRASHOVERRIDE OPC-DA attack methodology → Mentioned | CORRECT | This phrase conceptually names an attack approach, lacking the specificity required for actionable detection. |

| 78 | MOUSEHOLE → Actionable | CORRECT | The value is a unique tool name that can be matched exactly as an identifier. |
| 79 | open‑source OPC UA library → Mentioned | CORRECT | The phrase is generic and descriptive, not a unique identifier suitable for direct detection. |
| 80 | Kepware OPC server → Mentioned | CORRECT | It refers to a common commercial product and lacks the specificity required for actionable matching. |
| 81 | Rockwell PLCs → Mentioned | CORRECT | The reference is generic to a category of devices and isn’t specific enough to serve as a detection signature. |

| 82 | MOUSEHOLE → Actionable | CORRECT | "MOUSEHOLE" is a complete, unique tool identifier that can be directly used in detection rules. |
| 83 | ns=2;s=Channel 1.Device2.high pressure setpoint → Actionable | CORRECT | This OPC UA NodeID is a full, exact identifier suitable for direct matching in monitoring systems. |
| 84 | ns=2;s=Channel1.Device2.Level_PID → Actionable | CORRECT | The provided OPC UA NodeID is a complete identifier, making it actionable for automated detection. |
| 85 | ns=2;s=Channel 1.Device2.solenoid energize → Actionable | CORRECT | As a fully specified OPC UA NodeID, it meets the criteria for being used in direct detection rules. |

| 86 | `27127` → `Actionable` | CORRECT | It’s a specific UDP port number that can be directly used in detection rules. |
| 87 | `1740` → `Actionable` | CORRECT | It’s a clear, unique UDP port that can be matched exactly by a detection system. |
| 88 | `Schneider Electric Controllers` → `Described` | CORRECT | It’s a general device description that lacks the unique attributes needed for an actionable indicator. |
| 89 | `Schneider PLCs` → `Described` | CORRECT | It’s a generic reference to a type of device, requiring additional context before it can drive automated detection. |
| 90 | `CODESYS` → `Described` | CORRECT | The term names a widely used industrial control software and isn’t unique enough for direct action. |
| 91 | `Modbus` → `Mentioned` | CORRECT | As a generic industrial protocol, it is conceptual rather than a concrete, matchable indicator. |
| 92 | `Python + Linux ELF Library` → `Mentioned` | CORRECT | It only describes a technology stack and does not provide a unique, actionable artifact for detection. |

| 93 | CODESYS → Mentioned | CORRECT | The name "CODESYS" is a generic reference to a protocol rather than a unique, actionable identifier.  |

| 94 | `TM241` → `Described` | CORRECT | A device model is a non-unique identifier that requires contextual enrichment rather than being directly actionable. |
| 95 | `TM251` → `Described` | CORRECT | A device model identifier is described information, not a unique or complete artifact for automated detection. |
| 96 | `CODESYS` → `Mentioned` | CORRECT | The software/tool name is referenced conceptually and is too generic to be a standalone actionable indicator. |
| 97 | `EVILSCHOLAR` → `Mentioned` | CORRECT | A threat actor or campaign name is mentioned conceptually, making it unfit for direct automated detection. |

| 98 | EVILSCHOLAR → Mentioned | CORRECT | Threat actor names are conceptual references and not actionable indicators. |
| 99 | CODESYS → Mentioned | CORRECT | The software/tool name is mentioned in context without providing a unique, actionable string. |
| 100 | TM241 → Mentioned | CORRECT | The device model is referenced in a non-unique manner, making it a conceptual mention. |
| 101 | TM251 → Mentioned | CORRECT | Like TM241, the device model is simply mentioned without actionable specificity. |
| 102 | Raspberry Pi → Mentioned | CORRECT | The hardware reference is generic and not a uniquely actionable indicator. |
| 103 | Hitachi EHV+ → Mentioned | CORRECT | The industrial device model is mentioned as context rather than as a precise, detectable indicator. |

| 104 | EVILSCHOLAR → Mentioned | CORRECT | "EVILSCHOLAR" is a threat actor name used conceptually rather than as a precise technical indicator. |
| 105 | PLCProxy → Mentioned | CORRECT | "PLCProxy" is a tool name mentioned without actionable details, making it unsuitable for direct automated detection. |

| 106 | gateway IP → Mentioned | CORRECT | Generic descriptor with no specific numeric IP, so it cannot be directly matched for detection. |
| 107 | internal network → Mentioned | CORRECT | It refers to a generic network segment without actionable identifiers. |
| 108 | proxy plugin → Mentioned | CORRECT | The term is generic and does not offer a unique string to build a low false‑positive detection rule. |
| 109 | Modbus → Mentioned | CORRECT | It only names a common protocol without providing a unique identifier for detection. |
| 110 | TM251 → Actionable | INCORRECT — should be "Described" because the device model name is too generic to serve as a unique, low false‑positive detection indicator. | While the model is specified, it lacks the inherent uniqueness required for actionable automated detection. |
| 111 | SSH → Mentioned | CORRECT | As a protocol reference, it's too generic for direct actionable detection. |
| 112 | HTTP → Mentioned | CORRECT | The observable only names the protocol, making it unsuitable as a unique actionable indicator. |

| 113 | EVILSCHOLAR → Actionable | CORRECT | The observable is a unique tool name that can be directly matched in logs for automated detection. 

| 114 | controller → Mentioned | CORRECT | "controller" is a generic term with no unique technical signature. |
| 115 | PLC → Mentioned | CORRECT | "PLC" is a generic reference to a programmable logic controller and is not sufficiently unique for automated detection. |
| 116 | EWS → Mentioned | CORRECT | "EWS" is an abbreviated generic term for an embedded web server, offering no distinct actionable indicator. |
| 117 | EVILSCHOLAR → Actionable | CORRECT | "EVILSCHOLAR" is a specific tool name that is unique enough to serve as a detection signature. |
| 118 | FAIL SAFE → Mentioned | CORRECT | "FAIL SAFE" is a common phrase describing a state, making it too generic to be directly actionable. |

| 119 | Omron HTTP API → Mentioned | CORRECT | The term is a generic reference to an API without specific, unique attributes. |
| 120 | FINS protocol → Mentioned | CORRECT | "FINS protocol" is a general reference to an industrial communication protocol, not a specific indicator. |
| 121 | telnet → Mentioned | CORRECT | "telnet" is a generic network protocol name and is referenced conceptually rather than as a unique artifact. |
| 122 | TCPDUMP → Mentioned | CORRECT | TCPDUMP is a common software tool name and lacks the specificity required for an actionable indicator. |
| 123 | EtherCat → Mentioned | CORRECT | "EtherCat" generically refers to an industrial Ethernet protocol and does not uniquely identify an instance. |
| 124 | Python framework → Mentioned | CORRECT | The phrase is a broad reference to a type of software tool, lacking unique identifying characteristics. |
| 125 | Omron controllers → Mentioned | CORRECT | This is a generic reference to a product family rather than an exact, unique detection indicator. |
| 126 | Omron devices → Mentioned | CORRECT | "Omron devices" is a broad term and does not offer the specificity needed for actionable detection. |
| 127 | Denial-of-service (DoS) attack → Mentioned | CORRECT | The phrase generically describes an attack technique without providing a unique signature to detect. |
| 128 | PLC → Mentioned | CORRECT | "PLC" is a general term for Programmable Logic Controllers and isn't unique enough for direct detection. |
| 129 | ladder logic → Mentioned | CORRECT | "Ladder logic" is a generic term for a programming language in industrial controls and is not uniquely actionable. |

| 130 | CVE-2022-34151 → Actionable | CORRECT | The CVE identifier is a complete, unique string that can be directly matched. |
| 131 | cpu.fcqi → Actionable | CORRECT | This HTTP CGI endpoint string is specific and can be directly used in a detection rule. |
| 132 | ecat.fcqi → Actionable | CORRECT | As a complete CGI endpoint value, it is uniquely identifiable for automated detection. |
| 133 | SYSMAC studio → Described | CORRECT | The tool name is a contextual reference requiring further enrichment before it can drive automated detection. |
| 134 | | POST /cgi-bin/cpu.fcgi HTTP/1.1                                                                        |
|--------------------------------------------------------------------------------------------------------|
| ,realm="CPU-Unit Interface",nonce="c<br>Authorization: Digest username="<br>,uri="/cgi-bin/            |
| cpu.fcgi'], cnonce="<br>,nc=00000a59,qop="auth",response="                                             |
| Host: 192.168.56.17                                                                                    |
| Cookie: ID=1585757116                                                                                  |
| Content-Length: 14319                                                                                  |
|                                                                                                        |
| File_dwnload_44f4c5794ef4d2683de1c967845f8f55874d5ae6d64cbec,24897862310892898310C235888006 ++ ob. ` ( |
| $.6                                                                                                   |
| e0H_ °a Wrn.z1tkQ.e.a. < ·&YCffT.BN>7K>, J                                                             |
| EP.~dRd_                                                                                               |
|                                                                                                        |
| SYSMAC Innic transfor                                                                                  | → Actionable | CORRECT | The full HTTP log capture is a complete, unique artifact that can be directly matched in network traffic logs. |

| 135 | Backup Module → Described | CORRECT | The term is a generic module reference that lacks a unique identifier, making it non‑actionable. |
| 136 | binary shared object → Described | CORRECT | The observable is a generic file type description with insufficient specificity for automated detection. |
| 137 | bad address → Mentioned | CORRECT | The phrase is conceptual and ambiguous, providing a non‑specific description that cannot be directly leveraged. |
| 138 | Transfer Module → Described | CORRECT | It is a generic reference to a module without unique details, aligning with a "Described" classification. |

| 139 | `0x40110000` → `Actionable` | CORRECT | The hex event code is complete and distinct, making it actionable for detection rules. |
| 140 | `OxpOU200000` → `Actionable` | CORRECT | As a unique string PLC event code, it is directly matchable and suitable for detection. |
| 141 | `PRG:Program0` → `Described` | CORRECT | The generic PLC program identifier requires additional contextual information for precise detection. |

| 142 | `Program Upload Fails` → `Mentioned` | CORRECT | It is a generic error message string without unique or searchable attributes. |
| 143 | `Program Mode` → `Mentioned` | CORRECT | It is a generic UI mode reference that isn’t distinctive enough for automated detection. |
| 144 | `Transfer from Controller` → `Mentioned` | CORRECT | A descriptive UI label that does not represent a unique, actionable indicator. |
| 145 | `Configurations and Setup` → `Mentioned` | CORRECT | It is a generic configuration descriptor used conceptually, not as a unique identifier. |
| 146 | `Task Settings` → `Mentioned` | CORRECT | A generic configuration term that is referenced conceptually and isn’t uniquely actionable. |
| 147 | `EtherCAT` → `Mentioned` | CORRECT | As a well‑known protocol name, it is generic and not unique enough for concrete detection. |
| 148 | `CPU Rack` → `Mentioned` | CORRECT | It describes a physical component generically, lacking the uniqueness needed for detection. |
| 149 | `I/O Map` → `Mentioned` | CORRECT | A generic mapping descriptor that is conceptually referenced rather than a discrete indicator. |
| 150 | `Controller Setup` → `Mentioned` | CORRECT | It is a generic phrase for a setup process rather than a unique, actionable artifact. |
| 151 | `Motion Control Setup` → `Mentioned` | CORRECT | A descriptive configuration label that does not serve as a precise, actionable identifier. |
| 152 | `Programming` → `Mentioned` | CORRECT | It is a generic operational term lacking the specificity required for automated detection. |
| 153 | `POUs` → `Mentioned` | CORRECT | The acronym is generic and does not offer a distinctive, matchable artifact for detection. |
| 154 | `Data` → `Mentioned` | CORRECT | An overly generic term that cannot be used directly as an actionable indicator. |
| 155 | `Library` → `Mentioned` | CORRECT | It is a generic descriptor for a collection of code without unique identifiable elements. |
| 156 | `NX Unit application data on the CPU Rack` → `Mentioned` | CORRECT | A descriptive phrase that does not yield a discrete, searchable artifact for detection. |
| 157 | `EtherCAT slave backup parameters` → `Mentioned` | CORRECT | It is a generic descriptive string for backup parameters, lacking a unique indicator. |
| 158 | `Unit operation settings` → `Mentioned` | CORRECT | A general configuration term that is conceptually descriptive rather than uniquely actionable. |
| 159 | `NX Unit application data on Slave Terminals` → `Mentioned` | CORRECT | A descriptive label that does not provide a unique identifier for detection purposes. |
| 160 | `EtherNet/IP connection settings` → `Mentioned` | CORRECT | It is a generic configuration phrase without the specificity required for actionable detection. |
| 161 | `tag data link settings` → `Mentioned` | CORRECT | A generic descriptive term that is conceptually referenced and not uniquely matchable. |
| 162 | `Execute` → `Mentioned` | CORRECT | A common UI command label that is too generic to serve as a unique detection indicator. |
| 163 | `Close` → `Mentioned` | CORRECT | A generic UI command that does not qualify as a unique, matchable artifact. |
| 164 | `OK` → `Mentioned` | CORRECT | A standard button label that is generic and not usable as a unique indicator for detection. |

| 165 | BADOMEN → Actionable | CORRECT | "BADOMEN" is a complete, unique product/tool name that can be directly matched. |
| 166 | NX1P2 → Actionable | CORRECT | "NX1P2" is a precise device identifier that is unique enough for automated detection. |
| 167 | R88D-1SN10F-ECT → Actionable | CORRECT | The full servo drive model code is complete and unique, making it actionable. |
| 168 | R88D-1SN01L-ECT → Actionable | CORRECT | This model identifier is fully specified and unambiguous, fitting actionable criteria. |
| 169 | R88M-1M10030S-S2 → Actionable | CORRECT | The servo motor model string is complete and exact, suitable for detection rules. |
| 170 | 1SN10F → Described | CORRECT | As a partial drive designation, "1SN10F" is ambiguous on its own and only descriptive. |
| 171 | 1SN01L → Described | CORRECT | "1SN01L" is a fragment of a full model name and requires extra context, so 'Described' is appropriate. |
| 172 | EtherCat → Mentioned | CORRECT | Being a generic protocol name, "EtherCat" is conceptually referenced and not unique enough to be actionable. |

| 173 | "ETHERCAT SETUP" → "Mentioned" | CORRECT | The value is a generic header that lacks actionable specificity for direct detection.  |

| 174 | 3B60.05 → Actionable | CORRECT | It is a complete, unique PCI parameter identifier from PLC ladder logic that can be matched directly. |
| 175 | 4020.01 → Actionable | CORRECT | It is a precise, fully-specified PLC parameter value, making it actionable for detection. |
| 176 | 4020.03 → Actionable | CORRECT | This observable is a complete ICS parameter identifier that can be used directly for automated detection. |
| 177 | 3B50.05 → Actionable | CORRECT | The value is a specific, unique PLC identifier that can be exactly matched, meeting actionable criteria. |
| 178 | 3B60.04 → Actionable | CORRECT | This PLC parameter value is fully formed and unique, which makes it actionable for detection purposes. |
| 179 | 3B70.01 → Actionable | CORRECT | It is a complete identifier from PLC ladder logic, hence it is directly actionable for detection.

| 180 | NX1P2 → Actionable | CORRECT | NX1P2 is a complete, unique identifier (a device model name) that can be directly matched in log data. |

| 181 | `POU runFUNCTION BLOCK` → `Actionable` | CORRECT | Unique, complete PLC function identifier that can be directly matched. |
| 182 | `f LPOU NX Get1sClk` → `Actionable` | CORRECT | Specific PLC function name that is complete and unique for detection. |
| 183 | `f start` → `Described` | CORRECT | A generic function name that is ambiguous and not uniquely actionable. |
| 184 | `f sub 568` → `Described` | CORRECT | Generic subroutine naming makes it insufficient for direct detection. |
| 185 | `f sub 57C` → `Described` | CORRECT | Generic subroutine name that lacks uniqueness for automated detection. |
| 186 | `f _imp_POU_runFUNCTION BLOCK` → `Actionable` | CORRECT | A complete, specific function name suitable for direct matching. |
| 187 | `/ _imp_LPOU_NX_Get1sClk` → `Actionable` | CORRECT | A precisely formed PLC function identifier that is directly matchable. |
| 188 | `.plt` → `Mentioned` | CORRECT | A common segment identifier that is too generic to be actionable. |
| 189 | `.text` → `Mentioned` | CORRECT | Generic segment name not unique enough for automated detection. |
| 190 | `extern` → `Mentioned` | CORRECT | A generic keyword with no unique identifying properties. |
| 191 | `0000548` → `Described` | CORRECT | A memory address value extracted from decompiled code and not independently actionable. |
| 192 | `00000554` → `Described` | CORRECT | Memory address from decompiled output that is context‐specific and non‐searchable. |
| 193 | `00000560` → `Described` | CORRECT | A decompiled memory address that cannot be directly used as an indicator. |
| 194 | `00000568` → `Described` | CORRECT | Context-specific memory address that is not uniquely actionable. |
| 195 | `0000057C` → `Described` | CORRECT | Memory address with context dependency, thus not directly actionable. |
| 196 | `00001DD4` → `Described` | CORRECT | A decompiled memory address value that is insufficient for direct matching. |
| 197 | `0001DD8` → `Described` | CORRECT | Memory address that is context‐specific and not directly searchable. |
| 198 | `00000000C` → `Described` | CORRECT | A hex value representing length from decompilation, lacking uniqueness. |
| 199 | `0000000C` → `Described` | CORRECT | Generic length value from decompiled data that is not actionable on its own. |
| 200 | `00000008` → `Described` | CORRECT | A common hex length value that lacks sufficient uniqueness for detection. |
| 201 | `00000014` → `Described` | CORRECT | Context-specific hex length value that does not serve as a unique indicator. |
| 202 | `0000018C` → `Described` | CORRECT | Hex value from decompilation used for length, not directly actionable. |
| 203 | `00000028` → `Described` | CORRECT | A locals value from decompiled code that is context‐dependent and non‐actionable. |
| 204 | `00000004` → `Described` | CORRECT | Generic hex length value that is not unique enough for automated detection. |
| 205 | `*(_BYTE *)(v17 + 16) = 0;` → `Described` | INCORRECT — should be "Actionable" because it is a complete and unique code snippet that can be directly matched. | Complete code assignment allows for precise detection. |
| 206 | "```\n// Parameter settings before calling function block\n```" → `Mentioned` | INCORRECT — should be "Actionable" because content wrapped in triple backticks is directly matchable. | Code fences indicate an actionable code snippet per Rule 1. |
| 207 | "```\n// Distance,\n```" → `Mentioned` | INCORRECT — should be "Actionable" because the triple backticks denote a complete, matchable code snippet. | Code-fenced content is treated as directly actionable. |
| 208 | "```\n// Velocity\n```" → `Mentioned` | INCORRECT — should be "Actionable" because being in a code fence makes it directly matchable. | Triple backticks designate the snippet as actionable. |
| 209 | `\*v18 = 0;` → `Described` | INCORRECT — should be "Actionable" because it is a full code snippet that can be matched exactly. | Complete code assignment is actionable despite formatting. |
| 210 | `// Acceleration` → `Mentioned` | CORRECT | A generic code comment that provides context but is not a unique indicator. |
| 211 | `// Deceleration` → `Mentioned` | CORRECT | Generic informational comment not intended for direct detection. |
| 212 | `>>>` → `Mentioned` | CORRECT | A standard Python prompt that is too generic to be actionable. |
| 213 | `>>> from ieee754 import IEEE754` → `Described` | INCORRECT — should be "Actionable" because it is a complete and unique Python command that can be directly matched. | Exact command strings are considered actionable indicators. |
| 214 | `>>> conv = lambda x: print(IEEE754(x).str2hex())` → `Described` | INCORRECT — should be "Actionable" because the full Python command can be directly matched. | Complete command lines qualify as actionable per the guidelines. |
| 215 | `>>> conv(120.0)` → `Described` | INCORRECT — should be "Actionable" because it is a precise, complete Python command string. | Unique command strings are directly searchable and thus actionable. |
| 216 | `405e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000` → `Actionable` | CORRECT | A unique, complete hex string output that is directly matchable. |
| 217 | `>>> conv(40.0)` → `Described` | INCORRECT — should be "Actionable" because it is a complete and unique Python command that can be directly matched. | Full Python command texts are actionable when complete. |
| 218 | `40440000000000000000` → `Actionable` | CORRECT | A distinct hex string that can be used directly in detection. |
| 219 | `888` → `Mentioned` | CORRECT | A generic numeric console output that is not sufficiently unique for detection. |
| 220 | `// It appears that it may hvae just compiled it in order.` → `Mentioned` | CORRECT | A general code comment with no unique actionable content. |
| 221 | `// Numbers are represented as IEE754 floats` → `Mentioned` | CORRECT | Generic comment information that does not serve as a distinct indicator. |
| 222 | `**( WORD **)(v16 + 8) = v14;` → `Described` | INCORRECT — should be "Actionable" because it is a complete PLC code statement that can be directly matched despite formatting. | The full code snippet is precise enough for automated detection. |
| 223 | `*( QWDRD *)*( DWRD *)(v16 + 16) = 0x485E0000000000LL;// 120 units, one of distance, acceleration v18 = *( DWORD **)(v16 + 24);` → `Described` | INCORRECT — should be "Actionable" because it is a complete, unique PLC code snippet that can be directly matched. | Full code snippets meet the criteria for actionable indicators. |
| 224 | `0x485E0000000000LL` → `Actionable` | CORRECT | A unique hex constant from code that is directly actionable. |
| 225 | `// 40 units - this is the Velocity` → `Mentioned` | CORRECT | A descriptive code comment that is non-actionable. |
| 226 | `v18[1] = 0x40440000;` → `Described` | INCORRECT — should be "Actionable" because it is a complete code statement that can be directly matched. | The full function call statement qualifies as an actionable code snippet. |
| 227 | `0x40440000` → `Actionable` | CORRECT | A distinct hex constant that is directly matchable for detection purposes. |
| 228 | `*( ONORD *)*( DWORD *)(v16 + 32) = 0x405E000000000LL;// 120 units, one of distance, acceleration or deceleration` → `Described` | INCORRECT — should be "Actionable" because it is a complete, unique line of PLC code that can be directly matched. | Full code snippets are actionable when they provide complete context. |
| 229 | `0x405E000000000LL` → `Actionable` | CORRECT | A unique hex constant, clearly defined for direct matching. |
| 230 | `*( QWBD *)*( DWBRD *)(v16 + 40) = 0x465E0000000000LL;// 120 units, one of distance, acceleration or deceleration` → `Described` | INCORRECT — should be "Actionable" because it is a full, unique PLC code snippet that can be directly matched. | Complete code lines are directly actionable according to the detection rules. |
| 231 | `0x465E0000000000LL` → `Actionable` | CORRECT | A distinct hex constant that is easily used for direct detection. |
| 232 | `result = POU runFUNCTION BLOCK();` → `Described` | INCORRECT — should be "Actionable" because it is a complete function call statement that can be directly matched. | The full code snippet is specific and uniquely identifiable for detection. |

| 233 | `safety programming` → `Mentioned` | CORRECT | This is a generic concept label referring to a process, not a unique, searchable identifier. |
| 234 | `program mode` → `Mentioned` | CORRECT | The term is a conceptual mode description without a unique signature for automated detection. |
| 235 | `debug stop` → `Mentioned` | CORRECT | It is a descriptive command or state reference rather than a specific, actionable artifact. |
| 236 | `Debuq Run` → `Mentioned` | CORRECT | Despite the typographical error, it remains an abstract mode label that is non‑unique and non‑actionable. |
| 237 | `Safety Validation` → `Mentioned` | CORRECT | The observable is a process step reference and does not constitute a concrete, detection‑ready identifier. |
| 238 | `run mode` → `Mentioned` | CORRECT | This is a generic operational state label with insufficient uniqueness for direct detection. |

| 239 | "SYSMAC Safety Program Download" → "Mentioned" | INCORRECT — should be "Described" because the string is a specific but partial module name that, while identifiable, requires further context before it can be used in a detection rule. | It provides more descriptive detail than a purely conceptual reference. |
| 240 | "Safety Function" → "Mentioned" | CORRECT | It is a generic term that only conceptually identifies a function and cannot be directly used for detection. |

| 241 | BADOMEN → Described | CORRECT | "BADOMEN" is a specific system/tool name referenced in context, making it a non‑automated detection artifact, thus fitting "Described." |
| 242 | CPU → Described | CORRECT | "CPU" is a generic term for an endpoint component and is ambiguous for direct automated matching, so "Described" is appropriate. |
| 243 | ECAT → Described | CORRECT | "ECAT" is an abbreviated, context‐dependent reference (likely EtherCAT) and not uniquely actionable, matching "Described." |
| 244 | Safety Programs → Mentioned | CORRECT | "Safety Programs" is a generic reference to a category rather than a unique identifier, which fits the "Mentioned" rank. |
| 245 | Safety Programming → Mentioned | CORRECT | "Safety Programming" is a conceptual reference without concrete detection attributes, so "Mentioned" is correct. |
| 246 | NxBus → Described | CORRECT | "NxBus" is a specific, context‐bound endpoint interface name that may require further context for detection, making "Described" fitting. |
| 247 | Servo → Mentioned | CORRECT | "Servo" is a common industrial control component term and too generic for direct detection, thus "Mentioned" is appropriate. |

| 248 | "MOUSEHOLE demo" → "Described" | CORRECT | The indicator is a reference to a demonstration scenario without a concrete, searchable artifact. |
| 249 | "PIPEDREAM" → "Described" | CORRECT | The observable is a tool name used conceptually, lacking a unique, actionable technical artifact. |

| 250 | `PIPEDREAM` → `Mentioned` | CORRECT | The observable is a malware family name referenced conceptually without unique, actionable details. |
| 251 | `ICSsploit` → `Mentioned` | CORRECT | The observable is simply a tool name mentioned in context, not a specific detection indicator. |
| 252 | `Metasploit "SCADA"` → `Mentioned` | CORRECT | The observable is a variant designation of a known tool, referenced conceptually rather than as a unique, actionable indicator. |

| 253 | EWS → Described | CORRECT | It’s a vendor tool name mentioned in context without a unique identifier for direct automated detection. |
| 254 | SoMachine → Described | CORRECT | The observable is a specific software/tool name that lacks the unique characteristics required for an actionable indicator. |
| 255 | Sysmac → Described | CORRECT | Like the others, this product name is referenced contextually and isn’t sufficiently unique for direct detection, fitting "Described". |

| 256 | dragos.com/pipedream → Actionable | CORRECT | The URL is a complete, unique indicator that can be matched directly in detection rules. |
| 257 | jimmy@dragos.com → Actionable | CORRECT | The email address is fully specified and unique, making it directly searchable. |
| 258 | @mayahustle → Mentioned | INCORRECT — should be "Actionable" because the social media handle is a complete and unique identifier that can be directly matched. | Social media handles, when provided exactly, are actionable indicators similar to other complete identifiers. |

md file name: /content/validation/aa22-103a.md

| 1 | Schneider Electric programmable logic controllers (PLCs) → Described | CORRECT | It's a generic description of an ICS device type rather than a complete, unique indicator. |
| 2 | OMRON Sysmac NEX PLCs → Described | CORRECT | It describes a category of industrial controllers and is too generic to be directly actionable. |
| 3 | Open Platform Communications Unified Architecture (OPC UA) servers → Described | CORRECT | The observable refers to a general type of server, which requires additional context to be actionable. |
| 4 | ASRock motherboard driver → Described | CORRECT | This is a generic description of a driver, lacking a unique identifier suitable for automated detection. |

| 5 | `/sites/default/files/publications/aa22-103a_apt_cyber_tools_targeting_ics_scada_devices.pdf` → `Actionable` | CORRECT | The file path is a complete, uniquely identifiable URL component that can be directly matched in detection systems.  |

| 6 | `Schneider Electric MODICON PLCs` → `Described` | CORRECT | It names a product family rather than a unique detection indicator. |
| 7 | `Schneider Electric MODICON Nano PLCs` → `Described` | CORRECT | It refers to a product line requiring additional context to be actionable. |
| 8 | `TM251` → `Described` | CORRECT | As a PLC model identifier, it is ambiguous and not uniquely actionable. |
| 9 | `TM241` → `Described` | CORRECT | This model name is descriptive and not a unique, low false‑positive indicator. |
| 10 | `M258` → `Described` | CORRECT | The model string is generic and would require further enrichment before detection. |
| 11 | `M238` → `Described` | CORRECT | It is a PLC model designation that is descriptive rather than uniquely actionable. |
| 12 | `LMC058` → `Described` | CORRECT | The identifier is a model number, making it descriptive and ambiguous for detection. |
| 13 | `LMC078` → `Described` | CORRECT | It represents a PLC model that is insufficient alone for direct automated detection. |
| 14 | `OMRON Sysmac NJ and NX PLCs` → `Described` | CORRECT | This is a reference to a family of devices, needing additional context for detection. |
| 15 | `NEX NX1P2` → `Described` | CORRECT | The model identifier is descriptive and would require further specificity for actionable detection. |
| 16 | `NX-SL3300` → `Described` | CORRECT | As a PLC model name, it is not unique enough to be used directly in a detection rule. |
| 17 | `NX-ECC203` → `Described` | CORRECT | It is a descriptive PLC model identifier without inherent unique detection properties. |
| 18 | `NJ501-1300` → `Described` | CORRECT | The model string is used to describe a device and is not intended for direct automated action. |
| 19 | `S8VK` → `Described` | CORRECT | This short model identifier is ambiguous and descriptive instead of being uniquely actionable. |
| 20 | `R88D-1SN10F-ECT` → `Described` | CORRECT | Despite its detail, it is a PLC model designation that serves as a descriptive indicator. |
| 21 | `OPC Unified Architecture (OPC UA) servers` → `Mentioned` | CORRECT | It refers broadly to a standard technology rather than a concrete, matchable indicator. |
| 22 | `AsrDrv103.sys` → `Actionable` | CORRECT | The complete file name is a unique string that can be directly matched in detection systems. |
| 23 | `CVE-2020-15368` → `Described` | CORRECT | The CVE identifier requires lookups and additional context, making it descriptive rather than directly actionable. |

| 24 | Modbus (TCP 502) → Mentioned | CORRECT | It’s a generic protocol and port reference commonly seen in ICS environments, making it conceptually noted rather than a unique, actionable indicator. |
| 25 | UDP port 27127 → Mentioned | CORRECT | Although it is a complete port identifier, its common usage in benign engineering workstations makes it ambiguous for automated, low-false‐positive detection. |
| 26 | CODESYS → Mentioned | CORRECT | The software name is generic and widely used in ICS, thus serving as a conceptual reference rather than a unique, actionable artifact. |
| 27 | UDP port 1740 → Actionable | CORRECT | This specific port is tied to a malicious APT tool activity and is uncommon in legitimate traffic, making it a clear, actionable indicator. |

| 28 | Factory Interface Network Service (FINS) protocol → Actionable | INCORRECT — should be "Mentioned" because it is a generic protocol reference rather than a uniquely searchable indicator. | Protocol names, even in ICS contexts, are conceptual and used for classification rather than direct automated detection. |
| 29 | Hypertext Transfer Protocol (HTTP) → Mentioned | CORRECT | HTTP is a generic network protocol and is conceptually referenced, which fits the "Mentioned" rank. |
| 30 | Hypertext Transfer Protocol Secure (HTTPS) → Mentioned | CORRECT | HTTPS, as a secure protocol reference, is appropriately marked "Mentioned" since it’s a generic technology descriptor. |
| 31 | Media Access Control (MAC) address → Mentioned | CORRECT | A MAC address reference is a generic type indicator and not a unique, actionable observable. |

| 32 | APT Tool for OPC UA → Mentioned | CORRECT | The report clearly states that this is a conceptual reference rather than a concrete, actionable string. |

| 33 | ICSNPP → Actionable | CORRECT | The exact string "ICSNPP" can be directly matched for detection. |
| 34 | ASRock driver → Described | CORRECT | The term "ASRock driver" is ambiguous and lacks a precise, unique identifier for automated detection. |

| 35 | `Execution` → `Mentioned` | CORRECT | The term is a generic MITRE ATT&CK tactic referenced conceptually. |
| 36 | `Persistence` → `Mentioned` | CORRECT | The term is a generic MITRE ATT&CK tactic referenced conceptually. |
| 37 | `Discovery` → `Mentioned` | CORRECT | The term is a generic MITRE ATT&CK tactic referenced conceptually. |
| 38 | `Lateral Movement` → `Mentioned` | CORRECT | The term is a generic MITRE ATT&CK tactic referenced conceptually. |
| 39 | `Collection` → `Mentioned` | CORRECT | The term is a generic MITRE ATT&CK tactic referenced conceptually. |
| 40 | `Command and Control` → `Mentioned` | CORRECT | The term is a generic MITRE ATT&CK tactic referenced conceptually. |
| 41 | `Inhibit Response Function` → `Mentioned` | CORRECT | The term is a generic MITRE ATT&CK tactic referenced conceptually. |
| 42 | `Impair Process Control` → `Mentioned` | CORRECT | The term is a generic MITRE ATT&CK tactic referenced conceptually. |
| 43 | `Impact` → `Mentioned` | CORRECT | The term is a generic MITRE ATT&CK tactic referenced conceptually. |
| 44 | `Initial Access` → `Mentioned` | CORRECT | The term is a generic MITRE ATT&CK tactic referenced conceptually. |
| 45 | `Evasion` → `Mentioned` | CORRECT | The term is a generic MITRE ATT&CK tactic referenced conceptually. |
| 46 | `Command-Line Interface [T0807]` → `Mentioned` | CORRECT | The technique name is a conceptual reference from MITRE ATT&CK and not a unique detection indicator. |
| 47 | `Scripting [T0853]` → `Mentioned` | CORRECT | The technique name is a conceptual reference from MITRE ATT&CK and not a unique detection indicator. |
| 48 | `Modify Program [T0889]` → `Mentioned` | CORRECT | The technique name is a conceptual reference from MITRE ATT&CK and not actionable as a unique identifier. |
| 49 | `System Firmware [T0857]` → `Mentioned` | CORRECT | The technique name is a conceptual reference from MITRE ATT&CK and not actionable as a unique identifier. |
| 50 | `Valid Accounts [T0859]` → `Mentioned` | CORRECT | The technique name is a conceptual reference from MITRE ATT&CK and not actionable as a unique identifier. |
| 51 | `Remote System Discovery [T0846]` → `Mentioned` | CORRECT | The technique name is a conceptual reference from MITRE ATT&CK and not actionable as a unique identifier. |
| 52 | `Remote System Information Discovery [T0888]` → `Mentioned` | CORRECT | The technique name is a conceptual reference from MITRE ATT&CK and not actionable as a unique identifier. |
| 53 | `Default Credentials [T0812]` → `Mentioned` | CORRECT | The technique name is a conceptual reference from MITRE ATT&CK and not actionable as a unique identifier. |
| 54 | `Program Download [T0843]` → `Mentioned` | CORRECT | The technique name is a conceptual reference from MITRE ATT&CK and not actionable as a unique identifier. |
| 55 | `Monitor Process State [T0801]` → `Mentioned` | CORRECT | The technique name is a conceptual reference from MITRE ATT&CK and not actionable as a unique identifier. |
| 56 | `Program Upload [T0845]` → `Mentioned` | CORRECT | The technique name is a conceptual reference from MITRE ATT&CK and not actionable as a unique identifier. |
| 57 | `Commonly Used Port [T0885]` → `Mentioned` | CORRECT | The technique name is a conceptual reference from MITRE ATT&CK and not actionable as a unique identifier. |
| 58 | `Standard Application Layer Protocol [T0869]` → `Mentioned` | CORRECT | The technique name is a conceptual reference from MITRE ATT&CK and not actionable as a unique identifier. |
| 59 | `Block Reporting Message [T0804]` → `Mentioned` | CORRECT | The technique name is a conceptual reference from MITRE ATT&CK and not actionable as a unique identifier. |
| 60 | `Block Command Message [T0803]` → `Mentioned` | CORRECT | The technique name is a conceptual reference from MITRE ATT&CK and not actionable as a unique identifier. |
| 61 | `Denial of Service [T0814]` → `Mentioned` | CORRECT | The technique name is a conceptual reference from MITRE ATT&CK and not actionable as a unique identifier. |
| 62 | `Data Destruction [T0809]` → `Mentioned` | CORRECT | The technique name is a conceptual reference from MITRE ATT&CK and not actionable as a unique identifier. |
| 63 | `Device Restart/Shutdown [T0816]` → `Mentioned` | CORRECT | The technique name is a conceptual reference from MITRE ATT&CK and not actionable as a unique identifier. |
| 64 | `Modify Parameter [T0836]` → `Mentioned` | CORRECT | The technique name is a conceptual reference from MITRE ATT&CK and not actionable as a unique identifier. |
| 65 | `Unauthorized Command Message [T0855]` → `Mentioned` | CORRECT | The technique name is a conceptual reference from MITRE ATT&CK and not actionable as a unique identifier. |
| 66 | `Denial of Control [T0813]` → `Mentioned` | CORRECT | The technique name is a conceptual reference from MITRE ATT&CK and not actionable as a unique identifier. |
| 67 | `Denial of View [T0815]` → `Mentioned` | CORRECT | The technique name is a conceptual reference from MITRE ATT&CK and not actionable as a unique identifier. |
| 68 | `Loss of Availability [T0826]` → `Mentioned` | CORRECT | The technique name is a conceptual reference from MITRE ATT&CK and not actionable as a unique identifier. |
| 69 | `Loss of Control [T0827]` → `Mentioned` | CORRECT | The technique name is a conceptual reference from MITRE ATT&CK and not actionable as a unique identifier. |
| 70 | `Loss of Productivity and Revenue [T0828]` → `Mentioned` | CORRECT | The technique name is a conceptual reference from MITRE ATT&CK and not actionable as a unique identifier. |
| 71 | `Manipulation of Control [T0831]` → `Mentioned` | CORRECT | The technique name is a conceptual reference from MITRE ATT&CK and not actionable as a unique identifier. |
| 72 | `Theft of Operational Information [T0882]` → `Mentioned` | CORRECT | The technique name is a conceptual reference from MITRE ATT&CK and not actionable as a unique identifier. |
| 73 | `Remote Services [T0886]` → `Mentioned` | CORRECT | The technique name is a conceptual reference from MITRE ATT&CK and not actionable as a unique identifier. |
| 74 | `Change Operating Mode [T0858]` → `Mentioned` | CORRECT | The technique name is a conceptual reference from MITRE ATT&CK and not actionable as a unique identifier. |
| 75 | `Modify Controller Tasking [T0821]` → `Mentioned` | CORRECT | The technique name is a conceptual reference from MITRE ATT&CK and not actionable as a unique identifier. |
| 76 | `Native API [T0834]` → `Mentioned` | CORRECT | The technique name is a conceptual reference from MITRE ATT&CK and not actionable as a unique identifier. |
| 77 | `Network Sniffing [T0842]` → `Mentioned` | CORRECT | The technique name is a conceptual reference from MITRE ATT&CK and not actionable as a unique identifier. |
| 78 | `Lateral Tool Transfer [T0867]` → `Mentioned` | CORRECT | The technique name is a conceptual reference from MITRE ATT&CK and not actionable as a unique identifier. |
| 79 | `Detect Operating Mode [T0868]` → `Mentioned` | CORRECT | The technique name is a conceptual reference from MITRE ATT&CK and not actionable as a unique identifier. |
| 80 | `Service Stop [T0881]` → `Mentioned` | CORRECT | The technique name is a conceptual reference from MITRE ATT&CK and not actionable as a unique identifier. |
| 81 | `Damage to Property [T0879]` → `Mentioned` | CORRECT | The technique name is a conceptual reference from MITRE ATT&CK and not actionable as a unique identifier. |
| 82 | `Loss of Safety [T0837]` → `Mentioned` | CORRECT | The technique name is a conceptual reference from MITRE ATT&CK and not actionable as a unique identifier. |
| 83 | `Point & Tag Identification [T0861]` → `Mentioned` | CORRECT | The technique name is a conceptual reference from MITRE ATT&CK and not actionable as a unique identifier. |
| 84 | `Manipulation of View [T0832]` → `Mentioned` | CORRECT | The technique name is a conceptual reference from MITRE ATT&CK and not actionable as a unique identifier. |

| 85 | "SayCISA@cisa.dhs.gov" → "Actionable" | CORRECT | The email address is a complete, unique identifier that is directly actionable. |
| 86 | "1-844-Say-CISA" → "Actionable" | CORRECT | The vanity phone number is a complete identifier and actionable as-is. |
| 87 | "1-844-729-2472" → "Actionable" | CORRECT | The numeric phone number is a complete, searchable identifier making it actionable. |
| 88 | "(855) 292-3937" → "Actionable" | CORRECT | The provided phone number is a complete identifier that can be directly used for detection. |
| 89 | "CyWatch@fbi.gov" → "Actionable" | CORRECT | The email address is a complete unique identifier, making it actionable. |
| 90 | "410-854-4200" → "Actionable" | CORRECT | The phone number is complete and directly actionable. |
| 91 | "Cybersecurity_Requests@nsa.gov" → "Actionable" | CORRECT | The email address is complete and directly usable for detection purposes.

| 92 | `CISA.gov` → `Actionable` | CORRECT | Domain names are complete and unambiguous identifiers that can be directly matched in detection rules. |
| 93 | `DHS.gov` → `Actionable` | CORRECT | As a full domain name, it qualifies as a complete identifier suitable for automated detection. |
| 94 | `USA.gov` → `Actionable` | CORRECT | Being a complete and unique domain, it is actionable and aligns with the criteria for automated matching. |

md file name: /content/validation/incontroller-state-sponsored-ics-tool.md

| 1 | INCONTROLLER → Described | CORRECT | The tool’s name is provided as a unique reference but isn’t a directly automated detection artifact. |
| 2 | PIPEDREAM → Described | CORRECT | As an alias of the tool, the name is sufficiently specific for description but not for direct automated matching. |
| 3 | TRITON → Described | CORRECT | The reference to a known ICS tool is appropriately descriptive, serving as a contextual indicator rather than a direct, actionable artifact. |
| 4 | AA22-103A → Mentioned | INCORRECT — should be "Described" because the alert identifier is a specific, concrete reference that can be enriched even though it isn’t directly used in automated detection. | The CISA alert identifier provides enough specificity to be useful for lookup. |
| 5 | (table content) → Described | CORRECT | The complete table capture listing tool components is detailed descriptive content not meant for direct automated matching. |

| 6 | `INCONTROLLER` → `Actionable` | CORRECT | The unique malware/tool name can be directly matched for detection. |
| 7 | `OPC UA` → `Mentioned` | CORRECT | As a well‐known ICS protocol, it is a generic reference rather than a unique indicator. |
| 8 | `Modbus` → `Mentioned` | CORRECT | "Modbus" is a common protocol name and is appropriately generic. |
| 9 | `Codesys` → `Mentioned` | CORRECT | The product name is generic and not unique enough to serve as a direct detection indicator. |
| 10 | `EcoStruxure Machine Expert` → `Described` | CORRECT | This specific software product name requires additional context for automated detection. |
| 11 | `SoMachine` → `Described` | CORRECT | The observable is a software product name that, without further specifics, is better described than directly actionable. |
| 12 | `Omron FINS` → `Mentioned` | CORRECT | It refers to a protocol used in ICS networks, making it a generic, conceptual reference. |
| 13 | `OPC servers` → `Mentioned` | CORRECT | The term generically references servers implementing the OPC protocol, lacking unique identifying detail. |
| 14 | `Schneider Electric Modicon M251` → `Actionable` | CORRECT | The complete PLC model identifier is specific and directly matchable in detection systems. |
| 15 | `Schneider Electric Modicon M258` → `Actionable` | CORRECT | This is a distinct, complete product identifier that can be used in rule-based detections. |
| 16 | `Schneider Electric Modicon M221 Nano PLCs` → `Actionable` | CORRECT | The full product name uniquely identifies the PLC series and is suitable for direct matching. |
| 17 | `Omron NX1P2` → `Actionable` | CORRECT | The model designation is complete and specific, making it directly actionable. |
| 18 | `NJ501 PLCs` → `Actionable` | CORRECT | The observable specifies a distinct PLC series that can be reliably used in detections. |
| 19 | `R88D-1SN10F-ECT servo drive` → `Actionable` | CORRECT | The detailed servo drive model provides a unique identifier suitable for automated detection. |
| 20 | `TRITON` → `Actionable` | CORRECT | As a distinct malware name targeting ICS, it can be directly used to build detection signatures. |

| 21 | TAGRUN → Actionable | CORRECT | The tool name is specific and unique enough to be directly matched in logs. |
| 22 | OPC UA server → Mentioned | CORRECT | It refers generically to a type of server and is not a unique, searchable indicator. |

| 23 | CODECALL → Actionable | CORRECT | "CODECALL" is a unique tool name that can be matched directly in logs. |
| 24 | Modbus protocol → Mentioned | CORRECT | The Modbus protocol is a generic, well‐known standard and thus only conceptually referenced. |
| 25 | Schneider Electric's Modicon M251 (TM251MESE) PLC → Described | CORRECT | The observable gives a detailed device model but requires enrichment to be used in detection. |
| 26 | Codesys → Described | CORRECT | "Codesys" is a common industrial control software name and is ambiguous for direct automated detection. |
| 27 | EcoStruxure Machine Expert protocol → Actionable | CORRECT | This proprietary protocol name is specific enough to build an exact-match detection rule. |
| 28 | Schneider Electric's Modicon M221 Nano PLC → Described | CORRECT | The device model is clearly identified yet needs contextual analysis before direct action. |
| 29 | Modicon M258 PLC → Described | CORRECT | As a specific PLC model reference, it is detailed but not uniquely actionable on its own. |

| 30 | OMSHELL → Described | INCORRECT — should be "Actionable" because the tool name is a complete, unique identifier that can be directly matched in detection. | Complete identifier rule applies. |
| 31 | Omron PLCs → Mentioned | CORRECT | It’s a generic reference to a family of devices rather than a specific, unique identifier. |
| 32 | Omron NX1P2 → Actionable | CORRECT | The model name is a specific, complete identifier that can drive automated detection. |
| 33 | NJ501 → Actionable | CORRECT | It is a precise model identifier suitable for direct matching in detection rules. |
| 34 | R88D-1SN10F-ECT servo drive → Actionable | CORRECT | The detailed product model is a complete indicator that can be precisely matched. |
| 35 | NJ/NX product lines → Mentioned | CORRECT | The observable refers generically to product families and isn’t sufficiently specific. |
| 36 | HTTP → Mentioned | CORRECT | As a standard, ubiquitous protocol, it is too generic to be directly actionable. |
| 37 | FINS over UDP → Described | INCORRECT — should be "Actionable" because it is a complete, unique protocol identifier that can be directly matched in network traffic. | It meets the complete identifier heuristic for actionable indicators. |
| 38 | telnet daemon → Mentioned | CORRECT | It generically describes a service without a unique, concrete identifier. |
| 39 | INCONTROLLER → Described | CORRECT | Its potential for modification by attackers reduces its reliability for direct automated detection. |

| 40 | `CVE-2020-15368` → `Actionable` | INCORRECT — should be "Described" because vulnerability identifiers (like CVEs) are reference labels not directly tied to telemetry for detection. | Though unique, a CVE isn’t an artifact you’d directly search for in logs. |
| 41 | `AsrDrv103.sys` → `Actionable` | CORRECT | This is a complete file name that can be exactly matched in endpoint logs. |
| 42 | `ICECORE` → `Described` | CORRECT | As a tool name for a backdoor, it requires contextual enrichment before it can drive automated detection. |
| 43 | `TAGRUN` → `Described` | CORRECT | The enumeration tool name is descriptive and not specific enough to be a directly searchable indicator. |
| 44 | `INCONTROLLER` → `Described` | INCORRECT — should be "Mentioned" because attack campaign names are conceptual references that cannot be directly turned into concrete detection rules. | Campaign names serve as contextual labels rather than unique, actionable telemetry artifacts. |

| 45 | `INCONTROLLER` → `Actionable` | INCORRECT — should be "Described" because malware family names are attribution labels that require additional context rather than being unique technical indicators for automated matching. | Malware family names (like INCONTROLLER) are descriptive and not sufficiently specific to drive low false‑positive detection rules. |
| 46 | `PEACEPIPE` → `Actionable` | INCORRECT — should be "Described" because this observable is a malware family name that doesn’t serve as a direct, unique signature for detection. | As a malware family label, PEACEPIPE is used for categorization and requires further enrichment to become actionable. |
| 47 | `BlackEnergy2` → `Actionable` | INCORRECT — should be "Described" because, although it appears complete, a malware family name is a descriptive indicator rather than a low false‑positive technical artifact. | Malware family names like BlackEnergy2 are meant for attribution and need contextual backing for actionable detection. |
| 48 | `INDUSTROYER` → `Actionable` | INCORRECT — should be "Described" because the name is an attribution label that isn’t inherently unique enough for precise automated detection. | INDUSTROYER, as a malware family designation, is descriptive and relies on additional context to be used in detection rules. |
| 49 | `TRITON` → `Actionable` | INCORRECT — should be "Described" because although the string is complete, it’s a malware family name that can be ambiguous without further context. | TRITON is used as a label for a malware family and isn’t a direct technical artifact suitable for low false‑positive matching. |
| 50 | `VPNFILTER` → `Actionable` | INCORRECT — should be "Described" because malware family names like VPNFILTER serve as descriptive identifiers rather than directly actionable technical indicators. | VPNFILTER is an attribution label that requires extra contextual enrichment and is not inherently unique for automated detection. |

| 51 | OPC UA → Mentioned | CORRECT | The observable is a generic reference to an industrial protocol rather than a uniquely identifiable artifact. |
| 52 | OPC UA ports → Mentioned | CORRECT | Without specific port numbers, it remains a generic mention lacking actionable details. |
| 53 | OPC servers → Mentioned | CORRECT | The term is used conceptually to refer to server types without a concrete, matchable identifier. |
| 54 | OPC clients → Mentioned | CORRECT | It is a generic reference to client systems rather than a specific, actionable artifact. |

| 55 | "Recommended Cybersecurity Best Practices White paper | Schneider Electric" → Mentioned | CORRECT | It’s a reference to a published document rather than a unique, actionable indicator. |
| 56 | "Cybersecurity Guidelines for EcoStruxure Machine Expert, Modicon and PacDrive Controllers and Associated Equipment, User Guide | Schneider Electric" → Mentioned | CORRECT | As a document reference, it lacks the specificity required for automated detection. |
| 57 | "intrusion detection systems" → Mentioned | CORRECT | The term is a generic reference to a technology category, not a specific detection indicator. |
| 58 | "network firewalls" → Mentioned | CORRECT | It’s a broad, conceptual reference to security devices rather than a unique identifier. |
| 59 | "secure remote access" → Mentioned | CORRECT | This generic term does not provide a unique, actionable indicator for detection. |
| 60 | "device authentication" → Mentioned | CORRECT | It describes a common security mechanism without a specific, searchable element. |
| 61 | "device firewall" → Mentioned | CORRECT | The phrase is generic and non‑unique, fitting the “Mentioned” classification. |
| 62 | "disabling/filtering unsecure or programming protocols" → Mentioned | CORRECT | This is a descriptive, non‑specific reference that isn’t directly actionable. |
| 63 | "FIN ports" → Described | CORRECT | Although it hints at a technical detail in a vulnerability context, the term is ambiguous and requires enrichment before detection. |
| 64 | "OMSHELL" → Actionable | CORRECT | It is a unique component name that can be directly used in detection rules. |
| 65 | "INCONTROLLER" → Actionable | CORRECT | This specific identifier is complete and directly actionable for threat detection. |

| 66 | OPC UA endpoints → Described | CORRECT | It generically references a type of endpoint rather than a concrete, unique artifact. |
| 67 | OPC UA logs → Described | CORRECT | It refers to a general log type without a specific actionable identifier. |
| 68 | OPC UA audit records → Described | CORRECT | It describes a class of audit records, lacking a unique, directly actionable identifier. |
| 69 | OPC UA applications → Described | CORRECT | It broadly indicates applications using OPC UA rather than a specific artifact or string. |
| 70 | TAGRUN ping command execution → Described | CORRECT | It represents a category of command execution events rather than a unique command string. |
| 71 | pingsweep activity → Described | CORRECT | It describes a general scanning behavior that is non‐unique and requires further context for detection. |

| 72 | Credential bruteforcing → Mentioned | CORRECT | It’s a generic conceptual indicator with insufficient specificity for direct detection. |
| 73 | Error codes associated with abnormal device crashes/reboots → Mentioned | CORRECT | The description is generic without specific error codes, making it non‑actionable. |
| 74 | Files uploaded or downloaded → Mentioned | CORRECT | It describes a general file transfer activity rather than a unique, actionable string. |
| 75 | File deletion → Mentioned | CORRECT | The term is a broad reference to an event type and lacks actionable detail. |
| 76 | Unauthorized changes in device configuration and execution of commands → Mentioned | CORRECT | It’s a high‑level description of anomalous events that isn’t specific enough for detection. |
| 77 | Connections to devices outside of documented norms for the device and environment → Mentioned | CORRECT | The indicator is conceptual and lacks concrete, unique identifiers for automated detection. |
| 78 | ARP scanning → Mentioned | CORRECT | It generically refers to scanning activity without a unique signature, making it non‑actionable. |
| 79 | Abnormal Modbus/Codesys traffic differing from environment baselines → Mentioned | CORRECT | The phrase is a descriptive observation rather than a specific, matchable indicator. |
| 80 | Abnormal Modbus and Codesys traffic flows compared to environment baselines → Mentioned | CORRECT | It provides a general description of anomalous network behavior without actionable specifics. |

| 81 | OMSHELL → Actionable | CORRECT | It is a distinct tool name that can be directly matched in logs. |
| 82 | Telnet daemon → Described | CORRECT | It’s a generic service name that doesn’t provide a unique, matchable indicator. |
| 83 | Unauthorized Telnet connection attempts → Described | CORRECT | It describes a pattern of behavior that requires additional context for automated detection. |
| 84 | Files uploaded or downloaded → Mentioned | CORRECT | It is a generic reference to file transfer events without specific identifiers. |
| 85 | pingsweep scanning activity → Mentioned | CORRECT | It’s a conceptual description of scanning behavior that isn’t uniquely matchable. |
| 86 | telnet traffic → Mentioned | CORRECT | It refers to a broad protocol category rather than a specific, actionable string. |
| 87 | HTTP traffic → Mentioned | CORRECT | It is a general description of network traffic lacking the specificity for direct detection. |
| 88 | Omron FINS → Actionable | CORRECT | It clearly identifies a specific ICS protocol indicator that can be directly monitored. |
| 89 | Omron API commands → Actionable | INCORRECT — should be "Described" because it is a conceptual category requiring additional details for actionable detection | It describes a set of commands rather than providing a specific, unique indicator string. |

| 90 | `T0807: Command-Line Interface` → `Mentioned` | CORRECT | MITRE ATT&CK technique reference is conceptual and not directly actionable. |
| 91 | `T0853: Scripting` → `Mentioned` | CORRECT | MITRE ATT&CK technique reference is conceptual and not directly actionable. |
| 92 | `T0859: Valid Accounts` → `Mentioned` | CORRECT | MITRE ATT&CK technique reference is conceptual and not directly actionable. |
| 93 | `T0846: Remote System Discovery` → `Mentioned` | CORRECT | MITRE ATT&CK technique reference is conceptual and not directly actionable. |
| 94 | `T0801: Monitor Process State` → `Mentioned` | CORRECT | MITRE ATT&CK technique reference is conceptual and not directly actionable. |
| 95 | `T0861: Point & Tag Identification` → `Mentioned` | CORRECT | MITRE ATT&CK technique reference is conceptual and not directly actionable. |
| 96 | `T0885: Commonly Used Port` → `Mentioned` | CORRECT | MITRE ATT&CK technique reference is conceptual and not directly actionable. |
| 97 | `T0869: Standard Application Layer Protocol` → `Mentioned` | CORRECT | MITRE ATT&CK technique reference is conceptual and not directly actionable. |
| 98 | `T0832: Manipulation of View` → `Mentioned` | CORRECT | MITRE ATT&CK technique reference is conceptual and not directly actionable. |
| 99 | `T0882: Theft of Operational Information` → `Mentioned` | CORRECT | MITRE ATT&CK technique reference is conceptual and not directly actionable. |
| 100 | `T0807: Command-Line` → `Mentioned` | CORRECT | MITRE ATT&CK technique reference is conceptual and not directly actionable. |

| 101 | "CODECALL" → Actionable | CORRECT | It is a unique tool identifier that can be matched directly in EDR logs. |
| 102 | "T0853: Scripting" → Mentioned | CORRECT | MITRE ATT&CK technique references are conceptual and not directly actionable. |
| 103 | "T0859: Valid Accounts" → Mentioned | CORRECT | MITRE ATT&CK technique references are conceptual and not directly actionable. |
| 104 | "T0857: System Firmware" → Mentioned | CORRECT | MITRE ATT&CK technique references are conceptual and not directly actionable. |
| 105 | "T0889: Modify Program" → Mentioned | CORRECT | MITRE ATT&CK technique references are conceptual and not directly actionable. |
| 106 | "T0846: Remote System Discovery" → Mentioned | CORRECT | MITRE ATT&CK technique references are conceptual and not directly actionable. |
| 107 | "T0888: Remote System Information Discovery" → Mentioned | CORRECT | MITRE ATT&CK technique references are conceptual and not directly actionable. |
| 108 | "T0812: Default Credentials" → Mentioned | CORRECT | MITRE ATT&CK technique references are conceptual and not directly actionable. |
| 109 | "T0843: Program Download" → Mentioned | CORRECT | MITRE ATT&CK technique references are conceptual and not directly actionable. |
| 110 | "T0801: Monitor Process State" → Mentioned | CORRECT | MITRE ATT&CK technique references are conceptual and not directly actionable. |
| 111 | "T0845: Program Upload" → Mentioned | CORRECT | MITRE ATT&CK technique references are conceptual and not directly actionable. |

| 112 | CODECALL → Mentioned | CORRECT | The value is a generic tool or function name that does not provide a unique, actionable detection string. |
| 113 | Command<br>and<br>Control → Mentioned | CORRECT | The phrase is a common conceptual term for C2, lacking the specificity needed for actionable detection. |
| 114 | T0885:<br>Commonly<br>Used Port → Mentioned | CORRECT | As a MITRE technique reference with descriptive text, it remains conceptual rather than a unique indicator. |
| 115 | T0869:<br>Standard<br>Application<br>Layer Protocol → Mentioned | CORRECT | It is a descriptive MITRE technique reference, making it a conceptual, non-actionable observable. |
| 116 | OMSHELL → Mentioned | CORRECT | The name is simply a tool identifier without unique, searchable artifacts, fitting the "Mentioned" rank. |
| 117 | Inhibit<br>Response<br>Function → Mentioned | CORRECT | It describes a generic operational function rather than a concrete, actionable value. |
| 118 | T0881: Service<br>Stop → Mentioned | CORRECT | The observable is a MITRE technique label that is inherently conceptual and not a distinct detection signature. |
| 119 | lmpair<br>Process<br>Control → Mentioned | CORRECT | This term represents an operational process concept and does not contain a unique identifier for detection. |
| 120 | T0836: Modify<br>Parameter → Mentioned | CORRECT | The value is a MITRE technique reference presented conceptually, so "Mentioned" is appropriate. |
| 121 | Impair<br>Process<br>Control → Mentioned | CORRECT | It describes an operational function in a conceptual manner, not intended as a directly searchable artifact. |
| 122 | T0855:<br>Unauthorized<br>Command<br>Message → Mentioned | CORRECT | As a descriptive MITRE technique reference with no unique detection signature, "Mentioned" is suitable. |
| 123 | Impact → Mentioned | CORRECT | The observable is a generic impact descriptor and lacks the specificity needed for direct actionable detection. |
| 124 | T0879: Damage<br>to Property → Mentioned | CORRECT | This MITRE technique reference is conceptual and does not yield a unique actionable indicator. |
| 125 | T0837: Loss of<br>Safety → Mentioned | CORRECT | Being a conceptual MITRE technique label, it does not provide a concrete detection artifact. |
| 126 | T0831:<br>Manipulation of<br>Control → Mentioned | CORRECT | The observable is a descriptive MITRE technique reference, fitting the conceptual "Mentioned" category. |
| 127 | T0882: Theft of<br>Operational → Mentioned | CORRECT | It is a descriptive MITRE technique reference presented conceptually, and thus not directly actionable. |

| 128 | rule MTI_Hunting_AsRockDriver_Exploit_PDB… → Actionable | CORRECT | As a truncated YARA rule provided as a detection signature, it can be used directly for matching. |
| 129 | rule MTI_Hunting_AsRockDriver_Exploit_Generic… → Actionable | CORRECT | Despite being truncated, this YARA rule is a ready-to-use detection signature, making it actionable. |

| 130 | Windows Remote Desktop Protocol → Mentioned | CORRECT | The observable is merely a generic reference to a protocol and does not provide unique or complete indicators for automated detection. |

| 131 | CVE-2025-22457 → Actionable | CORRECT | It is a complete and unique CVE identifier that can be matched directly. |

md file name: /content/validation/asia-16-Spenneberg-PLC-Blaster-A-Worm-Living-Solely-In-The-PLC-wp.md

| 1 | PLC-Blaster → Mentioned | CORRECT | The worm’s name is provided for context and isn’t a concrete, unique indicator that could be directly matched in detection. |
| 2 | Siemens SIMATIC S7-1200 → Mentioned | CORRECT | The PLC model is mentioned in context and does not offer a unique, actionable artifact for automated detection. |

| 3 | "Siemens SIMATIC S7-1200v3" → Actionable | CORRECT | The observable is a complete, specific product model string that can be directly matched in asset data. |
| 4 | "Structured Text (ST)" → Mentioned | CORRECT | The observable is a generic programming language reference that isn’t actionable for automated detection. |
| 5 | "Microsoft Windows operating system" → Mentioned | CORRECT | The observable is a generic OS reference and cannot be uniquely detected. |
| 6 | "Programmable logic controllers" → Mentioned | CORRECT | The observable is a generic description of a device type and is not directly actionable. |

| 7 | `PLC` → `Mentioned` | CORRECT | It’s a generic reference and only conceptually indicates a PLC rather than a unique, actionable identifier. |
| 8 | `SIMATIC S7-300` → `Actionable` | CORRECT | The value uniquely identifies a specific Siemens PLC model, making it directly actionable for detection or matching. |
| 9 | `S7-1200v3` → `Actionable` | CORRECT | It represents a concrete product identifier for a specific Siemens PLC model, enabling direct detection. |

| 10 | Siemens SIMATIC S7-1200 → Actionable | CORRECT | It’s a unique, complete product model identifier that can be directly matched. |
| 11 | Organisation block (OB) → Mentioned | CORRECT | It’s a generic term for a key PLC program component lacking the uniqueness required for automated detection. |
| 12 | Data block (DB) → Mentioned | CORRECT | It refers generically to a memory block in Siemens PLCs and isn’t a unique indicator. |
| 13 | Function (FC) → Mentioned | CORRECT | It’s a generic reference to a reusable PLC function, not a uniquely actionable string. |
| 14 | Function block (FB) → Mentioned | CORRECT | It’s a standard term for a PLC component with persistent memory and isn’t specific enough for direct detection. |
| 15 | TCON → Mentioned | CORRECT | It’s a standard, generic system POU for initiating TCP connections in Siemens PLCs. |
| 16 | TDISCON → Mentioned | CORRECT | It’s a common term for a system POU used to terminate TCP connections, lacking unique matching characteristics. |
| 17 | TRCV → Mentioned | CORRECT | It’s a generic function name for receiving data buffers in Siemens PLCs and not uniquely actionable. |
| 18 | TSEND → Mentioned | CORRECT | It’s a standard, generic system function for sending TCP buffers, making it non‑unique for detection. |

| 19 | `S7 1200` → `Actionable` | INCORRECT — should be "Described" because a PLC model identifier like "S7 1200" is generic and requires contextual enrichment rather than serving as a unique, directly matchable indicator. | The observable, while specific to an ICS device type, lacks the uniqueness needed for direct automated detection rules.  |

| 20 | PLC → Mentioned | CORRECT | "PLC" is a generic reference to a programmable logic controller, lacking the specificity needed for direct automated detection. |
| 21 | global variable → Mentioned | CORRECT | "global variable" is too generic and ambiguous to be actionable. |
| 22 | state machine → Mentioned | CORRECT | The term "state machine" refers to a conceptual design element and isn’t uniquely identifiable. |
| 23 | user program → Mentioned | CORRECT | "user program" is used in a generic sense and cannot be directly matched for automated detection. |

| 24 | `102/tcp` → `Actionable` | CORRECT | “102/tcp” is a complete, specific indicator (TCP port 102) that can be directly matched in firewall or network detection rules. |
| 25 | `Siemens SIMATIC PLCs` → `Mentioned` | CORRECT | The observable is a generic reference to a class of devices and isn’t unique enough for automated detection. |
| 26 | `S7-1200` → `Mentioned` | CORRECT | “S7-1200” is a model reference for Siemens PLCs and is too generic to be used as a unique, actionable indicator. |
| 27 | `POU TCON` → `Described` | CORRECT | As a PLC function block name, “POU TCON” is a specific label but remains ambiguous without further context for automated detection. |
| 28 | `POU TDISCON` → `Described` | CORRECT | Similar to “POU TCON”, this function block name is informative but not uniquely identifying for direct, automated detection. |
| 29 | `ı  IF "data".con_state = 10 THEN ...` → `Actionable` | CORRECT | The full PLC code snippet is complete and uniquely identifiable, making it actionable for rule-based detection. |
| 30 | `Figure 3. Target Detection using SCL` → `Mentioned` | CORRECT | This figure caption is merely descriptive and cannot be used directly as a detection indicator. |
| 31 | `ı  IF "data".con_state = 0  THEN ...` → `Actionable` | CORRECT | The provided PLC code snippet is a complete block that is unique enough to be used for automated detection. |

| 32 | `### Figure 4. Target detection in SCL` → `Mentioned` | CORRECT | The observable is a descriptive figure caption without technical details, making it non-actionable. |

| 33 | Siemens TIA-Portal → Mentioned | CORRECT | It's a product name that is referenced conceptually without a unique or complete identifier for direct matching. |
| 34 | proprietary Siemens protocol → Mentioned | CORRECT | It’s a generic descriptive phrase for a protocol, lacking specific details for actionable detection. |
| 35 | Wireshark plugin of Thomas Wiens → Mentioned | CORRECT | It’s a conceptual reference to a tool rather than a concrete, uniquely matchable indicator. |

| 36 | S7CommPlus → Actionable | CORRECT | "S7CommPlus" is a specific, unique protocol name that can be reliably matched in network traffic. |
| 37 | TPKT → Mentioned | CORRECT | "TPKT" is a generic, standard transport protocol name and is too common for unique, automated detection. |
| 38 | ISO8073 → Mentioned | CORRECT | As an ISO standard protocol, "ISO8073" is referenced conceptually rather than serving as a unique identifier. |
| 39 | 102/tcp → Actionable | CORRECT | "102/tcp" is a precise port designation that can be directly used in detection rules. |

| 40 | 0x72 → Actionable | CORRECT | It’s a complete, exact magic byte value that can be matched directly in detection rules. |
| 41 | (complete hex dump of an S7CommPlus message) → Actionable | INCORRECT — should be "Described" because the multi‐line, formatted hex dump is a sample message structure that requires normalization before it can be used for direct automated detection. |

| 42 | 0xA3 → Actionable | CORRECT | The observable is a complete, exact hex byte that can be directly matched in detection rules.  |

| 43 | `#### Figure 7. Encoding of numbers` → `Mentioned` | CORRECT | This is a figure caption that serves as a descriptive caption, not an actionable technical artifact. |

| 44 | `\nantireplaybyte = challenge + 0x80\n03 00 00 89 02 £0 80 72  01 00 7a 32 00 00 04 ca .............................................................................................................................\n00 00 00 02 36 11 02 87  \n                                      87 3d a1 00 00 01 20 ....6... ".=....\n                                  22\n82 1f 00 00 a3 81 69 00  15 00 a3 82 32 00 17 00                                                                                                                               \n       3a 82\n                3b 00 04 82\n                                           3c 00 04 81 40 82 ..:.;... ..<...@.\n00 01\n                                  00 82 \n   00\n                80\n                    c0 40 82\n                                   3e 00 04 84 80 c0 40 82 =......e. >......e.\n3d\n       04\n            84\n3f\n    00 15\n            1b 31\n                    3b 36 45\n                                  53 37 20 32 31 32 2d 31 ?...1;6E S7 212-1\n   45 33 31 2d 30 58 42\n42\n                                   30 20 3b 56 33 2e 30 82 BE31-0XB 0 ;V3.0.\n40 00 15 05 32 3b 35 34 -\n                                  34 82 41 00 03 00 03 00 @...2;54 4.A.....\na2 00 00 00 00 72 01 00\n                                   00\n                                Challenge, Attribute block\n` → `Actionable` | CORRECT | The observable is enclosed in a code fence and is a complete, unique hex dump that can be directly matched for detection. |

| 45 | `|  |  |  |                                      |  |  |  |  | 03 00 00 8c 02 f0 80 72  02 00 7d 31 00 00 05 42 r }1B             |  |\n|--|--|--|--------------------------------------|--|--|--|--|--------------------------------------------------------------------|--|\n|  |  |  |                                      |  |  |  |  | 00 00 00 03 00 00 03 02  34 00 00 03 00 01 82   4                  |  |\n|  |  |  |                                      |  |  |  |  | 32 01 00 17 00 00 01 3a  82 3b 00 04 82 00 82 3c 2: .;<            |  |\n|  |  |  |                                      |  |  |  |  | 00 04 81 40 82 3d 00 04 00 82 3e 00 04 84 80 c0 e.= >              |  |\n|  |  |  |                                      |  |  |  |  | 40 82 3f 00 15 00 82 40  00 15 1a 31 3b 36 45 53 0.?@ 1:6ES        |  |\n|  |  |  |                                      |  |  |  |  | 37 20 32 31 32 2d 31 42  45 33 31 2d 30 58 42 30 7 212-1B E31-0XB0 |  |\n|  |  |  |                                      |  |  |  |  | 3b 56 33 2e 30 82 41 00  03 00 00 00 00 00 04 ;V3.0.A.             |  |\n|  |  |  |                                      |  |  |  |  | e8 89 69 00 12 00 00 00  00 89 6a 00 13 00 89 6b i jk              |  |\n|  |  |  | 00 04 00 00 00 00 00 00  72 02 00 00 |  |  |  |  |                                                                    |  |\n|  |  |  |                                      |  |  |  |  |                                                                    |  |\n\nAnti replay byte , Attribute block\n\nFigure 9. Anti replay Mechanism` → `Actionable` | CORRECT | The observable is a complete, uniquely captured table from network traffic that can be directly matched for detection. |

| 46 | "|  |                      |  |  |  |  |  |  | 03 00 04 00 02 f0 00 72  02 05 a9 31 00 00 04 ca r 1    |  | ... Figure 10. Transferring the user program" → Actionable | CORRECT | This complete hex dump provides a unique, matchable artifact typical of a PLC transfer message. |
| 47 | "TIA portal" → Mentioned | CORRECT | As a generic software/tool name, it is descriptive but not actionable for detection rules. |
| 48 | "S7" → Mentioned | CORRECT | "S7" is a generic PLC series designation, lacking the uniqueness necessary for automated detection. |

| 49 | PLC → Mentioned | CORRECT | It is a generic reference to a Programmable Logic Controller without a unique identifier. |
| 50 | static DB POU → Described | CORRECT | It provides descriptive detail of a PLC data block but lacks the specificity needed for direct automated detection. |
| 51 | TIA portal → Mentioned | CORRECT | It is a generic reference to a software tool rather than a concrete, actionable indicator. |

| 52 | worm → Mentioned | CORRECT | The term “worm” is generic and not unique enough to serve as an actionable indicator. |
| 53 | transferred code → Mentioned | CORRECT | “Transferred code” is a vague, descriptive phrase that cannot be uniquely matched for detection. |
| 54 | user program → Mentioned | CORRECT | “User program” is a generic reference to the legitimate PLC software, offering no unique actionable detail. |
| 55 | target PLC → Mentioned | CORRECT | “Target PLC” generically describes the compromised device without providing a unique identifier. |
| 56 | OB → Mentioned | CORRECT | “OB” is a standard abbreviation for Organizational Block and is not sufficiently unique for detection. |
| 57 | DBs → Mentioned | CORRECT | “DBs” generically refers to PLC Data Blocks and does not constitute a uniquely actionable indicator. |

| 58 | `command & control server` → `Mentioned` | CORRECT | The term is generic and does not provide a unique, actionable indicator for detection. |

| 59 | Socks4 proxy → Described | CORRECT | The observable describes a capability without concrete identifiers, matching the 'Described' criteria. |
| 60 | C&C server → Mentioned | CORRECT | It is generically referenced without actionable details, fitting the 'Mentioned' rank. |
| 61 | PLC → Mentioned | CORRECT | The term is a generic reference to a device type, lacking unique, actionable identifiers. |

| 62 | PLC → Mentioned | CORRECT | The term is generic and conceptual, so it isn’t directly actionable. |
| 63 | POU POKE → Described | CORRECT | Although it names a specific PLC command, its use is contextual and not uniquely identifiable for automated detection. |
| 64 | process image → Mentioned | CORRECT | It is a generic concept describing PLC memory layout rather than a unique, actionable indicator. |

| 65 | `TIA portal` → `Mentioned` | CORRECT | It’s a generic product name reference rather than a unique, actionable identifier. |
| 66 | `PLC` → `Mentioned` | CORRECT | “PLC” is used generically to refer to industrial control hardware, making it non‑actionable. |
| 67 | `POUs` → `Mentioned` | CORRECT | “POUs” is a generic term for program components in PLCs and isn’t a complete, actionable identifier. |
| 68 | `XML sourcecode` → `Mentioned` | CORRECT | It describes a type of file content without providing a specific or searchable code snippet. |

| 69 | PLC → Mentioned | CORRECT | "PLC" is a generic term for an industrial control system device and cannot be uniquely detected. |
| 70 | original user program → Described | CORRECT | "original user program" is a generic reference without concrete identifiers, making it ambiguous and non-actionable. |

| 71 | PLC → Mentioned | CORRECT | "PLC" is a generic reference to a device type, making it non-specific and suitable for the Mentioned rank. |

| 72 | TIA portal → Mentioned | CORRECT | It’s a generic reference to a software tool rather than a unique, concrete indicator. |
| 73 | factory reset → Mentioned | CORRECT | It’s a generic command phrase that isn’t unique enough to drive automated detection. |
| 74 | PLC → Mentioned | CORRECT | It’s merely a generic reference to a type of device, not a specific, actionable indicator. |

| 75 | OB9999 → Actionable | CORRECT | The identifier is a complete, unique code from PLC ladder logic that can be directly matched for detection. |

| 76 | 150ms → Described | CORRECT | "150ms" is a descriptive measurement value rather than a unique, directly detectable indicator. |
| 77 | 0 ms → Described | CORRECT | "0 ms" is a measured parameter that serves as descriptive, non-actionable metadata. |
| 78 | 7ms → Described | CORRECT | "7ms" denotes a specific measured value and lacks the uniqueness required for actionable detection. |
| 79 | 4.7% → Described | CORRECT | "4.7%" is a descriptive percentage value that contextualizes a measurement rather than acting as a unique identifier. |
| 80 | PLC → Mentioned | CORRECT | "PLC" is a generic term for a programmable logic controller and is not specific enough for direct detection. |
| 81 | S7 → Mentioned | CORRECT | "S7" generically refers to a series of Siemens PLCs and does not serve as a uniquely actionable indicator. |

| 82 | "38,5KB RAM" → "Described" | CORRECT | This value is a measurement detail indicating memory requirements, not a unique, searchable indicator. |
| 83 | "9,0KB (23,3%)" → "Described" | CORRECT | The observable is a descriptive measurement of memory usage, lacking unique actionable attributes. |
| 84 | "216,6KB flash" → "Described" | CORRECT | It is a specification measurement detail and does not qualify as an exact detection indicator. |
| 85 | "| Model   | RAM         | Flash     | ... " → "Described" | CORRECT | The table is a complete data set providing memory specifications, which is descriptive rather than an actionable indicator. |

| 86 | PLC S7-1200v3 → Actionable | INCORRECT — should be "Described" because product model strings are descriptive attributes and are not unique enough for direct, low false‑positive detection. | Product models require additional context/enrichment rather than serving as standalone actionable indicators. |
| 87 | TIA portal V11 SP2 Update 5 → Actionable | INCORRECT — should be "Described" because software version details are descriptive and not distinct enough for automated detection. | Software/tool version strings do not provide a unique, low false‑positive match for detection rules. |
| 88 | S7-1200 → Actionable | INCORRECT — should be "Described" because the generic product family reference lacks sufficient uniqueness for actionable matching. | Generic product names are ambiguous and typically require further enrichment to be useful in detection. |
| 89 | firmware 3.0.2 → Actionable | INCORRECT — should be "Described" because firmware version numbers are merely descriptive details that need additional context to be actionable. | Version strings are common and not precise enough for low false‑positive automated detection. |

| 90 | H = sha-1(encode_utf-16le(P)) → Actionable | CORRECT | It is a complete code snippet that can be matched exactly, making it actionable. |
| 91 | AES128-CBC → Mentioned | CORRECT | It merely specifies a generic encryption algorithm and mode, which is non‑unique and only conceptually referenced. |

| 92 | "```\n<NetworkContainer>\n<Network Lang=\"SCL\" ProgrammingContext=\"Plain\"\n        Mnemonic=\"International\" RefID=\"1\">\n <EncryptedData Type=\"\n          xmlns=\"\n   <EncryptionMethod\n            Algorithm=\" />\n    <CipherData>\n     <CipherValue>\n          AQIDAQIDAQIDAQIDAQIDAS/acA/s+L3CoQYaeAQMOq ....\n    </CipherValue>\n  </CipherData>\n </EncryptedData>\n```" → Actionable | CORRECT | Wrapped in triple backticks, making it a complete, unique code snippet suitable for direct detection. |
| 93 | "TIA portal" → Mentioned | CORRECT | It references a software tool generically and does not provide a unique, automatable indicator. |
| 94 | "PLC" → Mentioned | CORRECT | The term is generic and used conceptually, lacking a unique identifier for detection. |

| 95 | M = 0x28,0x6f,0x76,0x5c,0x6e,0x3b,0x1e,0x4c, 0xd0,0x8e,0x42,0x31,0x43,0x7b,0x8e,0xbf → Actionable | CORRECT | The observable is a complete hexadecimal constant that can be directly matched. |
| 96 | SSA-8330484 → Mentioned | CORRECT | It is a vendor advisory reference used only conceptually, not for automated detection. |

| 97 | `worm attack` → `Mentioned` | CORRECT | The term is generic and conceptual, providing no concrete detail to build a detection rule. |

| 98 | `ssa-833048.pdf` → `Actionable` | CORRECT | It is a specific, complete file name that can be uniquely matched for detection. |

| 99 | SSA-8330482 → Actionable | INCORRECT — should be "Described" because vulnerability advisory identifiers are informational references that require additional context rather than being directly actionable for detection. | Vulnerability advisory identifiers, unlike hashes or IPs, are not concrete detection indicators and need enrichment to drive automated detection. |

| 100 | worm attack → Mentioned | CORRECT | The term "worm attack" is a generic, conceptual reference to an attack type, which aligns with the "Mentioned" rank.  |

| 101 | S7CommPlus → Actionable | CORRECT | "S7CommPlus" is a unique protocol identifier that can be directly matched in network traffic analysis. |
| 102 | | Function                 | None | Write | Read/Write |
|--------------------------|------|-------|------------|
| Start/Stop CPU           | yes  | no    | no         |
| Write Program            | yes  | no    | no         |
| Read Program             | yes  | yes   | no         |
| Manipulate memory/output | yes  | yes   | yes        |
| Read identification      | yes  | yes   | yes        |
| Setting IP address       | yes  | yes   | yes        |
| Setting date             | yes  | no    | no         |
| Factory reset            | yes  | no    | no         |
|                          |      |       |            | → Described | CORRECT | The table details access permissions descriptively but doesn’t provide a unique, directly actionable indicator. |

| 103 | `challenge response mechanism` → `Mentioned` | CORRECT | The observable is a generic reference lacking specific, actionable details, making "Mentioned" the appropriate rank. |

| 104 | PLC → Mentioned | CORRECT | "PLC" is a generic reference to a programmable logic controller with no unique, actionable indicator. |
| 105 | challenge response authentication → Mentioned | CORRECT | It generically refers to an authentication method and isn’t a concrete, unique indicator for automated detection. |
| 106 | access protection → Mentioned | CORRECT | The term describes a generic security feature rather than a specific, actionable observable. |
| 107 | write protection → Mentioned | CORRECT | "Write protection" is used conceptually to denote a security mechanism, lacking the uniqueness needed for detection. |
| 108 | password → Mentioned | CORRECT | "Password" is a generic credential reference with no specificity to drive targeted detection. |

| 109 | ssa-833048.pdf → Actionable | CORRECT | The file name is specific and unique enough to be directly used in detection rules. |

| 110 | security_response/whitepapers/w32_stuxnet_dossier.pdf → Actionable | CORRECT | The specific file path can be exactly matched, making it a unique and actionable indicator. |
| 111 | us-15-Klick-Internet-Facing-PLCs-A-New-Back-Orifice-wp.pdf → Actionable | CORRECT | The file name is unique and specific enough to be used directly in detection rules. |
| 112 | pressetext.com/news/20081101001 → Actionable | CORRECT | The URL string is complete and precise, allowing for an exact match in observational data. |
| 113 | berkeley.edu/~nweaver/papers/2003-taxonomy.pdf → Actionable | CORRECT | The complete URL provides a unique, directly actionable indicator. |
| 114 | projects/s7commwireshark/files/ → Described | CORRECT | As a relative directory path, it is less specific and may require additional context before it can be used directly for detection. |
| 115 | http://scadastrangelove.blogspot.de/2013/01/s7brut.html → Actionable | CORRECT | The detailed URL is specific and actionable, suitable for direct matching in detection systems. |

md file name: /content/validation/a-brief-history-and-further-technical-analysis-of-sodinokibi-ransomware.md

| 1 | Sodinokibi ransomware → Mentioned | CORRECT | It’s a malware family name referenced conceptually, not a unique, directly actionable indicator. |
| 2 | REvil → Mentioned | CORRECT | As an alias for the ransomware, it remains a generic reference rather than a concrete detection string. |
| 3 | Sodin → Mentioned | CORRECT | The truncated alias is ambiguous and only conceptually referenced, making it non‑actionable. |

| 4 | CVE-2019-2725 → Actionable | CORRECT | The CVE is a complete, unique identifier that can be matched exactly. |
| 5 | Oracle WebLogic Server → Actionable | CORRECT | The product name is specific and appears in service banners, making it directly searchable for detection. |

| 6 | Sodinokibi → Actionable | INCORRECT — should be "Mentioned" because the malware family name is a generic reference that isn’t a unique, concrete detection artifact. | Malware family names like "Sodinokibi" are conceptual indicators and cannot be directly keyed into detection rules. |
| 7 | ransomware → Mentioned | CORRECT | It is a generic term that does not provide a precise, actionable indicator. |
| 8 | WinRAR Italian website → Described | CORRECT | The description is ambiguous and lacks concrete details (exact URL/domain) for automated detection. |
| 9 | WinRAR installation file → Described | CORRECT | The reference describes a file in general terms without sufficient specifics for direct detection. |

| 10 | `Travelex` → `Mentioned` | CORRECT | It is a straightforward organizational name referenced conceptually. |
| 11 | `New York airport's administrative servers` → `Mentioned` | INCORRECT — should be "Described" because it provides a descriptive yet ambiguous asset pattern that requires further enrichment for automated detection. |

| 12 | "Picus" → "Mentioned" | CORRECT | The observable is merely a product/tool name reference without a unique detection artifact. |
| 13 | "MITRE's ATT&CK" → "Mentioned" | CORRECT | The observable refers to a conceptual framework rather than a concrete, actionable indicator. |

| 14 | "ATT&CK T1193" → "Mentioned" | CORRECT | It is a MITRE ATT&CK technique identifier referenced conceptually rather than a unique, directly detectable artifact. |
| 15 | "Sodinokibi" → "Mentioned" | CORRECT | It's a malware family name used for informational reference without unique matching value for automated detection. |
| 16 | "Bewerbungsunterlagen_6704760.doc" → "Actionable" | CORRECT | The file name is highly specific and unique, making it suitable for detection rules. |
| 17 | "fb8b03748b617acf0ee3b138c5b37e74ec396bc73da3362d633862d7283742fd" → "Actionable" | CORRECT | It is a complete SHA-256 hash that can be directly matched in detection tools. |
| 18 | "ATT&CK T1190" → "Mentioned" | CORRECT | It is a MITRE ATT&CK technique identifier used conceptually, not meant for direct automated use. |
| 19 | "CVE-2019-2725" → "Actionable" | CORRECT | The complete CVE identifier is specific enough to be used directly in vulnerability detection. |
| 20 | "Oracle WebLogic Server" → "Mentioned" | CORRECT | It is a generic product name that lacks the uniqueness required for actionable detection. |
| 21 | "ATT&CK T1076" → "Mentioned" | CORRECT | This is a reference to a MITRE ATT&CK technique and is used only as contextual information. |
| 22 | "ATT&CK T1133" → "Mentioned" | CORRECT | It represents an attack technique in the MITRE framework and is not a unique, actionable indicator. |
| 23 | "ATT&CK T1195" → "Mentioned" | CORRECT | It is a conceptual reference to a supply chain compromise technique from MITRE ATT&CK. |
| 24 | "WinRAR" → "Mentioned" | CORRECT | As a common software name, it is too generic to serve as an actionable indicator. |
| 25 | "ATT&CK T1189" → "Mentioned" | CORRECT | It is used as a reference to a drive‑by compromise technique rather than a specific detection artifact. |
| 26 | "ATT&CK T1054" → "Mentioned" | CORRECT | It is a MITRE ATT&CK technique identifier provided for context and does not enable unique automated detection. |

| 27 | C:\Windows\Temp\MicrosoftOfficeWord_upd.v.88735.34.5.exe → Actionable | CORRECT | The file path is fully specified and unique, making it directly matchable for detection. |
| 28 | hxxp://54.39.233.132/de1.trp → Actionable | CORRECT | Despite the obfuscation ('hxxp'), the URL is complete and can be transformed for use in detection rules. |

| 29 | `hxxp://54.39.233.132/de1.trp` → `Actionable` | CORRECT | It is an obfuscated but complete URL that can be directly used for detection. |
| 30 | `54.39.233.132` → `Actionable` | CORRECT | It is a full IPv4 address that is unique and directly matchable. |
| 31 | `C:\Windows\Temp\MicrosoftOfficeWord upd.v.88735.34.5.exe` → `Actionable` | CORRECT | It is a complete file path that uniquely identifies the malicious payload’s location. |
| 32 | `MicrosoftOfficeWord_upd.v.88735.34.5.exe` → `Actionable` | CORRECT | The exact executable file name is specific and can be directly keyed on for detection. |
| 33 | `720fbe60f049848f02ba9b2b91926f80ba65b84f0d831a55f4e634c820bd0848` → `Actionable` | CORRECT | It is a complete SHA‑256 hash that can be used directly in detection rules. |
| 34 | `C:\Windows\System32\cmd.exe` → `Described` | CORRECT | Although it is a full path, it refers to a common system file not unique to malicious activity. |
| 35 | `vssadmin.exe Delete Shadows /All /Quiet` → `Described` | INCORRECT — should be "Actionable" because it is a complete command line that can be matched directly in detection logs. | The full command string is specific and unique enough to serve as an actionable indicator. |
| 36 | `bcdedit /set {default} recoveryenabled No` → `Described` | INCORRECT — should be "Actionable" because it is an exact command that can be used to build low false‑positive detection rules. | The detailed command line is a complete indicator that can be directly matched. |
| 37 | `bcdedit /set {default} bootstatuspolicy ignoreallfailures` → `Described` | INCORRECT — should be "Actionable" because the precise command string can be directly used for detection. | The command is fully detailed and unique enough to be used as an actionable indicator. |
| 38 | `Sodinokibi ransomware` → `Mentioned` | CORRECT | It is a generic reference to a malware family that cannot be directly used for precise automated detection. |

| 39 | "test.jpg.1cd8t9ahd5" → Actionable | CORRECT | The filename is complete and unique enough to be directly matched. |
| 40 | ".1cd8t9ahd5" → Actionable | CORRECT | The unusual file extension is a complete, unique string that can be directly searched. |
| 41 | "1cd8t9ahd5-HOW-TO-DECRYPT.txt" → Actionable | CORRECT | This ransom note filename is a full, distinct indicator suitable for direct matching. |
| 42 | "hxxp://aplebzu47wgazapdqks6vrcv6zcnjppkbxbr6wketf56nf6aq2nmyoyd.onion/C2D97495C4BA3647" → Actionable | CORRECT | Despite the obfuscation ("hxxp"), the complete URL is unique and actionable. |
| 43 | "Sodinokibi" → Actionable | INCORRECT — should be "Mentioned" because malware family names are generic and can lead to false positives when used directly for detection. | Malware family names like "Sodinokibi" are conceptually referenced rather than unique, concrete artifacts. |
| 44 | "TOR browser" → Mentioned | CORRECT | The reference to a generic software tool is conceptual and not directly actionable. |

| 45 | "CV themed Word document" → "Described" | CORRECT | The observable is a generic description lacking specific identifiers, matching the "Described" criteria. |
| 46 | "macro" → "Described" | CORRECT | The term "macro" is too generic to be directly actionable, thus fitting the "Described" rank. |

| 47 | `T1189 Drive-by-Compromise` → `Mentioned` | CORRECT | As a MITRE ATT&CK technique reference, it’s conceptual and not directly actionable. |
| 48 | `T1190 Exploit Public-Facing Application` → `Mentioned` | CORRECT | It is a technique reference from MITRE ATT&CK, making it a conceptual indicator rather than a detection string. |
| 49 | `T1133 External Remote Services` → `Mentioned` | CORRECT | Being a MITRE ATT&CK technique identifier, it is used conceptually and isn’t directly actionable. |
| 50 | `T1193 Spearphishing Attachment` → `Mentioned` | CORRECT | As with other MITRE ATT&CK techniques, it is a taxonomy reference and not directly used in detection rules. |
| 51 | `T1195 Supply Chain Compromise` → `Mentioned` | CORRECT | It is a conceptual MITRE ATT&CK technique, thus correctly classified as Mentioned. |
| 52 | `11059 Command- Line Interface` → `Mentioned` | CORRECT | Despite the atypical numeric prefix, it remains a technique reference and is appropriately marked as Mentioned. |
| 53 | `T1054 Scripting` → `Mentioned` | CORRECT | This MITRE ATT&CK technique identifier is used as a conceptual reference, fitting the Mentioned category. |
| 54 | `T1036 Masquera ding` → `Mentioned` | CORRECT | Even with a typographical error, it represents a MITRE ATT&CK technique and is correctly classified as Mentioned. |
| 55 | `T1076 Remote Desktop Protocol` → `Mentioned` | CORRECT | As a MITRE ATT&CK technique reference, it remains a conceptual descriptor rather than an actionable observable. |
| 56 | `T1486 Data Encrypted for Impact` → `Mentioned` | CORRECT | It is a MITRE ATT&CK technique reference and thus appropriately designated as Mentioned. |
| 57 | `T1490 Inhibit System Recovery` → `Mentioned` | CORRECT | Being a reference from MITRE ATT&CK taxonomy, it is correctly classified as Mentioned. |

| 58 | `*\vssadmin.exe` → `Described` | CORRECT | The indicator is a wildcard detection pattern referencing a common Windows executable, which is too generic to be directly actionable. |
| 59 | `*delete shadows*` → `Described` | CORRECT | It is a generic substring command line pattern that does not uniquely pinpoint activity for automated detection. |
| 60 | `*\bcdedit.exe` → `Described` | CORRECT | The pattern targets a common Windows binary with wildcards, making it non‑unique and appropriately classified as Described. |
| 61 | `*recoveryenabled no*` → `Described` | CORRECT | This is a generic command line pattern and lacks the specificity required for actionable detection. |

| 62 | `08E7D0E983D0220D2A8461B92A47B7F124FB1A908E96AC764DE5C17CF4752` → `Actionable` | CORRECT | This file hash is a complete unique identifier suitable for direct matching. |
| 63 | `1556A1F0240524777400D348FEF71C6CB08E6AEFCCD5E941CD7A0BBF18C01` → `Actionable` | CORRECT | A complete file hash that can be used directly in detection rules. |
| 64 | `34A90353EB2A9DDE073ACC7C7AFDFDA485751796263D42A3AD7826F3D2F16` → `Actionable` | CORRECT | The observable is a full file hash and thus actionable for automated detection. |
| 65 | `3C110B159BED84231DCE840F02698F5E0EB894B1EC5E56C2AB85EDFAFAFDA` → `Actionable` | CORRECT | Being a complete file hash, it meets actionable criteria for detection. |
| 66 | `788E59B2FB3C80323B55CC94DC61C9D61A2D490874014591D0A8D36958B3E` → `Actionable` | CORRECT | This file hash is fully specified and fits the actionable category. |
| 67 | `7A4D05FCCC674B3E957F19E288D5149AC326C7197BDB4CCAC8055E81462A8` → `Actionable` | CORRECT | The provided hash is complete and can be directly used for threat detection. |
| 68 | `C1A4878CBD32046E2FD73BBD910C62354C22BA5E53F10451420FD2F7E778A` → `Actionable` | CORRECT | As a complete file hash, it is actionable for use in detection systems. |
| 69 | `CB77DC3AE2CEE170F3BD49148BF71080688E8CA3096AF1A07CC26677FB246` → `Actionable` | CORRECT | The file hash is a precise identifier, making it actionable for security analysis. |
| 70 | `D4E2FBCC71F4D02D01747BDAC5806DC56E59CAE4409E47867F3365FF998E8` → `Actionable` | CORRECT | A fully specified file hash that can be leveraged for automated matching. |
| 71 | `DEEC8382BC1A851A74B7261D7971EC65436AE43F51260948FAFCC794594EF` → `Actionable` | CORRECT | This file hash is complete and unique, fitting the actionable definition perfectly. |
| 72 | `E8C1360A9B36EF1E4F93FC17D95963A47EC87AD3C3D85A5E0A16C29D00D53` → `Actionable` | CORRECT | The observable is a complete file hash, making it directly actionable. |
| 73 | `FB8B03748B617ACF0EE3B138C5B37E74EC396BC73DA3362D633862D728374` → `Actionable` | CORRECT | As a complete and unique file hash, this observable is appropriately marked as actionable. |

| 74 | `06B323E0B626DC4F051596A39F52C46B35F88EA6F85A56DE0FD76EC73C7F385` → `Actionable` | Validator output CORRECT | This file hash is a complete, unique identifier that can be directly used for detection. |
| 75 | `0C71AD6BF359A83BD638A94403CE010B27DD7562EB8DA359A4316847E41C530` → `Actionable` | Validator output CORRECT | The observable is a full file hash, making it actionable for automated detection. |
| 76 | `0DAB0428B414B0440288A12FBC20DAB72339EF72FF5859E8C18D76DD8B169F5` → `Actionable` | Validator output CORRECT | A complete file hash which is unique and directly actionable. |
| 77 | `139A7D6656FEEBE539B2CB94B0729602F6218F54FB5B7531B58CFE040F18054` → `Actionable` | Validator output CORRECT | This file hash is provided in full and is suitable for matching in detection tools. |
| 78 | `1529519A30988F43B2A6ECE10F4115AB7EC282F25D3255F2A99A890E1C1C08D` → `Actionable` | Validator output CORRECT | A complete file hash that serves as an exact indicator for actionable use. |
| 79 | `1A2A7BB050304E33C3303990C456779DF8500730F3821D2842FCFDF5B39981D` → `Actionable` | Validator output CORRECT | The fully-specified file hash makes it directly actionable in detection systems. |
| 80 | `1D8D0EE5E83DA80F119E53527577A2B70D8A65282B3F9D011F178E34D358282` → `Actionable` | Validator output CORRECT | Complete file hash that is unique enough to be used for automated matching. |
| 81 | `1E22338DFB7BE3F01E2ACB28984039EF6381FC67AB8771E2EEF254687F3D0B9` → `Actionable` | Validator output CORRECT | This full file hash is a direct, actionable indicator. |
| 82 | `26C499E3F9EC79AE91FCA43DD81F9D1302A913EE30474223F3F5320C10C4A4A` → `Actionable` | Validator output CORRECT | A complete, high-entropy file hash that is suitable for detection rules. |
| 83 | `2CDE04820DE1C7CC080B36DB54B4F48E00629326716EB4678AAB2C8EAAAC828` → `Actionable` | Validator output CORRECT | The file hash is complete and unambiguous, making it actionable. |
| 84 | `338E8F24EEB38B5EF67EF662B65D592C816EBA94DFAAAC856021DAC407DAF29` → `Actionable` | Validator output CORRECT | This complete file hash serves as a precise indicator for detection. |
| 85 | `34DFFDB04CA07B014CDAEE857690F86E490050335291CCC84C94994FA91E016` → `Actionable` | Validator output CORRECT | A fully specified file hash that can be directly used in automated detection. |
| 86 | `3B5DD6038D9CB2DFD7D5089B629B1A3EFBC4A79EBDD1DC773B9790917E40849` → `Actionable` | Validator output CORRECT | Complete file hash; its uniqueness makes it directly actionable. |
| 87 | `3EB7FDAACCFCD2C71F527C87B55FFC40BCA2ED82728593DBD44AE31B0B389C1` → `Actionable` | Validator output CORRECT | The observable is a fully formed file hash, suitable for detection. |
| 88 | `412E951A350B84F8C0D0A2DB79029B4BBD6BE624656F2A739DB0FC00C6DBB52` → `Actionable` | Validator output CORRECT | This file hash is complete and unique, making it actionable. |
| 89 | `43AEF9C8395CB4BEBAED211E1A364CDF3074B80FF0A3150CD941A07977024B0` → `Actionable` | Validator output CORRECT | A complete file hash that can be reliably used for automated detection. |
| 90 | `48CE9CC7A0539232C3B5C0E6D44206F145B530A108792F51143B9A3FCED446A` → `Actionable` | Validator output CORRECT | The provided full file hash is unambiguous and actionable. |
| 91 | `510EB5EBDF01D199742A98E50DD00637C6B9AF6A22DB23635BD63D4B2BF9885` → `Actionable` | Validator output CORRECT | This complete file hash is a precise indicator that is directly actionable. |
| 92 | `53178B6CF05DE5165B5B15C88426215B502DCC4C681E8C049E37E3BB503CBEC` → `Actionable` | Validator output CORRECT | A full file hash that serves as an exact, actionable detection indicator. |
| 93 | `5DDE3386E0CE769BFD1880175168A71931D1FFB881B5050760C19F46A318EFC` → `Actionable` | Validator output CORRECT | The complete file hash is clearly actionable with unique identification. |
| 94 | `5DEB8DB611178E0858435460FC7CFF9E3F2CA23766CD5F023155C1EB6CF3E58` → `Actionable` | Validator output CORRECT | This file hash is provided in its entirety and is therefore actionable. |
| 95 | `60F1FC7E684C71E0203D7E6EA7FCB691B5CD723A7DA6EF4E462AE7F262E85` → `Actionable` | Validator output CORRECT | Despite the note about atypical length, it is a complete file hash usable for detection. |
| 96 | `6329693E5C61A2F0FA1A53BD177F5A332EF729050B3F109630B759C792F0B98` → `Actionable` | Validator output CORRECT | A full file hash that is unambiguous and directly actionable. |
| 97 | `6A2BD52A5D68A7250D1DE481DCCE91A32F54824C1C540F0A040D05F757220CD` → `Actionable` | Validator output CORRECT | This complete hash string is unique and can be used for detection. |
| 98 | `720FBE60F049848F02BA9B2B91926F80BA65B84F0D831A55F4E634C820BD084` → `Actionable` | Validator output CORRECT | The file hash is fully represented and valid as an actionable indicator. |
| 99 | `721A6E2F7EA7C72CD76FD00DCCE09BA9038C2629FEE19A9EB8B493D2419B0CE` → `Actionable` | Validator output CORRECT | Complete file hash provided for direct matching in detection systems. |
| 100 | `7227CB2316B9E3B678698609B41BA67958D509FBF37C46CBDE714B105B71BD6` → `Actionable` | Validator output CORRECT | A full, unique file hash that is immediately actionable. |
| 101 | `7BE57F5067BB6DA0EF6804A49C8F4BA951E3E668E4B9C51AD492DF16C925A1B` → `Actionable` | Validator output CORRECT | This file hash is complete and uniquely identifies a file for detection purposes. |
| 102 | `7E105447D0805615ED84971CEB96B2177C050AF2A7B4E396909109D9B6A4B9F` → `Actionable` | Validator output CORRECT | A fully formed file hash that can be directly utilized in detection rules. |
| 103 | `893FE5EFAFE1F89C93802840D71FFDA98D8F586220537CB03FA81B9F6D6044E` → `Actionable` | Validator output CORRECT | The file hash is complete and specific, making it actionable. |
| 104 | `8C7E451F9D41AB36361AD516AF1AFC7ED985B7595FA77B6606775CB4686F9D1` → `Actionable` | Validator output CORRECT | This is a full file hash and qualifies as an actionable indicator. |
| 105 | `98FC76F4920BEF67830BE2D7D9C45FCFF4CA47C9003573708C5B1EDFE5A1B70` → `Actionable` | Validator output CORRECT | A complete file hash that is unique and directly actionable. |
| 106 | `A1C58EE02858564BDBB8496EF4F9CEBAED39CF517F1C05240C79341DBD07AD9` → `Actionable` | Validator output CORRECT | The provided file hash is complete and serves as a precise detection indicator. |
| 107 | `A376246E76EDB3F78FB5AFC32B7C250EB93AC658C75A14356644644D4FC93BA` → `Actionable` | Validator output CORRECT | Complete file hash that can be directly matched in security systems. |
| 108 | `A46B363018C0D60F3DAFE2D23341FA9D72D989CE4C35D2EC1198F98805D41B8` → `Actionable` | Validator output CORRECT | This full hash string is unambiguous and actionable for detection. |
| 109 | `A593E2CC6FE811D6BDA7750806FDF4692624E4545AA6451036769455AA9C02C` → `Actionable` | Validator output CORRECT | A complete file hash that allows for precise matching in detection tools. |
| 110 | `A89E86FF5118A51337AD90686C9B5C1B986DD2BED51BBD22334D8A9D1DD8958` → `Actionable` | Validator output CORRECT | Fully specified and unique file hash, making it directly actionable. |
| 111 | `A9BBF8012630DC6BCD8ABAC51E45FF9EA185F4EF5FEA037A63CF36F1CCED728` → `Actionable` | Validator output CORRECT | Complete file hash provided for exact matching in detection setups. |
| 112 | `AB9755A71005534C3D54354BE77F304D7CB931B65A9DE9A3B0F5FF85F1118F9` → `Actionable` | Validator output CORRECT | This file hash is fully formed and uniquely actionable. |
| 113 | `ADEF0855D17DD8DDDCB6C4446E58AA9F5508A0453F53DD3FEFF8D034D692616` → `Actionable` | Validator output CORRECT | A complete and unique file hash that is suitable for detection. |
| 114 | `B2FF63F76AAEB73B02777C3B79022BA5A0DB2D44F61071AF808C4074E88ED6F` → `Actionable` | Validator output CORRECT | The file hash is fully specified and directly actionable. |
| 115 | `BD034A6A4481AC8902E20F98350D47D06A035C57E5EA8A21D34BFE017EDB13D` → `Actionable` | Validator output CORRECT | A complete file hash that can be used for precise detection. |
| 116 | `BF7114F025FFF7DBC6B7AFF8E4EDB0DD8A7B53C3766429A3C5F10142609968F` → `Actionable` | Validator output CORRECT | This is a full file hash, making it an actionable indicator. |
| 117 | `C9FBE5FA6363031BD15DEE006151DDF7D9921C415421479FEC2E9732E451B58` → `Actionable` | Validator output CORRECT | Complete file hash provided for effective detection matching. |
| 118 | `D5F7964DC07BB3465FBC3A995FCADD623197716480F6B86518A5DFDAFC9F3AF` → `Actionable` | Validator output CORRECT | A fully specified file hash that is uniquely actionable. |
| 119 | `D66F94A9FEAA7AB3C06C6AFB7E2C00806607B17C77C068539E7C5F11A0447B0` → `Actionable` | Validator output CORRECT | The complete file hash is a precise and actionable observable. |
| 120 | `D74CD044351030290F6AD8F70F91D51B6C39675CA3C70C45B5B0C5BD09589FF` → `Actionable` | Validator output CORRECT | This full file hash is unambiguous and directly usable for detection. |
| 121 | `DDB62308575FC302245EF34D7C67EE95EEFB8A834201475DCDF490E24AA6A44` → `Actionable` | Validator output CORRECT | A complete file hash that can be exactly matched in detection systems. |
| 122 | `E4E83D2787545C363C909247592FA5513F6A9F330C13586A14B99D6B7BB60A9` → `Actionable` | Validator output CORRECT | The full file hash is provided and is directly actionable for threat detection. |
| 123 | `E776DE801B898C65CBEF480CCEC47A60C1436E4BA1EA11F99EF2B90AB05961F` → `Actionable` | Validator output CORRECT | This complete file hash serves as a unique indicator for detection mechanisms. |
| 124 | `E7F9C0229C0874C069C2F3DCF237E1EE334AC4F9BC955BE8146D07941FF3579` → `Actionable` | Validator output CORRECT | A fully specified file hash that is actionable with minimal ambiguity. |
| 125 | `F582A3E83181096236A5D63445CED2EA2F6F61BB9B4DDF82762DD2AE11C233A` → `Actionable` | Validator output CORRECT | The observable is a complete file hash, making it directly actionable. |
| 126 | `F80527B6AD651D82B59B018C2960AB4AF31891AAB4315F325920C010CCB38F7` → `Actionable` | Validator output CORRECT | This complete file hash is unique and can be directly used for detection. |
| 127 | `FB1358F4F00223FD5AA87BED22B29A65DCF7C1C26921750329EF67CBD1222B0` → `Actionable` | Validator output CORRECT | A full file hash that is a precise and actionable indicator. |
| 128 | `FBA829759D359DEA91DB09AC8B4674237D8DBC57EC8B76A3EBF227DA9AE9653` → `Actionable` | Validator output CORRECT | The complete file hash is unambiguous and suitable for automated detection. |
| 129 | `Anmcousa.xyz` → `Actionable` | Validator output CORRECT | The domain name is complete and can be directly used in DNS-based detections. |
| 130 | `Blaerck.xyz` → `Actionable` | Validator output CORRECT | A complete domain name that is actionable for threat detection. |
| 131 | `cklinosleeve.icu` → `Actionable` | Validator output CORRECT | This full domain name is specific and can be used directly for detection. |
| 132 | `fcamylleibrahim.top` → `Actionable` | Validator output CORRECT | The domain observable is complete, making it directly actionable for monitoring. |

| 133 | `45.67.14.162` → `Actionable` | CORRECT | A complete and unique IPv4 address that is directly actionable. |
| 134 | `54.39.233.132` → `Actionable` | CORRECT | Fully specified IPv4 address, which is directly usable for detection. |
| 135 | `185.193.141.248` → `Actionable` | CORRECT | A complete IPv4 address that can be matched directly by automated systems. |
| 136 | `185.234.218.9` → `Actionable` | CORRECT | It is a unique and complete IPv4 address, making it fully actionable. |

| 137 | `CVE-2025-22457` → `Actionable` | CORRECT | The CVE identifier is complete and unique, allowing it to be directly matched for detection purposes. |

| 138 | IngressNightmare → Mentioned | CORRECT | The observable is a conceptual vocabulary identifier (vulnerability codename) that is not concrete enough for actionable detection. |

